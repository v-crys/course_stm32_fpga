
test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000397c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000134  08003a88  08003a88  00013a88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08003bbc  08003bbc  00013bbc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08003bc0  08003bc0  00013bc0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         000001e0  20000000  08003bc4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00001154  200001e0  08003da4  000201e0  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  20001334  08003da4  00021334  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
  9 .debug_info   00012bf5  00000000  00000000  00020209  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000335c  00000000  00000000  00032dfe  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000055b5  00000000  00000000  0003615a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000980  00000000  00000000  0003b710  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000ce8  00000000  00000000  0003c090  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0000570d  00000000  00000000  0003cd78  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0000317e  00000000  00000000  00042485  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  00045603  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00001e74  00000000  00000000  00045680  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200001e0 	.word	0x200001e0
 8000128:	00000000 	.word	0x00000000
 800012c:	08003a70 	.word	0x08003a70

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200001e4 	.word	0x200001e4
 8000148:	08003a70 	.word	0x08003a70

0800014c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800014c:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800014e:	4b0e      	ldr	r3, [pc, #56]	; (8000188 <HAL_InitTick+0x3c>)
{
 8000150:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000152:	7818      	ldrb	r0, [r3, #0]
 8000154:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000158:	fbb3 f3f0 	udiv	r3, r3, r0
 800015c:	4a0b      	ldr	r2, [pc, #44]	; (800018c <HAL_InitTick+0x40>)
 800015e:	6810      	ldr	r0, [r2, #0]
 8000160:	fbb0 f0f3 	udiv	r0, r0, r3
 8000164:	f000 f8a0 	bl	80002a8 <HAL_SYSTICK_Config>
 8000168:	4604      	mov	r4, r0
 800016a:	b958      	cbnz	r0, 8000184 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800016c:	2d0f      	cmp	r5, #15
 800016e:	d809      	bhi.n	8000184 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000170:	4602      	mov	r2, r0
 8000172:	4629      	mov	r1, r5
 8000174:	f04f 30ff 	mov.w	r0, #4294967295
 8000178:	f000 f854 	bl	8000224 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800017c:	4b04      	ldr	r3, [pc, #16]	; (8000190 <HAL_InitTick+0x44>)
 800017e:	4620      	mov	r0, r4
 8000180:	601d      	str	r5, [r3, #0]
 8000182:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8000184:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8000186:	bd38      	pop	{r3, r4, r5, pc}
 8000188:	20000000 	.word	0x20000000
 800018c:	20000118 	.word	0x20000118
 8000190:	20000004 	.word	0x20000004

08000194 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000194:	4a07      	ldr	r2, [pc, #28]	; (80001b4 <HAL_Init+0x20>)
{
 8000196:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000198:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800019a:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800019c:	f043 0310 	orr.w	r3, r3, #16
 80001a0:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80001a2:	f000 f82d 	bl	8000200 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80001a6:	2000      	movs	r0, #0
 80001a8:	f7ff ffd0 	bl	800014c <HAL_InitTick>
  HAL_MspInit();
 80001ac:	f002 fa30 	bl	8002610 <HAL_MspInit>
}
 80001b0:	2000      	movs	r0, #0
 80001b2:	bd08      	pop	{r3, pc}
 80001b4:	40022000 	.word	0x40022000

080001b8 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80001b8:	4a03      	ldr	r2, [pc, #12]	; (80001c8 <HAL_IncTick+0x10>)
 80001ba:	4b04      	ldr	r3, [pc, #16]	; (80001cc <HAL_IncTick+0x14>)
 80001bc:	6811      	ldr	r1, [r2, #0]
 80001be:	781b      	ldrb	r3, [r3, #0]
 80001c0:	440b      	add	r3, r1
 80001c2:	6013      	str	r3, [r2, #0]
 80001c4:	4770      	bx	lr
 80001c6:	bf00      	nop
 80001c8:	2000042c 	.word	0x2000042c
 80001cc:	20000000 	.word	0x20000000

080001d0 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80001d0:	4b01      	ldr	r3, [pc, #4]	; (80001d8 <HAL_GetTick+0x8>)
 80001d2:	6818      	ldr	r0, [r3, #0]
}
 80001d4:	4770      	bx	lr
 80001d6:	bf00      	nop
 80001d8:	2000042c 	.word	0x2000042c

080001dc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80001dc:	b538      	push	{r3, r4, r5, lr}
 80001de:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80001e0:	f7ff fff6 	bl	80001d0 <HAL_GetTick>
 80001e4:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80001e6:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 80001e8:	bf1e      	ittt	ne
 80001ea:	4b04      	ldrne	r3, [pc, #16]	; (80001fc <HAL_Delay+0x20>)
 80001ec:	781b      	ldrbne	r3, [r3, #0]
 80001ee:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80001f0:	f7ff ffee 	bl	80001d0 <HAL_GetTick>
 80001f4:	1b40      	subs	r0, r0, r5
 80001f6:	4284      	cmp	r4, r0
 80001f8:	d8fa      	bhi.n	80001f0 <HAL_Delay+0x14>
  {
  }
}
 80001fa:	bd38      	pop	{r3, r4, r5, pc}
 80001fc:	20000000 	.word	0x20000000

08000200 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000200:	4a07      	ldr	r2, [pc, #28]	; (8000220 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000202:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000204:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000206:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800020a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800020e:	041b      	lsls	r3, r3, #16
 8000210:	0c1b      	lsrs	r3, r3, #16
 8000212:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000216:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 800021a:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 800021c:	60d3      	str	r3, [r2, #12]
 800021e:	4770      	bx	lr
 8000220:	e000ed00 	.word	0xe000ed00

08000224 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000224:	4b17      	ldr	r3, [pc, #92]	; (8000284 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000226:	b530      	push	{r4, r5, lr}
 8000228:	68dc      	ldr	r4, [r3, #12]
 800022a:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800022e:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000232:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000234:	2b04      	cmp	r3, #4
 8000236:	bf28      	it	cs
 8000238:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800023a:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800023c:	f04f 0501 	mov.w	r5, #1
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000240:	bf98      	it	ls
 8000242:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000244:	fa05 f303 	lsl.w	r3, r5, r3
 8000248:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800024c:	bf88      	it	hi
 800024e:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000250:	4019      	ands	r1, r3
 8000252:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000254:	fa05 f404 	lsl.w	r4, r5, r4
 8000258:	3c01      	subs	r4, #1
 800025a:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) >= 0)
 800025c:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800025e:	ea42 0201 	orr.w	r2, r2, r1
 8000262:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000266:	bfa9      	itett	ge
 8000268:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800026c:	4b06      	ldrlt	r3, [pc, #24]	; (8000288 <HAL_NVIC_SetPriority+0x64>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800026e:	b2d2      	uxtbge	r2, r2
 8000270:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000274:	bfbb      	ittet	lt
 8000276:	f000 000f 	andlt.w	r0, r0, #15
 800027a:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800027c:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000280:	541a      	strblt	r2, [r3, r0]
 8000282:	bd30      	pop	{r4, r5, pc}
 8000284:	e000ed00 	.word	0xe000ed00
 8000288:	e000ed14 	.word	0xe000ed14

0800028c <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 800028c:	2800      	cmp	r0, #0
 800028e:	db08      	blt.n	80002a2 <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000290:	2301      	movs	r3, #1
 8000292:	0942      	lsrs	r2, r0, #5
 8000294:	f000 001f 	and.w	r0, r0, #31
 8000298:	fa03 f000 	lsl.w	r0, r3, r0
 800029c:	4b01      	ldr	r3, [pc, #4]	; (80002a4 <HAL_NVIC_EnableIRQ+0x18>)
 800029e:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 80002a2:	4770      	bx	lr
 80002a4:	e000e100 	.word	0xe000e100

080002a8 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80002a8:	3801      	subs	r0, #1
 80002aa:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80002ae:	d20a      	bcs.n	80002c6 <HAL_SYSTICK_Config+0x1e>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002b0:	21f0      	movs	r1, #240	; 0xf0
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80002b2:	4b06      	ldr	r3, [pc, #24]	; (80002cc <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002b4:	4a06      	ldr	r2, [pc, #24]	; (80002d0 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80002b6:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002b8:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80002bc:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80002be:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80002c0:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80002c2:	601a      	str	r2, [r3, #0]
 80002c4:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80002c6:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80002c8:	4770      	bx	lr
 80002ca:	bf00      	nop
 80002cc:	e000e010 	.word	0xe000e010
 80002d0:	e000ed00 	.word	0xe000ed00

080002d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80002d4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00u;
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80002d8:	2400      	movs	r4, #0
  uint32_t position = 0x00u;
 80002da:	4626      	mov	r6, r4
 80002dc:	4b66      	ldr	r3, [pc, #408]	; (8000478 <HAL_GPIO_Init+0x1a4>)
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80002de:	f8df e1a8 	ldr.w	lr, [pc, #424]	; 8000488 <HAL_GPIO_Init+0x1b4>
 80002e2:	f8df c1a8 	ldr.w	ip, [pc, #424]	; 800048c <HAL_GPIO_Init+0x1b8>
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80002e6:	680a      	ldr	r2, [r1, #0]
 80002e8:	fa32 f506 	lsrs.w	r5, r2, r6
 80002ec:	d102      	bne.n	80002f4 <HAL_GPIO_Init+0x20>
      }
    }

	position++;
  }
}
 80002ee:	b003      	add	sp, #12
 80002f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ioposition = (0x01uL << position);
 80002f4:	f04f 0801 	mov.w	r8, #1
 80002f8:	fa08 f806 	lsl.w	r8, r8, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80002fc:	ea02 0208 	and.w	r2, r2, r8
    if (iocurrent == ioposition)
 8000300:	4590      	cmp	r8, r2
 8000302:	d17f      	bne.n	8000404 <HAL_GPIO_Init+0x130>
      switch (GPIO_Init->Mode)
 8000304:	684d      	ldr	r5, [r1, #4]
 8000306:	2d12      	cmp	r5, #18
 8000308:	f000 80aa 	beq.w	8000460 <HAL_GPIO_Init+0x18c>
 800030c:	f200 8083 	bhi.w	8000416 <HAL_GPIO_Init+0x142>
 8000310:	2d02      	cmp	r5, #2
 8000312:	f000 80a2 	beq.w	800045a <HAL_GPIO_Init+0x186>
 8000316:	d877      	bhi.n	8000408 <HAL_GPIO_Init+0x134>
 8000318:	2d00      	cmp	r5, #0
 800031a:	f000 8089 	beq.w	8000430 <HAL_GPIO_Init+0x15c>
 800031e:	2d01      	cmp	r5, #1
 8000320:	f000 8099 	beq.w	8000456 <HAL_GPIO_Init+0x182>
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000324:	f04f 090f 	mov.w	r9, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000328:	2aff      	cmp	r2, #255	; 0xff
 800032a:	bf93      	iteet	ls
 800032c:	4682      	movls	sl, r0
 800032e:	f106 4580 	addhi.w	r5, r6, #1073741824	; 0x40000000
 8000332:	3d08      	subhi	r5, #8
 8000334:	f8d0 b000 	ldrls.w	fp, [r0]
 8000338:	bf92      	itee	ls
 800033a:	00b5      	lslls	r5, r6, #2
 800033c:	f8d0 b004 	ldrhi.w	fp, [r0, #4]
 8000340:	00ad      	lslhi	r5, r5, #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000342:	fa09 f805 	lsl.w	r8, r9, r5
 8000346:	ea2b 0808 	bic.w	r8, fp, r8
 800034a:	fa04 f505 	lsl.w	r5, r4, r5
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800034e:	bf88      	it	hi
 8000350:	f100 0a04 	addhi.w	sl, r0, #4
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000354:	ea48 0505 	orr.w	r5, r8, r5
 8000358:	f8ca 5000 	str.w	r5, [sl]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800035c:	f8d1 a004 	ldr.w	sl, [r1, #4]
 8000360:	f01a 5f80 	tst.w	sl, #268435456	; 0x10000000
 8000364:	d04e      	beq.n	8000404 <HAL_GPIO_Init+0x130>
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000366:	4d45      	ldr	r5, [pc, #276]	; (800047c <HAL_GPIO_Init+0x1a8>)
 8000368:	4f44      	ldr	r7, [pc, #272]	; (800047c <HAL_GPIO_Init+0x1a8>)
 800036a:	69ad      	ldr	r5, [r5, #24]
 800036c:	f026 0803 	bic.w	r8, r6, #3
 8000370:	f045 0501 	orr.w	r5, r5, #1
 8000374:	61bd      	str	r5, [r7, #24]
 8000376:	69bd      	ldr	r5, [r7, #24]
 8000378:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
 800037c:	f005 0501 	and.w	r5, r5, #1
 8000380:	9501      	str	r5, [sp, #4]
 8000382:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000386:	f006 0b03 	and.w	fp, r6, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 800038a:	9d01      	ldr	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800038c:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = AFIO->EXTICR[position >> 2u];
 8000390:	f8d8 5008 	ldr.w	r5, [r8, #8]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000394:	fa09 f90b 	lsl.w	r9, r9, fp
 8000398:	ea25 0909 	bic.w	r9, r5, r9
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800039c:	4d38      	ldr	r5, [pc, #224]	; (8000480 <HAL_GPIO_Init+0x1ac>)
 800039e:	42a8      	cmp	r0, r5
 80003a0:	d063      	beq.n	800046a <HAL_GPIO_Init+0x196>
 80003a2:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80003a6:	42a8      	cmp	r0, r5
 80003a8:	d061      	beq.n	800046e <HAL_GPIO_Init+0x19a>
 80003aa:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80003ae:	42a8      	cmp	r0, r5
 80003b0:	d05f      	beq.n	8000472 <HAL_GPIO_Init+0x19e>
 80003b2:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80003b6:	42a8      	cmp	r0, r5
 80003b8:	bf0c      	ite	eq
 80003ba:	2503      	moveq	r5, #3
 80003bc:	2504      	movne	r5, #4
 80003be:	fa05 f50b 	lsl.w	r5, r5, fp
 80003c2:	ea45 0509 	orr.w	r5, r5, r9
        AFIO->EXTICR[position >> 2u] = temp;
 80003c6:	f8c8 5008 	str.w	r5, [r8, #8]
          SET_BIT(EXTI->IMR, iocurrent);
 80003ca:	681d      	ldr	r5, [r3, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80003cc:	f41a 3f80 	tst.w	sl, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 80003d0:	bf14      	ite	ne
 80003d2:	4315      	orrne	r5, r2
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80003d4:	4395      	biceq	r5, r2
 80003d6:	601d      	str	r5, [r3, #0]
          SET_BIT(EXTI->EMR, iocurrent);
 80003d8:	685d      	ldr	r5, [r3, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80003da:	f41a 3f00 	tst.w	sl, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 80003de:	bf14      	ite	ne
 80003e0:	4315      	orrne	r5, r2
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80003e2:	4395      	biceq	r5, r2
 80003e4:	605d      	str	r5, [r3, #4]
          SET_BIT(EXTI->RTSR, iocurrent);
 80003e6:	689d      	ldr	r5, [r3, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80003e8:	f41a 1f80 	tst.w	sl, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 80003ec:	bf14      	ite	ne
 80003ee:	4315      	orrne	r5, r2
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80003f0:	4395      	biceq	r5, r2
 80003f2:	609d      	str	r5, [r3, #8]
          SET_BIT(EXTI->FTSR, iocurrent);
 80003f4:	68dd      	ldr	r5, [r3, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80003f6:	f41a 1f00 	tst.w	sl, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 80003fa:	bf14      	ite	ne
 80003fc:	432a      	orrne	r2, r5
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80003fe:	ea25 0202 	biceq.w	r2, r5, r2
 8000402:	60da      	str	r2, [r3, #12]
	position++;
 8000404:	3601      	adds	r6, #1
 8000406:	e76e      	b.n	80002e6 <HAL_GPIO_Init+0x12>
      switch (GPIO_Init->Mode)
 8000408:	2d03      	cmp	r5, #3
 800040a:	d022      	beq.n	8000452 <HAL_GPIO_Init+0x17e>
 800040c:	2d11      	cmp	r5, #17
 800040e:	d189      	bne.n	8000324 <HAL_GPIO_Init+0x50>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000410:	68cc      	ldr	r4, [r1, #12]
 8000412:	3404      	adds	r4, #4
          break;
 8000414:	e786      	b.n	8000324 <HAL_GPIO_Init+0x50>
      switch (GPIO_Init->Mode)
 8000416:	4f1b      	ldr	r7, [pc, #108]	; (8000484 <HAL_GPIO_Init+0x1b0>)
 8000418:	42bd      	cmp	r5, r7
 800041a:	d009      	beq.n	8000430 <HAL_GPIO_Init+0x15c>
 800041c:	d812      	bhi.n	8000444 <HAL_GPIO_Init+0x170>
 800041e:	f8df 9070 	ldr.w	r9, [pc, #112]	; 8000490 <HAL_GPIO_Init+0x1bc>
 8000422:	454d      	cmp	r5, r9
 8000424:	d004      	beq.n	8000430 <HAL_GPIO_Init+0x15c>
 8000426:	f509 3980 	add.w	r9, r9, #65536	; 0x10000
 800042a:	454d      	cmp	r5, r9
 800042c:	f47f af7a 	bne.w	8000324 <HAL_GPIO_Init+0x50>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000430:	688c      	ldr	r4, [r1, #8]
 8000432:	b1c4      	cbz	r4, 8000466 <HAL_GPIO_Init+0x192>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000434:	2c01      	cmp	r4, #1
            GPIOx->BSRR = ioposition;
 8000436:	bf0c      	ite	eq
 8000438:	f8c0 8010 	streq.w	r8, [r0, #16]
            GPIOx->BRR = ioposition;
 800043c:	f8c0 8014 	strne.w	r8, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000440:	2408      	movs	r4, #8
 8000442:	e76f      	b.n	8000324 <HAL_GPIO_Init+0x50>
      switch (GPIO_Init->Mode)
 8000444:	4575      	cmp	r5, lr
 8000446:	d0f3      	beq.n	8000430 <HAL_GPIO_Init+0x15c>
 8000448:	4565      	cmp	r5, ip
 800044a:	d0f1      	beq.n	8000430 <HAL_GPIO_Init+0x15c>
 800044c:	f8df 9044 	ldr.w	r9, [pc, #68]	; 8000494 <HAL_GPIO_Init+0x1c0>
 8000450:	e7eb      	b.n	800042a <HAL_GPIO_Init+0x156>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000452:	2400      	movs	r4, #0
 8000454:	e766      	b.n	8000324 <HAL_GPIO_Init+0x50>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000456:	68cc      	ldr	r4, [r1, #12]
          break;
 8000458:	e764      	b.n	8000324 <HAL_GPIO_Init+0x50>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800045a:	68cc      	ldr	r4, [r1, #12]
 800045c:	3408      	adds	r4, #8
          break;
 800045e:	e761      	b.n	8000324 <HAL_GPIO_Init+0x50>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000460:	68cc      	ldr	r4, [r1, #12]
 8000462:	340c      	adds	r4, #12
          break;
 8000464:	e75e      	b.n	8000324 <HAL_GPIO_Init+0x50>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000466:	2404      	movs	r4, #4
 8000468:	e75c      	b.n	8000324 <HAL_GPIO_Init+0x50>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800046a:	2500      	movs	r5, #0
 800046c:	e7a7      	b.n	80003be <HAL_GPIO_Init+0xea>
 800046e:	2501      	movs	r5, #1
 8000470:	e7a5      	b.n	80003be <HAL_GPIO_Init+0xea>
 8000472:	2502      	movs	r5, #2
 8000474:	e7a3      	b.n	80003be <HAL_GPIO_Init+0xea>
 8000476:	bf00      	nop
 8000478:	40010400 	.word	0x40010400
 800047c:	40021000 	.word	0x40021000
 8000480:	40010800 	.word	0x40010800
 8000484:	10210000 	.word	0x10210000
 8000488:	10310000 	.word	0x10310000
 800048c:	10320000 	.word	0x10320000
 8000490:	10110000 	.word	0x10110000
 8000494:	10220000 	.word	0x10220000

08000498 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000498:	b10a      	cbz	r2, 800049e <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800049a:	6101      	str	r1, [r0, #16]
 800049c:	4770      	bx	lr
 800049e:	0409      	lsls	r1, r1, #16
 80004a0:	e7fb      	b.n	800049a <HAL_GPIO_WritePin+0x2>

080004a2 <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 80004a2:	68c3      	ldr	r3, [r0, #12]
 80004a4:	420b      	tst	r3, r1
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80004a6:	bf14      	ite	ne
 80004a8:	6141      	strne	r1, [r0, #20]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80004aa:	6101      	streq	r1, [r0, #16]
 80004ac:	4770      	bx	lr

080004ae <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80004ae:	b5f0      	push	{r4, r5, r6, r7, lr}
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80004b0:	4604      	mov	r4, r0
{
 80004b2:	b087      	sub	sp, #28
  if (hpcd == NULL)
 80004b4:	b310      	cbz	r0, 80004fc <HAL_PCD_Init+0x4e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80004b6:	f890 3229 	ldrb.w	r3, [r0, #553]	; 0x229
 80004ba:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80004be:	b91b      	cbnz	r3, 80004c8 <HAL_PCD_Init+0x1a>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80004c0:	f880 2228 	strb.w	r2, [r0, #552]	; 0x228

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80004c4:	f002 f98c 	bl	80027e0 <HAL_PCD_MspInit>
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80004c8:	4625      	mov	r5, r4
  hpcd->State = HAL_PCD_STATE_BUSY;
 80004ca:	2303      	movs	r3, #3

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80004cc:	466e      	mov	r6, sp
  __HAL_PCD_DISABLE(hpcd);
 80004ce:	f855 0b10 	ldr.w	r0, [r5], #16
  hpcd->State = HAL_PCD_STATE_BUSY;
 80004d2:	f884 3229 	strb.w	r3, [r4, #553]	; 0x229
  __HAL_PCD_DISABLE(hpcd);
 80004d6:	f000 febf 	bl	8001258 <USB_DisableGlobalInt>
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80004da:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80004dc:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80004de:	682b      	ldr	r3, [r5, #0]
 80004e0:	4625      	mov	r5, r4
 80004e2:	6033      	str	r3, [r6, #0]
 80004e4:	1d27      	adds	r7, r4, #4
 80004e6:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 80004ea:	f855 0b10 	ldr.w	r0, [r5], #16
 80004ee:	f000 fea3 	bl	8001238 <USB_CoreInit>
 80004f2:	4606      	mov	r6, r0
 80004f4:	b120      	cbz	r0, 8000500 <HAL_PCD_Init+0x52>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80004f6:	2302      	movs	r3, #2
 80004f8:	f884 3229 	strb.w	r3, [r4, #553]	; 0x229
    return HAL_ERROR;
 80004fc:	2501      	movs	r5, #1
 80004fe:	e048      	b.n	8000592 <HAL_PCD_Init+0xe4>
    return HAL_ERROR;
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8000500:	4601      	mov	r1, r0
 8000502:	6820      	ldr	r0, [r4, #0]
 8000504:	f000 feb2 	bl	800126c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000508:	4630      	mov	r0, r6
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800050a:	f04f 0e01 	mov.w	lr, #1
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800050e:	6861      	ldr	r1, [r4, #4]
 8000510:	b2c3      	uxtb	r3, r0
 8000512:	4299      	cmp	r1, r3
 8000514:	f100 0001 	add.w	r0, r0, #1
 8000518:	d817      	bhi.n	800054a <HAL_PCD_Init+0x9c>
 800051a:	2200      	movs	r2, #0
    hpcd->IN_ep[i].xfer_len = 0U;
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800051c:	4610      	mov	r0, r2
 800051e:	b2d3      	uxtb	r3, r2
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000520:	4299      	cmp	r1, r3
 8000522:	f102 0201 	add.w	r2, r2, #1
 8000526:	d81d      	bhi.n	8000564 <HAL_PCD_Init+0xb6>
    hpcd->OUT_ep[i].xfer_buff = 0U;
    hpcd->OUT_ep[i].xfer_len = 0U;
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000528:	466e      	mov	r6, sp
 800052a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800052c:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800052e:	682b      	ldr	r3, [r5, #0]
 8000530:	6033      	str	r3, [r6, #0]
 8000532:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 8000536:	6820      	ldr	r0, [r4, #0]
 8000538:	f000 fe9a 	bl	8001270 <USB_DevInit>
 800053c:	2301      	movs	r3, #1
 800053e:	4605      	mov	r5, r0
 8000540:	b300      	cbz	r0, 8000584 <HAL_PCD_Init+0xd6>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000542:	2202      	movs	r2, #2
 8000544:	f884 2229 	strb.w	r2, [r4, #553]	; 0x229
 8000548:	e7d8      	b.n	80004fc <HAL_PCD_Init+0x4e>
    hpcd->IN_ep[i].is_in = 1U;
 800054a:	eb04 1243 	add.w	r2, r4, r3, lsl #5
 800054e:	f882 e029 	strb.w	lr, [r2, #41]	; 0x29
    hpcd->IN_ep[i].num = i;
 8000552:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
    hpcd->IN_ep[i].tx_fifo_num = i;
 8000556:	86d3      	strh	r3, [r2, #54]	; 0x36
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000558:	f882 602b 	strb.w	r6, [r2, #43]	; 0x2b
    hpcd->IN_ep[i].maxpacket = 0U;
 800055c:	6396      	str	r6, [r2, #56]	; 0x38
    hpcd->IN_ep[i].xfer_buff = 0U;
 800055e:	63d6      	str	r6, [r2, #60]	; 0x3c
    hpcd->IN_ep[i].xfer_len = 0U;
 8000560:	6416      	str	r6, [r2, #64]	; 0x40
 8000562:	e7d5      	b.n	8000510 <HAL_PCD_Init+0x62>
    hpcd->OUT_ep[i].is_in = 0U;
 8000564:	eb04 1643 	add.w	r6, r4, r3, lsl #5
    hpcd->OUT_ep[i].num = i;
 8000568:	f886 3128 	strb.w	r3, [r6, #296]	; 0x128
    hpcd->OUT_ep[i].xfer_len = 0U;
 800056c:	330a      	adds	r3, #10
 800056e:	015b      	lsls	r3, r3, #5
    hpcd->OUT_ep[i].is_in = 0U;
 8000570:	f886 0129 	strb.w	r0, [r6, #297]	; 0x129
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8000574:	f886 012b 	strb.w	r0, [r6, #299]	; 0x12b
    hpcd->OUT_ep[i].maxpacket = 0U;
 8000578:	f8c6 0138 	str.w	r0, [r6, #312]	; 0x138
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800057c:	f8c6 013c 	str.w	r0, [r6, #316]	; 0x13c
    hpcd->OUT_ep[i].xfer_len = 0U;
 8000580:	50e0      	str	r0, [r4, r3]
 8000582:	e7cc      	b.n	800051e <HAL_PCD_Init+0x70>
    return HAL_ERROR;
  }

  hpcd->USB_Address = 0U;
 8000584:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8000588:	f884 3229 	strb.w	r3, [r4, #553]	; 0x229
  (void)USB_DevDisconnect(hpcd->Instance);
 800058c:	6820      	ldr	r0, [r4, #0]
 800058e:	f001 f955 	bl	800183c <USB_DevDisconnect>

  return HAL_OK;
}
 8000592:	4628      	mov	r0, r5
 8000594:	b007      	add	sp, #28
 8000596:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000598 <HAL_PCD_Start>:
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
  __HAL_LOCK(hpcd);
 8000598:	f890 3228 	ldrb.w	r3, [r0, #552]	; 0x228
{
 800059c:	b510      	push	{r4, lr}
  __HAL_LOCK(hpcd);
 800059e:	2b01      	cmp	r3, #1
{
 80005a0:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 80005a2:	d00e      	beq.n	80005c2 <HAL_PCD_Start+0x2a>
 80005a4:	2101      	movs	r1, #1
 80005a6:	f880 1228 	strb.w	r1, [r0, #552]	; 0x228
#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 80005aa:	f002 fa42 	bl	8002a32 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */
  (void)USB_DevConnect(hpcd->Instance);
 80005ae:	6820      	ldr	r0, [r4, #0]
 80005b0:	f001 f942 	bl	8001838 <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 80005b4:	6820      	ldr	r0, [r4, #0]
 80005b6:	f000 fe46 	bl	8001246 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 80005ba:	2000      	movs	r0, #0
 80005bc:	f884 0228 	strb.w	r0, [r4, #552]	; 0x228
  return HAL_OK;
 80005c0:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 80005c2:	2002      	movs	r0, #2
}
 80005c4:	bd10      	pop	{r4, pc}

080005c6 <HAL_PCD_SetAddress>:
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
  __HAL_LOCK(hpcd);
 80005c6:	f890 2228 	ldrb.w	r2, [r0, #552]	; 0x228
{
 80005ca:	b510      	push	{r4, lr}
  __HAL_LOCK(hpcd);
 80005cc:	2a01      	cmp	r2, #1
{
 80005ce:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 80005d0:	d00b      	beq.n	80005ea <HAL_PCD_SetAddress+0x24>
 80005d2:	2201      	movs	r2, #1
 80005d4:	f880 2228 	strb.w	r2, [r0, #552]	; 0x228
  hpcd->USB_Address = address;
 80005d8:	f884 1024 	strb.w	r1, [r4, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80005dc:	6800      	ldr	r0, [r0, #0]
 80005de:	f001 f925 	bl	800182c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80005e2:	2000      	movs	r0, #0
 80005e4:	f884 0228 	strb.w	r0, [r4, #552]	; 0x228
 80005e8:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 80005ea:	2002      	movs	r0, #2
  return HAL_OK;
}
 80005ec:	bd10      	pop	{r4, pc}

080005ee <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 80005ee:	b570      	push	{r4, r5, r6, lr}
  HAL_StatusTypeDef  ret = HAL_OK;
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80005f0:	f011 0f80 	tst.w	r1, #128	; 0x80
{
 80005f4:	4604      	mov	r4, r0
 80005f6:	f001 0007 	and.w	r0, r1, #7
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80005fa:	ea4f 1540 	mov.w	r5, r0, lsl #5
  if ((ep_addr & 0x80U) == 0x80U)
 80005fe:	d01f      	beq.n	8000640 <HAL_PCD_EP_Open+0x52>
    ep->is_in = 1U;
 8000600:	2601      	movs	r6, #1
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8000602:	f105 0128 	add.w	r1, r5, #40	; 0x28
    ep->is_in = 1U;
 8000606:	4425      	add	r5, r4
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8000608:	4421      	add	r1, r4
    ep->is_in = 1U;
 800060a:	f885 6029 	strb.w	r6, [r5, #41]	; 0x29
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
    ep->is_in = 0U;
  }

  ep->num = ep_addr & EP_ADDR_MSK;
  ep->maxpacket = ep_mps;
 800060e:	610a      	str	r2, [r1, #16]
  ep->type = ep_type;

  if (ep->is_in != 0U)
 8000610:	784a      	ldrb	r2, [r1, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8000612:	b2c0      	uxtb	r0, r0
 8000614:	7008      	strb	r0, [r1, #0]
  ep->type = ep_type;
 8000616:	70cb      	strb	r3, [r1, #3]
  if (ep->is_in != 0U)
 8000618:	b102      	cbz	r2, 800061c <HAL_PCD_EP_Open+0x2e>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800061a:	81c8      	strh	r0, [r1, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800061c:	2b02      	cmp	r3, #2
  {
    ep->data_pid_start = 0U;
 800061e:	bf04      	itt	eq
 8000620:	2300      	moveq	r3, #0
 8000622:	710b      	strbeq	r3, [r1, #4]
  }

  __HAL_LOCK(hpcd);
 8000624:	f894 3228 	ldrb.w	r3, [r4, #552]	; 0x228
 8000628:	2b01      	cmp	r3, #1
 800062a:	d011      	beq.n	8000650 <HAL_PCD_EP_Open+0x62>
 800062c:	2301      	movs	r3, #1
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800062e:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 8000630:	f884 3228 	strb.w	r3, [r4, #552]	; 0x228
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8000634:	f000 fe38 	bl	80012a8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8000638:	2000      	movs	r0, #0
 800063a:	f884 0228 	strb.w	r0, [r4, #552]	; 0x228

  return ret;
 800063e:	bd70      	pop	{r4, r5, r6, pc}
    ep->is_in = 0U;
 8000640:	2600      	movs	r6, #0
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8000642:	f505 7194 	add.w	r1, r5, #296	; 0x128
    ep->is_in = 0U;
 8000646:	4425      	add	r5, r4
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8000648:	4421      	add	r1, r4
    ep->is_in = 0U;
 800064a:	f885 6129 	strb.w	r6, [r5, #297]	; 0x129
 800064e:	e7de      	b.n	800060e <HAL_PCD_EP_Open+0x20>
  __HAL_LOCK(hpcd);
 8000650:	2002      	movs	r0, #2
}
 8000652:	bd70      	pop	{r4, r5, r6, pc}

08000654 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8000654:	f001 0307 	and.w	r3, r1, #7
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8000658:	f011 0f80 	tst.w	r1, #128	; 0x80
{
 800065c:	b510      	push	{r4, lr}
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800065e:	ea4f 1243 	mov.w	r2, r3, lsl #5
{
 8000662:	4604      	mov	r4, r0
  if ((ep_addr & 0x80U) == 0x80U)
 8000664:	d015      	beq.n	8000692 <HAL_PCD_EP_Close+0x3e>
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8000666:	f102 0128 	add.w	r1, r2, #40	; 0x28
 800066a:	4401      	add	r1, r0
    ep->is_in = 1U;
 800066c:	4402      	add	r2, r0
 800066e:	2001      	movs	r0, #1
 8000670:	f882 0029 	strb.w	r0, [r2, #41]	; 0x29
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
    ep->is_in = 0U;
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8000674:	700b      	strb	r3, [r1, #0]

  __HAL_LOCK(hpcd);
 8000676:	f894 3228 	ldrb.w	r3, [r4, #552]	; 0x228
 800067a:	2b01      	cmp	r3, #1
 800067c:	d011      	beq.n	80006a2 <HAL_PCD_EP_Close+0x4e>
 800067e:	2301      	movs	r3, #1
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8000680:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 8000682:	f884 3228 	strb.w	r3, [r4, #552]	; 0x228
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8000686:	f000 ff87 	bl	8001598 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800068a:	2000      	movs	r0, #0
 800068c:	f884 0228 	strb.w	r0, [r4, #552]	; 0x228
  return HAL_OK;
 8000690:	bd10      	pop	{r4, pc}
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8000692:	f502 7194 	add.w	r1, r2, #296	; 0x128
 8000696:	4401      	add	r1, r0
    ep->is_in = 0U;
 8000698:	4402      	add	r2, r0
 800069a:	2000      	movs	r0, #0
 800069c:	f882 0129 	strb.w	r0, [r2, #297]	; 0x129
 80006a0:	e7e8      	b.n	8000674 <HAL_PCD_EP_Close+0x20>
  __HAL_LOCK(hpcd);
 80006a2:	2002      	movs	r0, #2
}
 80006a4:	bd10      	pop	{r4, pc}

080006a6 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80006a6:	b570      	push	{r4, r5, r6, lr}
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
  ep->xfer_len = len;
  ep->xfer_count = 0U;
 80006a8:	2600      	movs	r6, #0
 80006aa:	f001 0107 	and.w	r1, r1, #7
 80006ae:	014d      	lsls	r5, r1, #5
  ep->xfer_buff = pBuf;
 80006b0:	1944      	adds	r4, r0, r5
  ep->is_in = 0U;
  ep->num = ep_addr & EP_ADDR_MSK;
 80006b2:	f884 1128 	strb.w	r1, [r4, #296]	; 0x128
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80006b6:	f505 7194 	add.w	r1, r5, #296	; 0x128
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80006ba:	4401      	add	r1, r0
  ep->xfer_buff = pBuf;
 80006bc:	f8c4 213c 	str.w	r2, [r4, #316]	; 0x13c
  ep->xfer_len = len;
 80006c0:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
  ep->xfer_count = 0U;
 80006c4:	f8c4 6144 	str.w	r6, [r4, #324]	; 0x144
  ep->is_in = 0U;
 80006c8:	f884 6129 	strb.w	r6, [r4, #297]	; 0x129
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80006cc:	6800      	ldr	r0, [r0, #0]
 80006ce:	f001 f8cd 	bl	800186c <USB_EPStartXfer>
  }

  return HAL_OK;
}
 80006d2:	4630      	mov	r0, r6
 80006d4:	bd70      	pop	{r4, r5, r6, pc}

080006d6 <HAL_PCD_EP_GetRxCount>:
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80006d6:	f001 0107 	and.w	r1, r1, #7
 80006da:	eb00 1141 	add.w	r1, r0, r1, lsl #5
}
 80006de:	f8d1 0144 	ldr.w	r0, [r1, #324]	; 0x144
 80006e2:	4770      	bx	lr

080006e4 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80006e4:	f001 0107 	and.w	r1, r1, #7
 80006e8:	b570      	push	{r4, r5, r6, lr}
 80006ea:	014d      	lsls	r5, r1, #5
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80006ec:	1944      	adds	r4, r0, r5
  ep->xfer_len = len;
 80006ee:	6423      	str	r3, [r4, #64]	; 0x40
  ep->xfer_count = 0U;
 80006f0:	2600      	movs	r6, #0
  ep->is_in = 1U;
 80006f2:	2301      	movs	r3, #1
  ep->num = ep_addr & EP_ADDR_MSK;
 80006f4:	f884 1028 	strb.w	r1, [r4, #40]	; 0x28
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80006f8:	f105 0128 	add.w	r1, r5, #40	; 0x28
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80006fc:	4401      	add	r1, r0
  ep->xfer_buff = pBuf;
 80006fe:	63e2      	str	r2, [r4, #60]	; 0x3c
  ep->xfer_count = 0U;
 8000700:	6466      	str	r6, [r4, #68]	; 0x44
  ep->is_in = 1U;
 8000702:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8000706:	6800      	ldr	r0, [r0, #0]
 8000708:	f001 f8b0 	bl	800186c <USB_EPStartXfer>
  }

  return HAL_OK;
}
 800070c:	4630      	mov	r0, r6
 800070e:	bd70      	pop	{r4, r5, r6, pc}

08000710 <HAL_PCD_IRQHandler>:
{
 8000710:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000714:	4604      	mov	r4, r0
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8000716:	6800      	ldr	r0, [r0, #0]
 8000718:	f001 f892 	bl	8001840 <USB_ReadInterrupts>
 800071c:	0402      	lsls	r2, r0, #16
 800071e:	f100 8210 	bmi.w	8000b42 <HAL_PCD_IRQHandler+0x432>
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8000722:	6820      	ldr	r0, [r4, #0]
 8000724:	f001 f88c 	bl	8001840 <USB_ReadInterrupts>
 8000728:	0543      	lsls	r3, r0, #21
 800072a:	d50f      	bpl.n	800074c <HAL_PCD_IRQHandler+0x3c>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800072c:	6822      	ldr	r2, [r4, #0]
    HAL_PCD_ResetCallback(hpcd);
 800072e:	4620      	mov	r0, r4
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8000730:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8000734:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000738:	041b      	lsls	r3, r3, #16
 800073a:	0c1b      	lsrs	r3, r3, #16
 800073c:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    HAL_PCD_ResetCallback(hpcd);
 8000740:	f002 f885 	bl	800284e <HAL_PCD_ResetCallback>
    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8000744:	2100      	movs	r1, #0
 8000746:	4620      	mov	r0, r4
 8000748:	f7ff ff3d 	bl	80005c6 <HAL_PCD_SetAddress>
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 800074c:	6820      	ldr	r0, [r4, #0]
 800074e:	f001 f877 	bl	8001840 <USB_ReadInterrupts>
 8000752:	0447      	lsls	r7, r0, #17
 8000754:	d508      	bpl.n	8000768 <HAL_PCD_IRQHandler+0x58>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8000756:	6822      	ldr	r2, [r4, #0]
 8000758:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 800075c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000760:	041b      	lsls	r3, r3, #16
 8000762:	0c1b      	lsrs	r3, r3, #16
 8000764:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8000768:	6820      	ldr	r0, [r4, #0]
 800076a:	f001 f869 	bl	8001840 <USB_ReadInterrupts>
 800076e:	0486      	lsls	r6, r0, #18
 8000770:	d508      	bpl.n	8000784 <HAL_PCD_IRQHandler+0x74>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8000772:	6822      	ldr	r2, [r4, #0]
 8000774:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8000778:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800077c:	041b      	lsls	r3, r3, #16
 800077e:	0c1b      	lsrs	r3, r3, #16
 8000780:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8000784:	6820      	ldr	r0, [r4, #0]
 8000786:	f001 f85b 	bl	8001840 <USB_ReadInterrupts>
 800078a:	04c5      	lsls	r5, r0, #19
 800078c:	d51c      	bpl.n	80007c8 <HAL_PCD_IRQHandler+0xb8>
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 800078e:	6822      	ldr	r2, [r4, #0]
    HAL_PCD_ResumeCallback(hpcd);
 8000790:	4620      	mov	r0, r4
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8000792:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 8000796:	f023 0304 	bic.w	r3, r3, #4
 800079a:	041b      	lsls	r3, r3, #16
 800079c:	0c1b      	lsrs	r3, r3, #16
 800079e:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80007a2:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 80007a6:	f023 0308 	bic.w	r3, r3, #8
 80007aa:	041b      	lsls	r3, r3, #16
 80007ac:	0c1b      	lsrs	r3, r3, #16
 80007ae:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    HAL_PCD_ResumeCallback(hpcd);
 80007b2:	f002 f86f 	bl	8002894 <HAL_PCD_ResumeCallback>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80007b6:	6822      	ldr	r2, [r4, #0]
 80007b8:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 80007bc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80007c0:	041b      	lsls	r3, r3, #16
 80007c2:	0c1b      	lsrs	r3, r3, #16
 80007c4:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 80007c8:	6820      	ldr	r0, [r4, #0]
 80007ca:	f001 f839 	bl	8001840 <USB_ReadInterrupts>
 80007ce:	0500      	lsls	r0, r0, #20
 80007d0:	d526      	bpl.n	8000820 <HAL_PCD_IRQHandler+0x110>
    hpcd->Instance->CNTR |= USB_CNTR_FSUSP;
 80007d2:	6820      	ldr	r0, [r4, #0]
 80007d4:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 80007d8:	b29b      	uxth	r3, r3
 80007da:	f043 0308 	orr.w	r3, r3, #8
 80007de:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80007e2:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
 80007e6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80007ea:	041b      	lsls	r3, r3, #16
 80007ec:	0c1b      	lsrs	r3, r3, #16
 80007ee:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
    hpcd->Instance->CNTR |= USB_CNTR_LP_MODE;
 80007f2:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 80007f6:	b29b      	uxth	r3, r3
 80007f8:	f043 0304 	orr.w	r3, r3, #4
 80007fc:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
    if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8000800:	f001 f81e 	bl	8001840 <USB_ReadInterrupts>
 8000804:	04c1      	lsls	r1, r0, #19
 8000806:	d508      	bpl.n	800081a <HAL_PCD_IRQHandler+0x10a>
       __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8000808:	6822      	ldr	r2, [r4, #0]
 800080a:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 800080e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000812:	041b      	lsls	r3, r3, #16
 8000814:	0c1b      	lsrs	r3, r3, #16
 8000816:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    HAL_PCD_SuspendCallback(hpcd);
 800081a:	4620      	mov	r0, r4
 800081c:	f002 f82a 	bl	8002874 <HAL_PCD_SuspendCallback>
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8000820:	6820      	ldr	r0, [r4, #0]
 8000822:	f001 f80d 	bl	8001840 <USB_ReadInterrupts>
 8000826:	0582      	lsls	r2, r0, #22
 8000828:	d50b      	bpl.n	8000842 <HAL_PCD_IRQHandler+0x132>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 800082a:	6822      	ldr	r2, [r4, #0]
    HAL_PCD_SOFCallback(hpcd);
 800082c:	4620      	mov	r0, r4
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 800082e:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8000832:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8000836:	041b      	lsls	r3, r3, #16
 8000838:	0c1b      	lsrs	r3, r3, #16
 800083a:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    HAL_PCD_SOFCallback(hpcd);
 800083e:	f002 f802 	bl	8002846 <HAL_PCD_SOFCallback>
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8000842:	6820      	ldr	r0, [r4, #0]
 8000844:	f000 fffc 	bl	8001840 <USB_ReadInterrupts>
 8000848:	05c3      	lsls	r3, r0, #23
 800084a:	d508      	bpl.n	800085e <HAL_PCD_IRQHandler+0x14e>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 800084c:	6822      	ldr	r2, [r4, #0]
 800084e:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8000852:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000856:	041b      	lsls	r3, r3, #16
 8000858:	0c1b      	lsrs	r3, r3, #16
 800085a:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
 800085e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
  {
    wIstr = hpcd->Instance->ISTR;
 8000862:	f8b0 1044 	ldrh.w	r1, [r0, #68]	; 0x44
 8000866:	b289      	uxth	r1, r1
    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);

    if (epindex == 0U)
 8000868:	f011 060f 	ands.w	r6, r1, #15
 800086c:	f040 80b7 	bne.w	80009de <HAL_PCD_IRQHandler+0x2ce>
      {
        /* DIR = 0 */

        /* DIR = 0      => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always  */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8000870:	8803      	ldrh	r3, [r0, #0]
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8000872:	f011 0110 	ands.w	r1, r1, #16
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8000876:	b29b      	uxth	r3, r3
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8000878:	d12c      	bne.n	80008d4 <HAL_PCD_IRQHandler+0x1c4>
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800087a:	ea03 0309 	and.w	r3, r3, r9
 800087e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000882:	8003      	strh	r3, [r0, #0]
        ep = &hpcd->IN_ep[0];

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8000884:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8000888:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
 800088c:	b29b      	uxth	r3, r3
 800088e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8000892:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8000896:	f8b0 3404 	ldrh.w	r3, [r0, #1028]	; 0x404
        ep->xfer_buff += ep->xfer_count;
 800089a:	6be2      	ldr	r2, [r4, #60]	; 0x3c
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800089c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80008a0:	6463      	str	r3, [r4, #68]	; 0x44
        ep->xfer_buff += ep->xfer_count;
 80008a2:	4413      	add	r3, r2
 80008a4:	63e3      	str	r3, [r4, #60]	; 0x3c

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80008a6:	4620      	mov	r0, r4
 80008a8:	f001 ffc6 	bl	8002838 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80008ac:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 80008b0:	b153      	cbz	r3, 80008c8 <HAL_PCD_IRQHandler+0x1b8>
 80008b2:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80008b4:	b942      	cbnz	r2, 80008c8 <HAL_PCD_IRQHandler+0x1b8>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80008b6:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 80008ba:	6821      	ldr	r1, [r4, #0]
 80008bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008c0:	f8a1 304c 	strh.w	r3, [r1, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 80008c4:	f884 2024 	strb.w	r2, [r4, #36]	; 0x24
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80008c8:	6820      	ldr	r0, [r4, #0]
 80008ca:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
 80008ce:	041b      	lsls	r3, r3, #16
 80008d0:	d4c7      	bmi.n	8000862 <HAL_PCD_IRQHandler+0x152>
 80008d2:	e726      	b.n	8000722 <HAL_PCD_IRQHandler+0x12>
        /* DIR = 1 & CTR_RX       => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80008d4:	f413 6500 	ands.w	r5, r3, #2048	; 0x800
 80008d8:	d021      	beq.n	800091e <HAL_PCD_IRQHandler+0x20e>
        {
          /* Get SETUP Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80008da:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 80008de:	f894 2128 	ldrb.w	r2, [r4, #296]	; 0x128
 80008e2:	b29b      	uxth	r3, r3
 80008e4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80008e8:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 80008ec:	f8b3 340c 	ldrh.w	r3, [r3, #1036]	; 0x40c

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80008f0:	f8b4 212e 	ldrh.w	r2, [r4, #302]	; 0x12e
 80008f4:	f3c3 0309 	ubfx	r3, r3, #0, #10
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80008f8:	f8c4 3144 	str.w	r3, [r4, #324]	; 0x144
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80008fc:	f504 710c 	add.w	r1, r4, #560	; 0x230
 8000900:	f001 f89c 	bl	8001a3c <USB_ReadPMA>
                      ep->pmaadress, (uint16_t)ep->xfer_count);

          /* SETUP bit kept frozen while CTR_RX = 1*/
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8000904:	6822      	ldr	r2, [r4, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8000906:	4620      	mov	r0, r4
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8000908:	8813      	ldrh	r3, [r2, #0]
 800090a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800090e:	051b      	lsls	r3, r3, #20
 8000910:	0d1b      	lsrs	r3, r3, #20
 8000912:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000916:	8013      	strh	r3, [r2, #0]
          HAL_PCD_SetupStageCallback(hpcd);
 8000918:	f001 ff80 	bl	800281c <HAL_PCD_SetupStageCallback>
 800091c:	e7d4      	b.n	80008c8 <HAL_PCD_IRQHandler+0x1b8>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }

        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800091e:	041f      	lsls	r7, r3, #16
 8000920:	d5d2      	bpl.n	80008c8 <HAL_PCD_IRQHandler+0x1b8>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8000922:	8803      	ldrh	r3, [r0, #0]
 8000924:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000928:	051b      	lsls	r3, r3, #20
 800092a:	0d1b      	lsrs	r3, r3, #20
 800092c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000930:	8003      	strh	r3, [r0, #0]

          /* Get Control Data OUT Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8000932:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8000936:	f894 2128 	ldrb.w	r2, [r4, #296]	; 0x128
 800093a:	b29b      	uxth	r3, r3
 800093c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8000940:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8000944:	f8b3 340c 	ldrh.w	r3, [r3, #1036]	; 0x40c
 8000948:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800094c:	f8c4 3144 	str.w	r3, [r4, #324]	; 0x144

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8000950:	b18b      	cbz	r3, 8000976 <HAL_PCD_IRQHandler+0x266>
 8000952:	f8d4 113c 	ldr.w	r1, [r4, #316]	; 0x13c
 8000956:	b171      	cbz	r1, 8000976 <HAL_PCD_IRQHandler+0x266>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8000958:	f8b4 212e 	ldrh.w	r2, [r4, #302]	; 0x12e
 800095c:	f001 f86e 	bl	8001a3c <USB_ReadPMA>
                        ep->pmaadress, (uint16_t)ep->xfer_count);

            ep->xfer_buff += ep->xfer_count;
 8000960:	f8d4 313c 	ldr.w	r3, [r4, #316]	; 0x13c
 8000964:	f8d4 2144 	ldr.w	r2, [r4, #324]	; 0x144

            /* Process Control Data OUT Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8000968:	4629      	mov	r1, r5
            ep->xfer_buff += ep->xfer_count;
 800096a:	4413      	add	r3, r2
 800096c:	f8c4 313c 	str.w	r3, [r4, #316]	; 0x13c
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8000970:	4620      	mov	r0, r4
 8000972:	f001 ff59 	bl	8002828 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8000976:	6821      	ldr	r1, [r4, #0]
 8000978:	f8d4 5138 	ldr.w	r5, [r4, #312]	; 0x138
 800097c:	f8b1 3050 	ldrh.w	r3, [r1, #80]	; 0x50
 8000980:	f201 400c 	addw	r0, r1, #1036	; 0x40c
 8000984:	b29b      	uxth	r3, r3
 8000986:	b9cd      	cbnz	r5, 80009bc <HAL_PCD_IRQHandler+0x2ac>
 8000988:	5ac2      	ldrh	r2, [r0, r3]
 800098a:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 800098e:	0412      	lsls	r2, r2, #16
 8000990:	0c12      	lsrs	r2, r2, #16
 8000992:	52c2      	strh	r2, [r0, r3]
 8000994:	5ac2      	ldrh	r2, [r0, r3]
 8000996:	b292      	uxth	r2, r2
 8000998:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800099c:	52c2      	strh	r2, [r0, r3]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 800099e:	880b      	ldrh	r3, [r1, #0]
 80009a0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80009a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80009a8:	041b      	lsls	r3, r3, #16
 80009aa:	0c1b      	lsrs	r3, r3, #16
 80009ac:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 80009b0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80009b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80009b8:	800b      	strh	r3, [r1, #0]
 80009ba:	e785      	b.n	80008c8 <HAL_PCD_IRQHandler+0x1b8>
          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80009bc:	2d3e      	cmp	r5, #62	; 0x3e
 80009be:	d806      	bhi.n	80009ce <HAL_PCD_IRQHandler+0x2be>
 80009c0:	086a      	lsrs	r2, r5, #1
 80009c2:	07ee      	lsls	r6, r5, #31
 80009c4:	bf48      	it	mi
 80009c6:	3201      	addmi	r2, #1
 80009c8:	0292      	lsls	r2, r2, #10
 80009ca:	b292      	uxth	r2, r2
 80009cc:	e7e6      	b.n	800099c <HAL_PCD_IRQHandler+0x28c>
 80009ce:	096a      	lsrs	r2, r5, #5
 80009d0:	06ed      	lsls	r5, r5, #27
 80009d2:	bf08      	it	eq
 80009d4:	f102 32ff 	addeq.w	r2, r2, #4294967295
 80009d8:	ea4a 2282 	orr.w	r2, sl, r2, lsl #10
 80009dc:	e7f5      	b.n	80009ca <HAL_PCD_IRQHandler+0x2ba>
    else
    {
      /* Decode and service non control endpoints interrupt  */

      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80009de:	f830 8026 	ldrh.w	r8, [r0, r6, lsl #2]
 80009e2:	fa1f f888 	uxth.w	r8, r8
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80009e6:	f418 4f00 	tst.w	r8, #32768	; 0x8000
 80009ea:	d03d      	beq.n	8000a68 <HAL_PCD_IRQHandler+0x358>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80009ec:	f830 3026 	ldrh.w	r3, [r0, r6, lsl #2]
        ep = &hpcd->OUT_ep[epindex];

        /* OUT double Buffering*/
        if (ep->doublebuffer == 0U)
 80009f0:	0177      	lsls	r7, r6, #5
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80009f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80009f6:	051b      	lsls	r3, r3, #20
 80009f8:	0d1b      	lsrs	r3, r3, #20
 80009fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80009fe:	f820 3026 	strh.w	r3, [r0, r6, lsl #2]
        if (ep->doublebuffer == 0U)
 8000a02:	19e1      	adds	r1, r4, r7
 8000a04:	f891 3134 	ldrb.w	r3, [r1, #308]	; 0x134
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	d158      	bne.n	8000abe <HAL_PCD_IRQHandler+0x3ae>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8000a0c:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8000a10:	f891 2128 	ldrb.w	r2, [r1, #296]	; 0x128
 8000a14:	b29b      	uxth	r3, r3
 8000a16:	3306      	adds	r3, #6
 8000a18:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8000a1c:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8000a20:	f8b3 5400 	ldrh.w	r5, [r3, #1024]	; 0x400
 8000a24:	f3c5 0509 	ubfx	r5, r5, #0, #10
          if (count != 0U)
 8000a28:	b135      	cbz	r5, 8000a38 <HAL_PCD_IRQHandler+0x328>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8000a2a:	f8b1 212e 	ldrh.w	r2, [r1, #302]	; 0x12e
 8000a2e:	462b      	mov	r3, r5
 8000a30:	f8d1 113c 	ldr.w	r1, [r1, #316]	; 0x13c
 8000a34:	f001 f802 	bl	8001a3c <USB_ReadPMA>
 8000a38:	19e1      	adds	r1, r4, r7
          }
          /* free EP OUT Buffer */
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
        }
        /*multi-packet on the NON control OUT endpoint*/
        ep->xfer_count += count;
 8000a3a:	f8d1 3144 	ldr.w	r3, [r1, #324]	; 0x144
        ep->xfer_buff += count;
 8000a3e:	f8d1 213c 	ldr.w	r2, [r1, #316]	; 0x13c
        ep->xfer_count += count;
 8000a42:	442b      	add	r3, r5
 8000a44:	f8c1 3144 	str.w	r3, [r1, #324]	; 0x144

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8000a48:	f8d1 3140 	ldr.w	r3, [r1, #320]	; 0x140
        ep->xfer_buff += count;
 8000a4c:	442a      	add	r2, r5
 8000a4e:	f8c1 213c 	str.w	r2, [r1, #316]	; 0x13c
        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8000a52:	b11b      	cbz	r3, 8000a5c <HAL_PCD_IRQHandler+0x34c>
 8000a54:	f8d1 0138 	ldr.w	r0, [r1, #312]	; 0x138
 8000a58:	4285      	cmp	r5, r0
 8000a5a:	d269      	bcs.n	8000b30 <HAL_PCD_IRQHandler+0x420>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8000a5c:	4427      	add	r7, r4
 8000a5e:	f897 1128 	ldrb.w	r1, [r7, #296]	; 0x128
 8000a62:	4620      	mov	r0, r4
 8000a64:	f001 fee0 	bl	8002828 <HAL_PCD_DataOutStageCallback>
          (void)HAL_PCD_EP_Receive(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
        }

      } /* if((wEPVal & EP_CTR_RX) */

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8000a68:	f018 0f80 	tst.w	r8, #128	; 0x80
 8000a6c:	f43f af2c 	beq.w	80008c8 <HAL_PCD_IRQHandler+0x1b8>
      {
        ep = &hpcd->IN_ep[epindex];

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8000a70:	6821      	ldr	r1, [r4, #0]
        {
          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8000a72:	4620      	mov	r0, r4
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8000a74:	f831 2026 	ldrh.w	r2, [r1, r6, lsl #2]
 8000a78:	b292      	uxth	r2, r2
 8000a7a:	ea02 0209 	and.w	r2, r2, r9
 8000a7e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000a82:	f821 2026 	strh.w	r2, [r1, r6, lsl #2]
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8000a86:	f8b1 3050 	ldrh.w	r3, [r1, #80]	; 0x50
 8000a8a:	eb04 1646 	add.w	r6, r4, r6, lsl #5
 8000a8e:	f896 2028 	ldrb.w	r2, [r6, #40]	; 0x28
 8000a92:	b29b      	uxth	r3, r3
 8000a94:	3302      	adds	r3, #2
 8000a96:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8000a9a:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 8000a9e:	f8b3 2400 	ldrh.w	r2, [r3, #1024]	; 0x400
        ep->xfer_buff += ep->xfer_count;
 8000aa2:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8000aa4:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8000aa8:	6472      	str	r2, [r6, #68]	; 0x44
        ep->xfer_buff += ep->xfer_count;
 8000aaa:	441a      	add	r2, r3
        if (ep->xfer_len == 0U)
 8000aac:	6c33      	ldr	r3, [r6, #64]	; 0x40
        ep->xfer_buff += ep->xfer_count;
 8000aae:	63f2      	str	r2, [r6, #60]	; 0x3c
 8000ab0:	f896 1028 	ldrb.w	r1, [r6, #40]	; 0x28
        if (ep->xfer_len == 0U)
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	d141      	bne.n	8000b3c <HAL_PCD_IRQHandler+0x42c>
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8000ab8:	f001 febe 	bl	8002838 <HAL_PCD_DataInStageCallback>
 8000abc:	e704      	b.n	80008c8 <HAL_PCD_IRQHandler+0x1b8>
          if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8000abe:	f891 3128 	ldrb.w	r3, [r1, #296]	; 0x128
 8000ac2:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8000ac6:	00db      	lsls	r3, r3, #3
 8000ac8:	f412 4f80 	tst.w	r2, #16384	; 0x4000
            count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8000acc:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8000ad0:	b292      	uxth	r2, r2
          if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8000ad2:	d01f      	beq.n	8000b14 <HAL_PCD_IRQHandler+0x404>
            count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8000ad4:	3202      	adds	r2, #2
 8000ad6:	4413      	add	r3, r2
 8000ad8:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8000adc:	f8b3 5400 	ldrh.w	r5, [r3, #1024]	; 0x400
 8000ae0:	f3c5 0509 	ubfx	r5, r5, #0, #10
            if (count != 0U)
 8000ae4:	b135      	cbz	r5, 8000af4 <HAL_PCD_IRQHandler+0x3e4>
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8000ae6:	462b      	mov	r3, r5
 8000ae8:	f8b1 2130 	ldrh.w	r2, [r1, #304]	; 0x130
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8000aec:	f8d1 113c 	ldr.w	r1, [r1, #316]	; 0x13c
 8000af0:	f000 ffa4 	bl	8001a3c <USB_ReadPMA>
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8000af4:	19e3      	adds	r3, r4, r7
 8000af6:	f893 1128 	ldrb.w	r1, [r3, #296]	; 0x128
 8000afa:	6822      	ldr	r2, [r4, #0]
 8000afc:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 8000b00:	b29b      	uxth	r3, r3
 8000b02:	ea03 030b 	and.w	r3, r3, fp
 8000b06:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000b0a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8000b0e:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
 8000b12:	e791      	b.n	8000a38 <HAL_PCD_IRQHandler+0x328>
            count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8000b14:	3206      	adds	r2, #6
 8000b16:	4413      	add	r3, r2
 8000b18:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8000b1c:	f8b3 5400 	ldrh.w	r5, [r3, #1024]	; 0x400
 8000b20:	f3c5 0509 	ubfx	r5, r5, #0, #10
            if (count != 0U)
 8000b24:	2d00      	cmp	r5, #0
 8000b26:	d0e5      	beq.n	8000af4 <HAL_PCD_IRQHandler+0x3e4>
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8000b28:	462b      	mov	r3, r5
 8000b2a:	f8b1 2132 	ldrh.w	r2, [r1, #306]	; 0x132
 8000b2e:	e7dd      	b.n	8000aec <HAL_PCD_IRQHandler+0x3dc>
          (void)HAL_PCD_EP_Receive(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 8000b30:	f891 1128 	ldrb.w	r1, [r1, #296]	; 0x128
 8000b34:	4620      	mov	r0, r4
 8000b36:	f7ff fdb6 	bl	80006a6 <HAL_PCD_EP_Receive>
 8000b3a:	e795      	b.n	8000a68 <HAL_PCD_IRQHandler+0x358>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)HAL_PCD_EP_Transmit(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 8000b3c:	f7ff fdd2 	bl	80006e4 <HAL_PCD_EP_Transmit>
 8000b40:	e6c2      	b.n	80008c8 <HAL_PCD_IRQHandler+0x1b8>
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8000b42:	f8df 900c 	ldr.w	r9, [pc, #12]	; 8000b50 <HAL_PCD_IRQHandler+0x440>
 8000b46:	f8df a00c 	ldr.w	sl, [pc, #12]	; 8000b54 <HAL_PCD_IRQHandler+0x444>
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8000b4a:	f8df b00c 	ldr.w	fp, [pc, #12]	; 8000b58 <HAL_PCD_IRQHandler+0x448>
 8000b4e:	e6bb      	b.n	80008c8 <HAL_PCD_IRQHandler+0x1b8>
 8000b50:	ffff8f0f 	.word	0xffff8f0f
 8000b54:	ffff8000 	.word	0xffff8000
 8000b58:	ffff8f8f 	.word	0xffff8f8f

08000b5c <HAL_PCD_EP_SetStall>:
{
 8000b5c:	b538      	push	{r3, r4, r5, lr}
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8000b5e:	6843      	ldr	r3, [r0, #4]
 8000b60:	f001 0507 	and.w	r5, r1, #7
 8000b64:	429d      	cmp	r5, r3
{
 8000b66:	4604      	mov	r4, r0
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8000b68:	d828      	bhi.n	8000bbc <HAL_PCD_EP_SetStall+0x60>
  if ((0x80U & ep_addr) == 0x80U)
 8000b6a:	060b      	lsls	r3, r1, #24
 8000b6c:	d51d      	bpl.n	8000baa <HAL_PCD_EP_SetStall+0x4e>
    ep->is_in = 1U;
 8000b6e:	2201      	movs	r2, #1
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8000b70:	016b      	lsls	r3, r5, #5
 8000b72:	f103 0128 	add.w	r1, r3, #40	; 0x28
    ep->is_in = 1U;
 8000b76:	4403      	add	r3, r0
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8000b78:	4401      	add	r1, r0
    ep->is_in = 1U;
 8000b7a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  ep->is_stall = 1U;
 8000b7e:	2301      	movs	r3, #1
  ep->num = ep_addr & EP_ADDR_MSK;
 8000b80:	700d      	strb	r5, [r1, #0]
  ep->is_stall = 1U;
 8000b82:	708b      	strb	r3, [r1, #2]
  __HAL_LOCK(hpcd);
 8000b84:	f894 2228 	ldrb.w	r2, [r4, #552]	; 0x228
 8000b88:	429a      	cmp	r2, r3
 8000b8a:	d019      	beq.n	8000bc0 <HAL_PCD_EP_SetStall+0x64>
 8000b8c:	f884 3228 	strb.w	r3, [r4, #552]	; 0x228
  (void)USB_EPSetStall(hpcd->Instance, ep);
 8000b90:	6820      	ldr	r0, [r4, #0]
 8000b92:	f000 fde0 	bl	8001756 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8000b96:	b925      	cbnz	r5, 8000ba2 <HAL_PCD_EP_SetStall+0x46>
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8000b98:	f504 710c 	add.w	r1, r4, #560	; 0x230
 8000b9c:	6820      	ldr	r0, [r4, #0]
 8000b9e:	f000 fe53 	bl	8001848 <USB_EP0_OutStart>
  __HAL_UNLOCK(hpcd);
 8000ba2:	2000      	movs	r0, #0
 8000ba4:	f884 0228 	strb.w	r0, [r4, #552]	; 0x228
  return HAL_OK;
 8000ba8:	bd38      	pop	{r3, r4, r5, pc}
    ep->is_in = 0U;
 8000baa:	2200      	movs	r2, #0
    ep = &hpcd->OUT_ep[ep_addr];
 8000bac:	014b      	lsls	r3, r1, #5
 8000bae:	f503 7194 	add.w	r1, r3, #296	; 0x128
    ep->is_in = 0U;
 8000bb2:	4403      	add	r3, r0
    ep = &hpcd->OUT_ep[ep_addr];
 8000bb4:	4401      	add	r1, r0
    ep->is_in = 0U;
 8000bb6:	f883 2129 	strb.w	r2, [r3, #297]	; 0x129
 8000bba:	e7e0      	b.n	8000b7e <HAL_PCD_EP_SetStall+0x22>
    return HAL_ERROR;
 8000bbc:	2001      	movs	r0, #1
 8000bbe:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hpcd);
 8000bc0:	2002      	movs	r0, #2
}
 8000bc2:	bd38      	pop	{r3, r4, r5, pc}

08000bc4 <HAL_PCD_EP_ClrStall>:
{
 8000bc4:	b538      	push	{r3, r4, r5, lr}
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8000bc6:	6843      	ldr	r3, [r0, #4]
 8000bc8:	f001 020f 	and.w	r2, r1, #15
 8000bcc:	429a      	cmp	r2, r3
{
 8000bce:	4604      	mov	r4, r0
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8000bd0:	d826      	bhi.n	8000c20 <HAL_PCD_EP_ClrStall+0x5c>
 8000bd2:	f001 0307 	and.w	r3, r1, #7
  if ((0x80U & ep_addr) == 0x80U)
 8000bd6:	f011 0f80 	tst.w	r1, #128	; 0x80
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8000bda:	ea4f 1243 	mov.w	r2, r3, lsl #5
  if ((0x80U & ep_addr) == 0x80U)
 8000bde:	d017      	beq.n	8000c10 <HAL_PCD_EP_ClrStall+0x4c>
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8000be0:	f102 0128 	add.w	r1, r2, #40	; 0x28
 8000be4:	4401      	add	r1, r0
    ep->is_in = 1U;
 8000be6:	4402      	add	r2, r0
 8000be8:	2001      	movs	r0, #1
 8000bea:	f882 0029 	strb.w	r0, [r2, #41]	; 0x29
  ep->is_stall = 0U;
 8000bee:	2500      	movs	r5, #0
  ep->num = ep_addr & EP_ADDR_MSK;
 8000bf0:	700b      	strb	r3, [r1, #0]
  ep->is_stall = 0U;
 8000bf2:	708d      	strb	r5, [r1, #2]
  __HAL_LOCK(hpcd);
 8000bf4:	f894 3228 	ldrb.w	r3, [r4, #552]	; 0x228
 8000bf8:	2b01      	cmp	r3, #1
 8000bfa:	d013      	beq.n	8000c24 <HAL_PCD_EP_ClrStall+0x60>
 8000bfc:	2301      	movs	r3, #1
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8000bfe:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 8000c00:	f884 3228 	strb.w	r3, [r4, #552]	; 0x228
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8000c04:	f000 fdc7 	bl	8001796 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8000c08:	f884 5228 	strb.w	r5, [r4, #552]	; 0x228
  return HAL_OK;
 8000c0c:	4628      	mov	r0, r5
 8000c0e:	bd38      	pop	{r3, r4, r5, pc}
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8000c10:	f502 7194 	add.w	r1, r2, #296	; 0x128
 8000c14:	4401      	add	r1, r0
    ep->is_in = 0U;
 8000c16:	4402      	add	r2, r0
 8000c18:	2000      	movs	r0, #0
 8000c1a:	f882 0129 	strb.w	r0, [r2, #297]	; 0x129
 8000c1e:	e7e6      	b.n	8000bee <HAL_PCD_EP_ClrStall+0x2a>
    return HAL_ERROR;
 8000c20:	2001      	movs	r0, #1
 8000c22:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hpcd);
 8000c24:	2002      	movs	r0, #2
}
 8000c26:	bd38      	pop	{r3, r4, r5, pc}

08000c28 <HAL_PCDEx_PMAConfig>:
                                       uint32_t pmaadress)
{
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8000c28:	f011 0f80 	tst.w	r1, #128	; 0x80
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8000c2c:	bf1b      	ittet	ne
 8000c2e:	f001 0107 	andne.w	r1, r1, #7
 8000c32:	eb00 1041 	addne.w	r0, r0, r1, lsl #5
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8000c36:	eb00 1041 	addeq.w	r0, r0, r1, lsl #5
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8000c3a:	3028      	addne	r0, #40	; 0x28
    ep = &hpcd->OUT_ep[ep_addr];
 8000c3c:	bf08      	it	eq
 8000c3e:	f500 7094 	addeq.w	r0, r0, #296	; 0x128
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8000c42:	b91a      	cbnz	r2, 8000c4c <HAL_PCDEx_PMAConfig+0x24>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8000c44:	7302      	strb	r2, [r0, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8000c46:	80c3      	strh	r3, [r0, #6]
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
  }

  return HAL_OK;
}
 8000c48:	2000      	movs	r0, #0
 8000c4a:	4770      	bx	lr
    ep->doublebuffer = 1U;
 8000c4c:	2201      	movs	r2, #1
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8000c4e:	8103      	strh	r3, [r0, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8000c50:	0c1b      	lsrs	r3, r3, #16
    ep->doublebuffer = 1U;
 8000c52:	7302      	strb	r2, [r0, #12]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8000c54:	8143      	strh	r3, [r0, #10]
 8000c56:	e7f7      	b.n	8000c48 <HAL_PCDEx_PMAConfig+0x20>

08000c58 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000c58:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000c5c:	4605      	mov	r5, r0
 8000c5e:	b908      	cbnz	r0, 8000c64 <HAL_RCC_OscConfig+0xc>
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
      {
        return HAL_ERROR;
 8000c60:	2001      	movs	r0, #1
 8000c62:	e03c      	b.n	8000cde <HAL_RCC_OscConfig+0x86>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000c64:	6803      	ldr	r3, [r0, #0]
 8000c66:	07db      	lsls	r3, r3, #31
 8000c68:	d410      	bmi.n	8000c8c <HAL_RCC_OscConfig+0x34>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000c6a:	682b      	ldr	r3, [r5, #0]
 8000c6c:	079f      	lsls	r7, r3, #30
 8000c6e:	d45d      	bmi.n	8000d2c <HAL_RCC_OscConfig+0xd4>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000c70:	682b      	ldr	r3, [r5, #0]
 8000c72:	0719      	lsls	r1, r3, #28
 8000c74:	f100 8094 	bmi.w	8000da0 <HAL_RCC_OscConfig+0x148>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000c78:	682b      	ldr	r3, [r5, #0]
 8000c7a:	075a      	lsls	r2, r3, #29
 8000c7c:	f100 80be 	bmi.w	8000dfc <HAL_RCC_OscConfig+0x1a4>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000c80:	69e8      	ldr	r0, [r5, #28]
 8000c82:	2800      	cmp	r0, #0
 8000c84:	f040 812c 	bne.w	8000ee0 <HAL_RCC_OscConfig+0x288>
        }
      }
    }
  }

  return HAL_OK;
 8000c88:	2000      	movs	r0, #0
 8000c8a:	e028      	b.n	8000cde <HAL_RCC_OscConfig+0x86>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000c8c:	4c8f      	ldr	r4, [pc, #572]	; (8000ecc <HAL_RCC_OscConfig+0x274>)
 8000c8e:	6863      	ldr	r3, [r4, #4]
 8000c90:	f003 030c 	and.w	r3, r3, #12
 8000c94:	2b04      	cmp	r3, #4
 8000c96:	d007      	beq.n	8000ca8 <HAL_RCC_OscConfig+0x50>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000c98:	6863      	ldr	r3, [r4, #4]
 8000c9a:	f003 030c 	and.w	r3, r3, #12
 8000c9e:	2b08      	cmp	r3, #8
 8000ca0:	d109      	bne.n	8000cb6 <HAL_RCC_OscConfig+0x5e>
 8000ca2:	6863      	ldr	r3, [r4, #4]
 8000ca4:	03de      	lsls	r6, r3, #15
 8000ca6:	d506      	bpl.n	8000cb6 <HAL_RCC_OscConfig+0x5e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000ca8:	6823      	ldr	r3, [r4, #0]
 8000caa:	039c      	lsls	r4, r3, #14
 8000cac:	d5dd      	bpl.n	8000c6a <HAL_RCC_OscConfig+0x12>
 8000cae:	686b      	ldr	r3, [r5, #4]
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d1da      	bne.n	8000c6a <HAL_RCC_OscConfig+0x12>
 8000cb4:	e7d4      	b.n	8000c60 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000cb6:	686b      	ldr	r3, [r5, #4]
 8000cb8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000cbc:	d112      	bne.n	8000ce4 <HAL_RCC_OscConfig+0x8c>
 8000cbe:	6823      	ldr	r3, [r4, #0]
 8000cc0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000cc4:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000cc6:	f7ff fa83 	bl	80001d0 <HAL_GetTick>
 8000cca:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000ccc:	6823      	ldr	r3, [r4, #0]
 8000cce:	0398      	lsls	r0, r3, #14
 8000cd0:	d4cb      	bmi.n	8000c6a <HAL_RCC_OscConfig+0x12>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000cd2:	f7ff fa7d 	bl	80001d0 <HAL_GetTick>
 8000cd6:	1b80      	subs	r0, r0, r6
 8000cd8:	2864      	cmp	r0, #100	; 0x64
 8000cda:	d9f7      	bls.n	8000ccc <HAL_RCC_OscConfig+0x74>
            return HAL_TIMEOUT;
 8000cdc:	2003      	movs	r0, #3
}
 8000cde:	b002      	add	sp, #8
 8000ce0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000ce4:	b99b      	cbnz	r3, 8000d0e <HAL_RCC_OscConfig+0xb6>
 8000ce6:	6823      	ldr	r3, [r4, #0]
 8000ce8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000cec:	6023      	str	r3, [r4, #0]
 8000cee:	6823      	ldr	r3, [r4, #0]
 8000cf0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000cf4:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000cf6:	f7ff fa6b 	bl	80001d0 <HAL_GetTick>
 8000cfa:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000cfc:	6823      	ldr	r3, [r4, #0]
 8000cfe:	0399      	lsls	r1, r3, #14
 8000d00:	d5b3      	bpl.n	8000c6a <HAL_RCC_OscConfig+0x12>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000d02:	f7ff fa65 	bl	80001d0 <HAL_GetTick>
 8000d06:	1b80      	subs	r0, r0, r6
 8000d08:	2864      	cmp	r0, #100	; 0x64
 8000d0a:	d9f7      	bls.n	8000cfc <HAL_RCC_OscConfig+0xa4>
 8000d0c:	e7e6      	b.n	8000cdc <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000d0e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000d12:	6823      	ldr	r3, [r4, #0]
 8000d14:	d103      	bne.n	8000d1e <HAL_RCC_OscConfig+0xc6>
 8000d16:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000d1a:	6023      	str	r3, [r4, #0]
 8000d1c:	e7cf      	b.n	8000cbe <HAL_RCC_OscConfig+0x66>
 8000d1e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000d22:	6023      	str	r3, [r4, #0]
 8000d24:	6823      	ldr	r3, [r4, #0]
 8000d26:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000d2a:	e7cb      	b.n	8000cc4 <HAL_RCC_OscConfig+0x6c>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000d2c:	4c67      	ldr	r4, [pc, #412]	; (8000ecc <HAL_RCC_OscConfig+0x274>)
 8000d2e:	6863      	ldr	r3, [r4, #4]
 8000d30:	f013 0f0c 	tst.w	r3, #12
 8000d34:	d007      	beq.n	8000d46 <HAL_RCC_OscConfig+0xee>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000d36:	6863      	ldr	r3, [r4, #4]
 8000d38:	f003 030c 	and.w	r3, r3, #12
 8000d3c:	2b08      	cmp	r3, #8
 8000d3e:	d110      	bne.n	8000d62 <HAL_RCC_OscConfig+0x10a>
 8000d40:	6863      	ldr	r3, [r4, #4]
 8000d42:	03da      	lsls	r2, r3, #15
 8000d44:	d40d      	bmi.n	8000d62 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000d46:	6823      	ldr	r3, [r4, #0]
 8000d48:	079b      	lsls	r3, r3, #30
 8000d4a:	d502      	bpl.n	8000d52 <HAL_RCC_OscConfig+0xfa>
 8000d4c:	692b      	ldr	r3, [r5, #16]
 8000d4e:	2b01      	cmp	r3, #1
 8000d50:	d186      	bne.n	8000c60 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000d52:	6823      	ldr	r3, [r4, #0]
 8000d54:	696a      	ldr	r2, [r5, #20]
 8000d56:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8000d5a:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8000d5e:	6023      	str	r3, [r4, #0]
 8000d60:	e786      	b.n	8000c70 <HAL_RCC_OscConfig+0x18>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000d62:	692a      	ldr	r2, [r5, #16]
 8000d64:	4b5a      	ldr	r3, [pc, #360]	; (8000ed0 <HAL_RCC_OscConfig+0x278>)
 8000d66:	b16a      	cbz	r2, 8000d84 <HAL_RCC_OscConfig+0x12c>
        __HAL_RCC_HSI_ENABLE();
 8000d68:	2201      	movs	r2, #1
 8000d6a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000d6c:	f7ff fa30 	bl	80001d0 <HAL_GetTick>
 8000d70:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d72:	6823      	ldr	r3, [r4, #0]
 8000d74:	079f      	lsls	r7, r3, #30
 8000d76:	d4ec      	bmi.n	8000d52 <HAL_RCC_OscConfig+0xfa>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000d78:	f7ff fa2a 	bl	80001d0 <HAL_GetTick>
 8000d7c:	1b80      	subs	r0, r0, r6
 8000d7e:	2802      	cmp	r0, #2
 8000d80:	d9f7      	bls.n	8000d72 <HAL_RCC_OscConfig+0x11a>
 8000d82:	e7ab      	b.n	8000cdc <HAL_RCC_OscConfig+0x84>
        __HAL_RCC_HSI_DISABLE();
 8000d84:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000d86:	f7ff fa23 	bl	80001d0 <HAL_GetTick>
 8000d8a:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000d8c:	6823      	ldr	r3, [r4, #0]
 8000d8e:	0798      	lsls	r0, r3, #30
 8000d90:	f57f af6e 	bpl.w	8000c70 <HAL_RCC_OscConfig+0x18>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000d94:	f7ff fa1c 	bl	80001d0 <HAL_GetTick>
 8000d98:	1b80      	subs	r0, r0, r6
 8000d9a:	2802      	cmp	r0, #2
 8000d9c:	d9f6      	bls.n	8000d8c <HAL_RCC_OscConfig+0x134>
 8000d9e:	e79d      	b.n	8000cdc <HAL_RCC_OscConfig+0x84>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000da0:	69aa      	ldr	r2, [r5, #24]
 8000da2:	4c4a      	ldr	r4, [pc, #296]	; (8000ecc <HAL_RCC_OscConfig+0x274>)
 8000da4:	4b4b      	ldr	r3, [pc, #300]	; (8000ed4 <HAL_RCC_OscConfig+0x27c>)
 8000da6:	b1da      	cbz	r2, 8000de0 <HAL_RCC_OscConfig+0x188>
      __HAL_RCC_LSI_ENABLE();
 8000da8:	2201      	movs	r2, #1
 8000daa:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000dac:	f7ff fa10 	bl	80001d0 <HAL_GetTick>
 8000db0:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000db2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000db4:	079b      	lsls	r3, r3, #30
 8000db6:	d50d      	bpl.n	8000dd4 <HAL_RCC_OscConfig+0x17c>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8000db8:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8000dbc:	4b46      	ldr	r3, [pc, #280]	; (8000ed8 <HAL_RCC_OscConfig+0x280>)
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	fbb3 f3f2 	udiv	r3, r3, r2
 8000dc4:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 8000dc6:	bf00      	nop
  }
  while (Delay --);
 8000dc8:	9b01      	ldr	r3, [sp, #4]
 8000dca:	1e5a      	subs	r2, r3, #1
 8000dcc:	9201      	str	r2, [sp, #4]
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d1f9      	bne.n	8000dc6 <HAL_RCC_OscConfig+0x16e>
 8000dd2:	e751      	b.n	8000c78 <HAL_RCC_OscConfig+0x20>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000dd4:	f7ff f9fc 	bl	80001d0 <HAL_GetTick>
 8000dd8:	1b80      	subs	r0, r0, r6
 8000dda:	2802      	cmp	r0, #2
 8000ddc:	d9e9      	bls.n	8000db2 <HAL_RCC_OscConfig+0x15a>
 8000dde:	e77d      	b.n	8000cdc <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_LSI_DISABLE();
 8000de0:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000de2:	f7ff f9f5 	bl	80001d0 <HAL_GetTick>
 8000de6:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000de8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000dea:	079f      	lsls	r7, r3, #30
 8000dec:	f57f af44 	bpl.w	8000c78 <HAL_RCC_OscConfig+0x20>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000df0:	f7ff f9ee 	bl	80001d0 <HAL_GetTick>
 8000df4:	1b80      	subs	r0, r0, r6
 8000df6:	2802      	cmp	r0, #2
 8000df8:	d9f6      	bls.n	8000de8 <HAL_RCC_OscConfig+0x190>
 8000dfa:	e76f      	b.n	8000cdc <HAL_RCC_OscConfig+0x84>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000dfc:	4c33      	ldr	r4, [pc, #204]	; (8000ecc <HAL_RCC_OscConfig+0x274>)
 8000dfe:	69e3      	ldr	r3, [r4, #28]
 8000e00:	00d8      	lsls	r0, r3, #3
 8000e02:	d424      	bmi.n	8000e4e <HAL_RCC_OscConfig+0x1f6>
      pwrclkchanged = SET;
 8000e04:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8000e06:	69e3      	ldr	r3, [r4, #28]
 8000e08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e0c:	61e3      	str	r3, [r4, #28]
 8000e0e:	69e3      	ldr	r3, [r4, #28]
 8000e10:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e14:	9300      	str	r3, [sp, #0]
 8000e16:	9b00      	ldr	r3, [sp, #0]
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e18:	4e30      	ldr	r6, [pc, #192]	; (8000edc <HAL_RCC_OscConfig+0x284>)
 8000e1a:	6833      	ldr	r3, [r6, #0]
 8000e1c:	05d9      	lsls	r1, r3, #23
 8000e1e:	d518      	bpl.n	8000e52 <HAL_RCC_OscConfig+0x1fa>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000e20:	68eb      	ldr	r3, [r5, #12]
 8000e22:	2b01      	cmp	r3, #1
 8000e24:	d126      	bne.n	8000e74 <HAL_RCC_OscConfig+0x21c>
 8000e26:	6a23      	ldr	r3, [r4, #32]
 8000e28:	f043 0301 	orr.w	r3, r3, #1
 8000e2c:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8000e2e:	f7ff f9cf 	bl	80001d0 <HAL_GetTick>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000e32:	f241 3688 	movw	r6, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8000e36:	4680      	mov	r8, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000e38:	6a23      	ldr	r3, [r4, #32]
 8000e3a:	079b      	lsls	r3, r3, #30
 8000e3c:	d53f      	bpl.n	8000ebe <HAL_RCC_OscConfig+0x266>
    if (pwrclkchanged == SET)
 8000e3e:	2f00      	cmp	r7, #0
 8000e40:	f43f af1e 	beq.w	8000c80 <HAL_RCC_OscConfig+0x28>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000e44:	69e3      	ldr	r3, [r4, #28]
 8000e46:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000e4a:	61e3      	str	r3, [r4, #28]
 8000e4c:	e718      	b.n	8000c80 <HAL_RCC_OscConfig+0x28>
    FlagStatus       pwrclkchanged = RESET;
 8000e4e:	2700      	movs	r7, #0
 8000e50:	e7e2      	b.n	8000e18 <HAL_RCC_OscConfig+0x1c0>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000e52:	6833      	ldr	r3, [r6, #0]
 8000e54:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e58:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8000e5a:	f7ff f9b9 	bl	80001d0 <HAL_GetTick>
 8000e5e:	4680      	mov	r8, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e60:	6833      	ldr	r3, [r6, #0]
 8000e62:	05da      	lsls	r2, r3, #23
 8000e64:	d4dc      	bmi.n	8000e20 <HAL_RCC_OscConfig+0x1c8>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000e66:	f7ff f9b3 	bl	80001d0 <HAL_GetTick>
 8000e6a:	eba0 0008 	sub.w	r0, r0, r8
 8000e6e:	2864      	cmp	r0, #100	; 0x64
 8000e70:	d9f6      	bls.n	8000e60 <HAL_RCC_OscConfig+0x208>
 8000e72:	e733      	b.n	8000cdc <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000e74:	b9ab      	cbnz	r3, 8000ea2 <HAL_RCC_OscConfig+0x24a>
 8000e76:	6a23      	ldr	r3, [r4, #32]
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000e78:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000e7c:	f023 0301 	bic.w	r3, r3, #1
 8000e80:	6223      	str	r3, [r4, #32]
 8000e82:	6a23      	ldr	r3, [r4, #32]
 8000e84:	f023 0304 	bic.w	r3, r3, #4
 8000e88:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8000e8a:	f7ff f9a1 	bl	80001d0 <HAL_GetTick>
 8000e8e:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000e90:	6a23      	ldr	r3, [r4, #32]
 8000e92:	0798      	lsls	r0, r3, #30
 8000e94:	d5d3      	bpl.n	8000e3e <HAL_RCC_OscConfig+0x1e6>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000e96:	f7ff f99b 	bl	80001d0 <HAL_GetTick>
 8000e9a:	1b80      	subs	r0, r0, r6
 8000e9c:	4540      	cmp	r0, r8
 8000e9e:	d9f7      	bls.n	8000e90 <HAL_RCC_OscConfig+0x238>
 8000ea0:	e71c      	b.n	8000cdc <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000ea2:	2b05      	cmp	r3, #5
 8000ea4:	6a23      	ldr	r3, [r4, #32]
 8000ea6:	d103      	bne.n	8000eb0 <HAL_RCC_OscConfig+0x258>
 8000ea8:	f043 0304 	orr.w	r3, r3, #4
 8000eac:	6223      	str	r3, [r4, #32]
 8000eae:	e7ba      	b.n	8000e26 <HAL_RCC_OscConfig+0x1ce>
 8000eb0:	f023 0301 	bic.w	r3, r3, #1
 8000eb4:	6223      	str	r3, [r4, #32]
 8000eb6:	6a23      	ldr	r3, [r4, #32]
 8000eb8:	f023 0304 	bic.w	r3, r3, #4
 8000ebc:	e7b6      	b.n	8000e2c <HAL_RCC_OscConfig+0x1d4>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000ebe:	f7ff f987 	bl	80001d0 <HAL_GetTick>
 8000ec2:	eba0 0008 	sub.w	r0, r0, r8
 8000ec6:	42b0      	cmp	r0, r6
 8000ec8:	d9b6      	bls.n	8000e38 <HAL_RCC_OscConfig+0x1e0>
 8000eca:	e707      	b.n	8000cdc <HAL_RCC_OscConfig+0x84>
 8000ecc:	40021000 	.word	0x40021000
 8000ed0:	42420000 	.word	0x42420000
 8000ed4:	42420480 	.word	0x42420480
 8000ed8:	20000118 	.word	0x20000118
 8000edc:	40007000 	.word	0x40007000
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000ee0:	4b2a      	ldr	r3, [pc, #168]	; (8000f8c <HAL_RCC_OscConfig+0x334>)
 8000ee2:	685a      	ldr	r2, [r3, #4]
 8000ee4:	461c      	mov	r4, r3
 8000ee6:	f002 020c 	and.w	r2, r2, #12
 8000eea:	2a08      	cmp	r2, #8
 8000eec:	d03d      	beq.n	8000f6a <HAL_RCC_OscConfig+0x312>
 8000eee:	2300      	movs	r3, #0
 8000ef0:	4e27      	ldr	r6, [pc, #156]	; (8000f90 <HAL_RCC_OscConfig+0x338>)
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000ef2:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8000ef4:	6033      	str	r3, [r6, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000ef6:	d12b      	bne.n	8000f50 <HAL_RCC_OscConfig+0x2f8>
        tickstart = HAL_GetTick();
 8000ef8:	f7ff f96a 	bl	80001d0 <HAL_GetTick>
 8000efc:	4607      	mov	r7, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000efe:	6823      	ldr	r3, [r4, #0]
 8000f00:	0199      	lsls	r1, r3, #6
 8000f02:	d41f      	bmi.n	8000f44 <HAL_RCC_OscConfig+0x2ec>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8000f04:	6a2b      	ldr	r3, [r5, #32]
 8000f06:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f0a:	d105      	bne.n	8000f18 <HAL_RCC_OscConfig+0x2c0>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000f0c:	6862      	ldr	r2, [r4, #4]
 8000f0e:	68a9      	ldr	r1, [r5, #8]
 8000f10:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8000f14:	430a      	orrs	r2, r1
 8000f16:	6062      	str	r2, [r4, #4]
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000f18:	6a69      	ldr	r1, [r5, #36]	; 0x24
 8000f1a:	6862      	ldr	r2, [r4, #4]
 8000f1c:	430b      	orrs	r3, r1
 8000f1e:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 8000f22:	4313      	orrs	r3, r2
 8000f24:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 8000f26:	2301      	movs	r3, #1
 8000f28:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8000f2a:	f7ff f951 	bl	80001d0 <HAL_GetTick>
 8000f2e:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000f30:	6823      	ldr	r3, [r4, #0]
 8000f32:	019a      	lsls	r2, r3, #6
 8000f34:	f53f aea8 	bmi.w	8000c88 <HAL_RCC_OscConfig+0x30>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000f38:	f7ff f94a 	bl	80001d0 <HAL_GetTick>
 8000f3c:	1b40      	subs	r0, r0, r5
 8000f3e:	2802      	cmp	r0, #2
 8000f40:	d9f6      	bls.n	8000f30 <HAL_RCC_OscConfig+0x2d8>
 8000f42:	e6cb      	b.n	8000cdc <HAL_RCC_OscConfig+0x84>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000f44:	f7ff f944 	bl	80001d0 <HAL_GetTick>
 8000f48:	1bc0      	subs	r0, r0, r7
 8000f4a:	2802      	cmp	r0, #2
 8000f4c:	d9d7      	bls.n	8000efe <HAL_RCC_OscConfig+0x2a6>
 8000f4e:	e6c5      	b.n	8000cdc <HAL_RCC_OscConfig+0x84>
        tickstart = HAL_GetTick();
 8000f50:	f7ff f93e 	bl	80001d0 <HAL_GetTick>
 8000f54:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000f56:	6823      	ldr	r3, [r4, #0]
 8000f58:	019b      	lsls	r3, r3, #6
 8000f5a:	f57f ae95 	bpl.w	8000c88 <HAL_RCC_OscConfig+0x30>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000f5e:	f7ff f937 	bl	80001d0 <HAL_GetTick>
 8000f62:	1b40      	subs	r0, r0, r5
 8000f64:	2802      	cmp	r0, #2
 8000f66:	d9f6      	bls.n	8000f56 <HAL_RCC_OscConfig+0x2fe>
 8000f68:	e6b8      	b.n	8000cdc <HAL_RCC_OscConfig+0x84>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8000f6a:	2801      	cmp	r0, #1
 8000f6c:	f43f aeb7 	beq.w	8000cde <HAL_RCC_OscConfig+0x86>
        pll_config = RCC->CFGR;
 8000f70:	6858      	ldr	r0, [r3, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000f72:	6a2b      	ldr	r3, [r5, #32]
 8000f74:	f400 3280 	and.w	r2, r0, #65536	; 0x10000
 8000f78:	429a      	cmp	r2, r3
 8000f7a:	f47f ae71 	bne.w	8000c60 <HAL_RCC_OscConfig+0x8>
 8000f7e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8000f80:	f400 1070 	and.w	r0, r0, #3932160	; 0x3c0000
    return HAL_ERROR;
 8000f84:	1ac0      	subs	r0, r0, r3
 8000f86:	bf18      	it	ne
 8000f88:	2001      	movne	r0, #1
 8000f8a:	e6a8      	b.n	8000cde <HAL_RCC_OscConfig+0x86>
 8000f8c:	40021000 	.word	0x40021000
 8000f90:	42420060 	.word	0x42420060

08000f94 <HAL_RCC_GetSysClockFreq>:
{
 8000f94:	b530      	push	{r4, r5, lr}
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8000f96:	4b19      	ldr	r3, [pc, #100]	; (8000ffc <HAL_RCC_GetSysClockFreq+0x68>)
{
 8000f98:	b087      	sub	sp, #28
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8000f9a:	ac02      	add	r4, sp, #8
 8000f9c:	f103 0510 	add.w	r5, r3, #16
 8000fa0:	4622      	mov	r2, r4
 8000fa2:	6818      	ldr	r0, [r3, #0]
 8000fa4:	6859      	ldr	r1, [r3, #4]
 8000fa6:	3308      	adds	r3, #8
 8000fa8:	c203      	stmia	r2!, {r0, r1}
 8000faa:	42ab      	cmp	r3, r5
 8000fac:	4614      	mov	r4, r2
 8000fae:	d1f7      	bne.n	8000fa0 <HAL_RCC_GetSysClockFreq+0xc>
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8000fb0:	2301      	movs	r3, #1
 8000fb2:	f88d 3004 	strb.w	r3, [sp, #4]
 8000fb6:	2302      	movs	r3, #2
  tmpreg = RCC->CFGR;
 8000fb8:	4911      	ldr	r1, [pc, #68]	; (8001000 <HAL_RCC_GetSysClockFreq+0x6c>)
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8000fba:	f88d 3005 	strb.w	r3, [sp, #5]
  tmpreg = RCC->CFGR;
 8000fbe:	684b      	ldr	r3, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8000fc0:	f003 020c 	and.w	r2, r3, #12
 8000fc4:	2a08      	cmp	r2, #8
 8000fc6:	d117      	bne.n	8000ff8 <HAL_RCC_GetSysClockFreq+0x64>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8000fc8:	f3c3 4283 	ubfx	r2, r3, #18, #4
 8000fcc:	a806      	add	r0, sp, #24
 8000fce:	4402      	add	r2, r0
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8000fd0:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8000fd2:	f812 2c10 	ldrb.w	r2, [r2, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8000fd6:	d50c      	bpl.n	8000ff2 <HAL_RCC_GetSysClockFreq+0x5e>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8000fd8:	684b      	ldr	r3, [r1, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8000fda:	480a      	ldr	r0, [pc, #40]	; (8001004 <HAL_RCC_GetSysClockFreq+0x70>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8000fdc:	f3c3 4340 	ubfx	r3, r3, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8000fe0:	4350      	muls	r0, r2
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8000fe2:	aa06      	add	r2, sp, #24
 8000fe4:	4413      	add	r3, r2
 8000fe6:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8000fea:	fbb0 f0f3 	udiv	r0, r0, r3
}
 8000fee:	b007      	add	sp, #28
 8000ff0:	bd30      	pop	{r4, r5, pc}
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8000ff2:	4805      	ldr	r0, [pc, #20]	; (8001008 <HAL_RCC_GetSysClockFreq+0x74>)
 8000ff4:	4350      	muls	r0, r2
 8000ff6:	e7fa      	b.n	8000fee <HAL_RCC_GetSysClockFreq+0x5a>
      sysclockfreq = HSE_VALUE;
 8000ff8:	4802      	ldr	r0, [pc, #8]	; (8001004 <HAL_RCC_GetSysClockFreq+0x70>)
  return sysclockfreq;
 8000ffa:	e7f8      	b.n	8000fee <HAL_RCC_GetSysClockFreq+0x5a>
 8000ffc:	08003a88 	.word	0x08003a88
 8001000:	40021000 	.word	0x40021000
 8001004:	007a1200 	.word	0x007a1200
 8001008:	003d0900 	.word	0x003d0900

0800100c <HAL_RCC_ClockConfig>:
{
 800100c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001010:	460d      	mov	r5, r1
  if (RCC_ClkInitStruct == NULL)
 8001012:	4604      	mov	r4, r0
 8001014:	b910      	cbnz	r0, 800101c <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8001016:	2001      	movs	r0, #1
 8001018:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800101c:	4a45      	ldr	r2, [pc, #276]	; (8001134 <HAL_RCC_ClockConfig+0x128>)
 800101e:	6813      	ldr	r3, [r2, #0]
 8001020:	f003 0307 	and.w	r3, r3, #7
 8001024:	428b      	cmp	r3, r1
 8001026:	d329      	bcc.n	800107c <HAL_RCC_ClockConfig+0x70>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001028:	6821      	ldr	r1, [r4, #0]
 800102a:	078e      	lsls	r6, r1, #30
 800102c:	d431      	bmi.n	8001092 <HAL_RCC_ClockConfig+0x86>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800102e:	07ca      	lsls	r2, r1, #31
 8001030:	d444      	bmi.n	80010bc <HAL_RCC_ClockConfig+0xb0>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001032:	4a40      	ldr	r2, [pc, #256]	; (8001134 <HAL_RCC_ClockConfig+0x128>)
 8001034:	6813      	ldr	r3, [r2, #0]
 8001036:	f003 0307 	and.w	r3, r3, #7
 800103a:	429d      	cmp	r5, r3
 800103c:	d367      	bcc.n	800110e <HAL_RCC_ClockConfig+0x102>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800103e:	6822      	ldr	r2, [r4, #0]
 8001040:	4d3d      	ldr	r5, [pc, #244]	; (8001138 <HAL_RCC_ClockConfig+0x12c>)
 8001042:	f012 0f04 	tst.w	r2, #4
 8001046:	d16e      	bne.n	8001126 <HAL_RCC_ClockConfig+0x11a>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001048:	0713      	lsls	r3, r2, #28
 800104a:	d506      	bpl.n	800105a <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800104c:	686b      	ldr	r3, [r5, #4]
 800104e:	6922      	ldr	r2, [r4, #16]
 8001050:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8001054:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001058:	606b      	str	r3, [r5, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800105a:	f7ff ff9b 	bl	8000f94 <HAL_RCC_GetSysClockFreq>
 800105e:	686b      	ldr	r3, [r5, #4]
 8001060:	4a36      	ldr	r2, [pc, #216]	; (800113c <HAL_RCC_ClockConfig+0x130>)
 8001062:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001066:	5cd3      	ldrb	r3, [r2, r3]
 8001068:	40d8      	lsrs	r0, r3
 800106a:	4b35      	ldr	r3, [pc, #212]	; (8001140 <HAL_RCC_ClockConfig+0x134>)
 800106c:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 800106e:	4b35      	ldr	r3, [pc, #212]	; (8001144 <HAL_RCC_ClockConfig+0x138>)
 8001070:	6818      	ldr	r0, [r3, #0]
 8001072:	f7ff f86b 	bl	800014c <HAL_InitTick>
  return HAL_OK;
 8001076:	2000      	movs	r0, #0
 8001078:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 800107c:	6813      	ldr	r3, [r2, #0]
 800107e:	f023 0307 	bic.w	r3, r3, #7
 8001082:	430b      	orrs	r3, r1
 8001084:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001086:	6813      	ldr	r3, [r2, #0]
 8001088:	f003 0307 	and.w	r3, r3, #7
 800108c:	4299      	cmp	r1, r3
 800108e:	d1c2      	bne.n	8001016 <HAL_RCC_ClockConfig+0xa>
 8001090:	e7ca      	b.n	8001028 <HAL_RCC_ClockConfig+0x1c>
 8001092:	4b29      	ldr	r3, [pc, #164]	; (8001138 <HAL_RCC_ClockConfig+0x12c>)
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001094:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001098:	bf1e      	ittt	ne
 800109a:	685a      	ldrne	r2, [r3, #4]
 800109c:	f442 62e0 	orrne.w	r2, r2, #1792	; 0x700
 80010a0:	605a      	strne	r2, [r3, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80010a2:	0708      	lsls	r0, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80010a4:	bf42      	ittt	mi
 80010a6:	685a      	ldrmi	r2, [r3, #4]
 80010a8:	f442 5260 	orrmi.w	r2, r2, #14336	; 0x3800
 80010ac:	605a      	strmi	r2, [r3, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80010ae:	685a      	ldr	r2, [r3, #4]
 80010b0:	68a0      	ldr	r0, [r4, #8]
 80010b2:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80010b6:	4302      	orrs	r2, r0
 80010b8:	605a      	str	r2, [r3, #4]
 80010ba:	e7b8      	b.n	800102e <HAL_RCC_ClockConfig+0x22>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80010bc:	6862      	ldr	r2, [r4, #4]
 80010be:	4e1e      	ldr	r6, [pc, #120]	; (8001138 <HAL_RCC_ClockConfig+0x12c>)
 80010c0:	2a01      	cmp	r2, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80010c2:	6833      	ldr	r3, [r6, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80010c4:	d11b      	bne.n	80010fe <HAL_RCC_ClockConfig+0xf2>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80010c6:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80010ca:	d0a4      	beq.n	8001016 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80010cc:	6873      	ldr	r3, [r6, #4]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80010ce:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80010d2:	f023 0303 	bic.w	r3, r3, #3
 80010d6:	4313      	orrs	r3, r2
 80010d8:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 80010da:	f7ff f879 	bl	80001d0 <HAL_GetTick>
 80010de:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80010e0:	6873      	ldr	r3, [r6, #4]
 80010e2:	6862      	ldr	r2, [r4, #4]
 80010e4:	f003 030c 	and.w	r3, r3, #12
 80010e8:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80010ec:	d0a1      	beq.n	8001032 <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80010ee:	f7ff f86f 	bl	80001d0 <HAL_GetTick>
 80010f2:	1bc0      	subs	r0, r0, r7
 80010f4:	4540      	cmp	r0, r8
 80010f6:	d9f3      	bls.n	80010e0 <HAL_RCC_ClockConfig+0xd4>
        return HAL_TIMEOUT;
 80010f8:	2003      	movs	r0, #3
}
 80010fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80010fe:	2a02      	cmp	r2, #2
 8001100:	d102      	bne.n	8001108 <HAL_RCC_ClockConfig+0xfc>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001102:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001106:	e7e0      	b.n	80010ca <HAL_RCC_ClockConfig+0xbe>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001108:	f013 0f02 	tst.w	r3, #2
 800110c:	e7dd      	b.n	80010ca <HAL_RCC_ClockConfig+0xbe>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800110e:	6813      	ldr	r3, [r2, #0]
 8001110:	f023 0307 	bic.w	r3, r3, #7
 8001114:	432b      	orrs	r3, r5
 8001116:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001118:	6813      	ldr	r3, [r2, #0]
 800111a:	f003 0307 	and.w	r3, r3, #7
 800111e:	429d      	cmp	r5, r3
 8001120:	f47f af79 	bne.w	8001016 <HAL_RCC_ClockConfig+0xa>
 8001124:	e78b      	b.n	800103e <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001126:	686b      	ldr	r3, [r5, #4]
 8001128:	68e1      	ldr	r1, [r4, #12]
 800112a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800112e:	430b      	orrs	r3, r1
 8001130:	606b      	str	r3, [r5, #4]
 8001132:	e789      	b.n	8001048 <HAL_RCC_ClockConfig+0x3c>
 8001134:	40022000 	.word	0x40022000
 8001138:	40021000 	.word	0x40021000
 800113c:	08003acb 	.word	0x08003acb
 8001140:	20000118 	.word	0x20000118
 8001144:	20000004 	.word	0x20000004

08001148 <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001148:	6803      	ldr	r3, [r0, #0]
{
 800114a:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800114e:	07d9      	lsls	r1, r3, #31
{
 8001150:	4605      	mov	r5, r0
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001152:	d520      	bpl.n	8001196 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001154:	4c35      	ldr	r4, [pc, #212]	; (800122c <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 8001156:	69e3      	ldr	r3, [r4, #28]
 8001158:	00da      	lsls	r2, r3, #3
 800115a:	d432      	bmi.n	80011c2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
 800115c:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 800115e:	69e3      	ldr	r3, [r4, #28]
 8001160:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001164:	61e3      	str	r3, [r4, #28]
 8001166:	69e3      	ldr	r3, [r4, #28]
 8001168:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800116c:	9301      	str	r3, [sp, #4]
 800116e:	9b01      	ldr	r3, [sp, #4]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001170:	4e2f      	ldr	r6, [pc, #188]	; (8001230 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8001172:	6833      	ldr	r3, [r6, #0]
 8001174:	05db      	lsls	r3, r3, #23
 8001176:	d526      	bpl.n	80011c6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001178:	6a23      	ldr	r3, [r4, #32]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800117a:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 800117e:	d136      	bne.n	80011ee <HAL_RCCEx_PeriphCLKConfig+0xa6>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001180:	6a23      	ldr	r3, [r4, #32]
 8001182:	686a      	ldr	r2, [r5, #4]
 8001184:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001188:	4313      	orrs	r3, r2
 800118a:	6223      	str	r3, [r4, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800118c:	b11f      	cbz	r7, 8001196 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800118e:	69e3      	ldr	r3, [r4, #28]
 8001190:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001194:	61e3      	str	r3, [r4, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001196:	6828      	ldr	r0, [r5, #0]
 8001198:	0783      	lsls	r3, r0, #30
 800119a:	d506      	bpl.n	80011aa <HAL_RCCEx_PeriphCLKConfig+0x62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800119c:	4a23      	ldr	r2, [pc, #140]	; (800122c <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 800119e:	68a9      	ldr	r1, [r5, #8]
 80011a0:	6853      	ldr	r3, [r2, #4]
 80011a2:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80011a6:	430b      	orrs	r3, r1
 80011a8:	6053      	str	r3, [r2, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80011aa:	f010 0010 	ands.w	r0, r0, #16
 80011ae:	d01b      	beq.n	80011e8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80011b0:	4a1e      	ldr	r2, [pc, #120]	; (800122c <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 80011b2:	68e9      	ldr	r1, [r5, #12]
 80011b4:	6853      	ldr	r3, [r2, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80011b6:	2000      	movs	r0, #0
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80011b8:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80011bc:	430b      	orrs	r3, r1
 80011be:	6053      	str	r3, [r2, #4]
 80011c0:	e012      	b.n	80011e8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    FlagStatus       pwrclkchanged = RESET;
 80011c2:	2700      	movs	r7, #0
 80011c4:	e7d4      	b.n	8001170 <HAL_RCCEx_PeriphCLKConfig+0x28>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80011c6:	6833      	ldr	r3, [r6, #0]
 80011c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011cc:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 80011ce:	f7fe ffff 	bl	80001d0 <HAL_GetTick>
 80011d2:	4680      	mov	r8, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80011d4:	6833      	ldr	r3, [r6, #0]
 80011d6:	05d8      	lsls	r0, r3, #23
 80011d8:	d4ce      	bmi.n	8001178 <HAL_RCCEx_PeriphCLKConfig+0x30>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80011da:	f7fe fff9 	bl	80001d0 <HAL_GetTick>
 80011de:	eba0 0008 	sub.w	r0, r0, r8
 80011e2:	2864      	cmp	r0, #100	; 0x64
 80011e4:	d9f6      	bls.n	80011d4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
          return HAL_TIMEOUT;
 80011e6:	2003      	movs	r0, #3
}
 80011e8:	b002      	add	sp, #8
 80011ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80011ee:	686a      	ldr	r2, [r5, #4]
 80011f0:	f402 7240 	and.w	r2, r2, #768	; 0x300
 80011f4:	4293      	cmp	r3, r2
 80011f6:	d0c3      	beq.n	8001180 <HAL_RCCEx_PeriphCLKConfig+0x38>
      __HAL_RCC_BACKUPRESET_FORCE();
 80011f8:	2001      	movs	r0, #1
 80011fa:	4a0e      	ldr	r2, [pc, #56]	; (8001234 <HAL_RCCEx_PeriphCLKConfig+0xec>)
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80011fc:	6a23      	ldr	r3, [r4, #32]
      __HAL_RCC_BACKUPRESET_FORCE();
 80011fe:	6010      	str	r0, [r2, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001200:	2000      	movs	r0, #0
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001202:	f423 7140 	bic.w	r1, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001206:	6010      	str	r0, [r2, #0]
      RCC->BDCR = temp_reg;
 8001208:	6221      	str	r1, [r4, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800120a:	07d9      	lsls	r1, r3, #31
 800120c:	d5b8      	bpl.n	8001180 <HAL_RCCEx_PeriphCLKConfig+0x38>
        tickstart = HAL_GetTick();
 800120e:	f7fe ffdf 	bl	80001d0 <HAL_GetTick>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001212:	f241 3888 	movw	r8, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8001216:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001218:	6a23      	ldr	r3, [r4, #32]
 800121a:	079a      	lsls	r2, r3, #30
 800121c:	d4b0      	bmi.n	8001180 <HAL_RCCEx_PeriphCLKConfig+0x38>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800121e:	f7fe ffd7 	bl	80001d0 <HAL_GetTick>
 8001222:	1b80      	subs	r0, r0, r6
 8001224:	4540      	cmp	r0, r8
 8001226:	d9f7      	bls.n	8001218 <HAL_RCCEx_PeriphCLKConfig+0xd0>
 8001228:	e7dd      	b.n	80011e6 <HAL_RCCEx_PeriphCLKConfig+0x9e>
 800122a:	bf00      	nop
 800122c:	40021000 	.word	0x40021000
 8001230:	40007000 	.word	0x40007000
 8001234:	42420440 	.word	0x42420440

08001238 <USB_CoreInit>:
  * @param  cfg : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8001238:	b084      	sub	sp, #16
 800123a:	a801      	add	r0, sp, #4
 800123c:	e880 000e 	stmia.w	r0, {r1, r2, r3}
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
}
 8001240:	b004      	add	sp, #16
 8001242:	2000      	movs	r0, #0
 8001244:	4770      	bx	lr

08001246 <USB_EnableGlobalInt>:
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR |= winterruptmask;
 8001246:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 800124a:	b29b      	uxth	r3, r3
 800124c:	f443 433f 	orr.w	r3, r3, #48896	; 0xbf00
 8001250:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40

  return HAL_OK;
}
 8001254:	2000      	movs	r0, #0
 8001256:	4770      	bx	lr

08001258 <USB_DisableGlobalInt>:
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= ~winterruptmask;
 8001258:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 800125c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8001260:	045b      	lsls	r3, r3, #17
 8001262:	0c5b      	lsrs	r3, r3, #17
 8001264:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40

  return HAL_OK;
}
 8001268:	2000      	movs	r0, #0
 800126a:	4770      	bx	lr

0800126c <USB_SetCurrentMode>:
 800126c:	2000      	movs	r0, #0
 800126e:	4770      	bx	lr

08001270 <USB_DevInit>:
  * @param  cfg  : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8001270:	b084      	sub	sp, #16
 8001272:	b510      	push	{r4, lr}
 8001274:	ac03      	add	r4, sp, #12
 8001276:	e884 000e 	stmia.w	r4, {r1, r2, r3}

  /* Enable USB Device Interrupt mask */
  (void)USB_EnableGlobalInt(USBx);

  return HAL_OK;
}
 800127a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBx->CNTR = 0;
 800127e:	2200      	movs	r2, #0
  USBx->CNTR = USB_CNTR_FRES;
 8001280:	2301      	movs	r3, #1
 8001282:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
  USBx->CNTR = 0;
 8001286:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40
  USBx->ISTR = 0;
 800128a:	f8a0 2044 	strh.w	r2, [r0, #68]	; 0x44
  USBx->BTABLE = BTABLE_ADDRESS;
 800128e:	f8a0 2050 	strh.w	r2, [r0, #80]	; 0x50
  USBx->CNTR |= winterruptmask;
 8001292:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
}
 8001296:	b004      	add	sp, #16
  USBx->CNTR |= winterruptmask;
 8001298:	b29b      	uxth	r3, r3
 800129a:	f443 433f 	orr.w	r3, r3, #48896	; 0xbf00
 800129e:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
}
 80012a2:	4610      	mov	r0, r2
 80012a4:	4770      	bx	lr
	...

080012a8 <USB_ActivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80012a8:	b5f0      	push	{r4, r5, r6, r7, lr}
  HAL_StatusTypeDef ret = HAL_OK;
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80012aa:	780d      	ldrb	r5, [r1, #0]
{
 80012ac:	4603      	mov	r3, r0
  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80012ae:	f830 2025 	ldrh.w	r2, [r0, r5, lsl #2]

  /* initialize Endpoint */
  switch (ep->type)
 80012b2:	78c8      	ldrb	r0, [r1, #3]
  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80012b4:	f422 42ec 	bic.w	r2, r2, #30208	; 0x7600
 80012b8:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80012bc:	0412      	lsls	r2, r2, #16
 80012be:	0c12      	lsrs	r2, r2, #16
  switch (ep->type)
 80012c0:	2803      	cmp	r0, #3
 80012c2:	d84e      	bhi.n	8001362 <USB_ActivateEndpoint+0xba>
 80012c4:	e8df f000 	tbb	[pc, r0]
 80012c8:	47044a02 	.word	0x47044a02
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 80012cc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
  HAL_StatusTypeDef ret = HAL_OK;
 80012d0:	2000      	movs	r0, #0
    default:
      ret = HAL_ERROR;
      break;
  }

  PCD_SET_ENDPOINT(USBx, ep->num, wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX);
 80012d2:	f248 0480 	movw	r4, #32896	; 0x8080
 80012d6:	4322      	orrs	r2, r4
 80012d8:	f823 2025 	strh.w	r2, [r3, r5, lsl #2]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80012dc:	780e      	ldrb	r6, [r1, #0]
 80012de:	4dab      	ldr	r5, [pc, #684]	; (800158c <USB_ActivateEndpoint+0x2e4>)
 80012e0:	f833 2026 	ldrh.w	r2, [r3, r6, lsl #2]
 80012e4:	4334      	orrs	r4, r6
 80012e6:	b292      	uxth	r2, r2
 80012e8:	402a      	ands	r2, r5
 80012ea:	4322      	orrs	r2, r4
 80012ec:	f823 2026 	strh.w	r2, [r3, r6, lsl #2]

  if (ep->doublebuffer == 0U)
 80012f0:	7b0c      	ldrb	r4, [r1, #12]
 80012f2:	780a      	ldrb	r2, [r1, #0]
 80012f4:	2c00      	cmp	r4, #0
 80012f6:	f040 8088 	bne.w	800140a <USB_ActivateEndpoint+0x162>
  {
    if (ep->is_in != 0U)
 80012fa:	784e      	ldrb	r6, [r1, #1]
 80012fc:	88cc      	ldrh	r4, [r1, #6]
 80012fe:	b396      	cbz	r6, 8001366 <USB_ActivateEndpoint+0xbe>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8001300:	f8b3 6050 	ldrh.w	r6, [r3, #80]	; 0x50
 8001304:	eb03 1202 	add.w	r2, r3, r2, lsl #4
 8001308:	f024 0401 	bic.w	r4, r4, #1
 800130c:	b2b6      	uxth	r6, r6
 800130e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001312:	b2a4      	uxth	r4, r4
 8001314:	5394      	strh	r4, [r2, r6]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8001316:	780c      	ldrb	r4, [r1, #0]
 8001318:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 800131c:	0656      	lsls	r6, r2, #25
 800131e:	d509      	bpl.n	8001334 <USB_ActivateEndpoint+0x8c>
 8001320:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8001324:	b292      	uxth	r2, r2
 8001326:	402a      	ands	r2, r5
 8001328:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800132c:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8001330:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]

      if (ep->type != EP_TYPE_ISOC)
 8001334:	78ca      	ldrb	r2, [r1, #3]
 8001336:	7809      	ldrb	r1, [r1, #0]
 8001338:	2a01      	cmp	r2, #1
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800133a:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 800133e:	4c94      	ldr	r4, [pc, #592]	; (8001590 <USB_ActivateEndpoint+0x2e8>)
 8001340:	b292      	uxth	r2, r2
 8001342:	ea02 0204 	and.w	r2, r2, r4
      if (ep->type != EP_TYPE_ISOC)
 8001346:	d001      	beq.n	800134c <USB_ActivateEndpoint+0xa4>
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8001348:	f082 0220 	eor.w	r2, r2, #32
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800134c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001350:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001354:	e0cb      	b.n	80014ee <USB_ActivateEndpoint+0x246>
      wEpRegVal |= USB_EP_INTERRUPT;
 8001356:	f442 62c0 	orr.w	r2, r2, #1536	; 0x600
 800135a:	e7b9      	b.n	80012d0 <USB_ActivateEndpoint+0x28>
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 800135c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001360:	e7b6      	b.n	80012d0 <USB_ActivateEndpoint+0x28>
      ret = HAL_ERROR;
 8001362:	2001      	movs	r0, #1
 8001364:	e7b5      	b.n	80012d2 <USB_ActivateEndpoint+0x2a>
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8001366:	f8b3 5050 	ldrh.w	r5, [r3, #80]	; 0x50
 800136a:	eb03 1202 	add.w	r2, r3, r2, lsl #4
 800136e:	f024 0401 	bic.w	r4, r4, #1
 8001372:	b2ad      	uxth	r5, r5
 8001374:	f502 6281 	add.w	r2, r2, #1032	; 0x408
 8001378:	b2a4      	uxth	r4, r4
 800137a:	5354      	strh	r4, [r2, r5]
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800137c:	780a      	ldrb	r2, [r1, #0]
 800137e:	f8b3 6050 	ldrh.w	r6, [r3, #80]	; 0x50
 8001382:	690d      	ldr	r5, [r1, #16]
 8001384:	eb03 1202 	add.w	r2, r3, r2, lsl #4
 8001388:	b2b6      	uxth	r6, r6
 800138a:	f202 420c 	addw	r2, r2, #1036	; 0x40c
 800138e:	bb5d      	cbnz	r5, 80013e8 <USB_ActivateEndpoint+0x140>
 8001390:	5b94      	ldrh	r4, [r2, r6]
 8001392:	f424 44f8 	bic.w	r4, r4, #31744	; 0x7c00
 8001396:	0424      	lsls	r4, r4, #16
 8001398:	0c24      	lsrs	r4, r4, #16
 800139a:	5394      	strh	r4, [r2, r6]
 800139c:	5b94      	ldrh	r4, [r2, r6]
 800139e:	ea6f 4444 	mvn.w	r4, r4, lsl #17
 80013a2:	ea6f 4454 	mvn.w	r4, r4, lsr #17
 80013a6:	b2a4      	uxth	r4, r4
 80013a8:	5394      	strh	r4, [r2, r6]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80013aa:	780c      	ldrb	r4, [r1, #0]
 80013ac:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 80013b0:	0455      	lsls	r5, r2, #17
 80013b2:	d50d      	bpl.n	80013d0 <USB_ActivateEndpoint+0x128>
 80013b4:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 80013b8:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 80013bc:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80013c0:	0412      	lsls	r2, r2, #16
 80013c2:	0c12      	lsrs	r2, r2, #16
 80013c4:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 80013c8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80013cc:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80013d0:	7809      	ldrb	r1, [r1, #0]
 80013d2:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 80013d6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80013da:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80013de:	0412      	lsls	r2, r2, #16
 80013e0:	0c12      	lsrs	r2, r2, #16
 80013e2:	f482 5240 	eor.w	r2, r2, #12288	; 0x3000
 80013e6:	e7b1      	b.n	800134c <USB_ActivateEndpoint+0xa4>
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80013e8:	2d3e      	cmp	r5, #62	; 0x3e
 80013ea:	d805      	bhi.n	80013f8 <USB_ActivateEndpoint+0x150>
 80013ec:	086c      	lsrs	r4, r5, #1
 80013ee:	07ed      	lsls	r5, r5, #31
 80013f0:	bf48      	it	mi
 80013f2:	3401      	addmi	r4, #1
 80013f4:	02a4      	lsls	r4, r4, #10
 80013f6:	e7d6      	b.n	80013a6 <USB_ActivateEndpoint+0xfe>
 80013f8:	096f      	lsrs	r7, r5, #5
 80013fa:	06ec      	lsls	r4, r5, #27
 80013fc:	4c65      	ldr	r4, [pc, #404]	; (8001594 <USB_ActivateEndpoint+0x2ec>)
 80013fe:	bf08      	it	eq
 8001400:	f107 37ff 	addeq.w	r7, r7, #4294967295
 8001404:	ea44 2487 	orr.w	r4, r4, r7, lsl #10
 8001408:	e7cd      	b.n	80013a6 <USB_ActivateEndpoint+0xfe>
    PCD_SET_EP_DBUF(USBx, ep->num);
 800140a:	f833 4022 	ldrh.w	r4, [r3, r2, lsl #2]
 800140e:	b2a4      	uxth	r4, r4
 8001410:	402c      	ands	r4, r5
 8001412:	f444 4401 	orr.w	r4, r4, #33024	; 0x8100
 8001416:	f044 0480 	orr.w	r4, r4, #128	; 0x80
 800141a:	f823 4022 	strh.w	r4, [r3, r2, lsl #2]
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800141e:	780a      	ldrb	r2, [r1, #0]
 8001420:	890c      	ldrh	r4, [r1, #8]
 8001422:	f8b3 6050 	ldrh.w	r6, [r3, #80]	; 0x50
 8001426:	eb03 1202 	add.w	r2, r3, r2, lsl #4
 800142a:	f024 0401 	bic.w	r4, r4, #1
 800142e:	b2b6      	uxth	r6, r6
 8001430:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001434:	b2a4      	uxth	r4, r4
 8001436:	5394      	strh	r4, [r2, r6]
 8001438:	780a      	ldrb	r2, [r1, #0]
 800143a:	894c      	ldrh	r4, [r1, #10]
 800143c:	f8b3 6050 	ldrh.w	r6, [r3, #80]	; 0x50
 8001440:	eb03 1202 	add.w	r2, r3, r2, lsl #4
 8001444:	f024 0401 	bic.w	r4, r4, #1
 8001448:	f502 6281 	add.w	r2, r2, #1032	; 0x408
 800144c:	b2a4      	uxth	r4, r4
 800144e:	b2b6      	uxth	r6, r6
 8001450:	5394      	strh	r4, [r2, r6]
    if (ep->is_in == 0U)
 8001452:	784a      	ldrb	r2, [r1, #1]
 8001454:	780c      	ldrb	r4, [r1, #0]
 8001456:	2a00      	cmp	r2, #0
 8001458:	d14c      	bne.n	80014f4 <USB_ActivateEndpoint+0x24c>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800145a:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 800145e:	0452      	lsls	r2, r2, #17
 8001460:	d509      	bpl.n	8001476 <USB_ActivateEndpoint+0x1ce>
 8001462:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8001466:	b292      	uxth	r2, r2
 8001468:	402a      	ands	r2, r5
 800146a:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 800146e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001472:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8001476:	780c      	ldrb	r4, [r1, #0]
 8001478:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 800147c:	0657      	lsls	r7, r2, #25
 800147e:	d50d      	bpl.n	800149c <USB_ActivateEndpoint+0x1f4>
 8001480:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8001484:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8001488:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800148c:	0412      	lsls	r2, r2, #16
 800148e:	0c12      	lsrs	r2, r2, #16
 8001490:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001494:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8001498:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_TX_DTOG(USBx, ep->num);
 800149c:	780c      	ldrb	r4, [r1, #0]
 800149e:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 80014a2:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 80014a6:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80014aa:	0412      	lsls	r2, r2, #16
 80014ac:	0c12      	lsrs	r2, r2, #16
 80014ae:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80014b2:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 80014b6:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80014ba:	f248 0480 	movw	r4, #32896	; 0x8080
 80014be:	780d      	ldrb	r5, [r1, #0]
 80014c0:	f833 2025 	ldrh.w	r2, [r3, r5, lsl #2]
 80014c4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80014c8:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80014cc:	0412      	lsls	r2, r2, #16
 80014ce:	0c12      	lsrs	r2, r2, #16
 80014d0:	f482 5240 	eor.w	r2, r2, #12288	; 0x3000
 80014d4:	4322      	orrs	r2, r4
 80014d6:	f823 2025 	strh.w	r2, [r3, r5, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80014da:	7809      	ldrb	r1, [r1, #0]
 80014dc:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 80014e0:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 80014e4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80014e8:	0412      	lsls	r2, r2, #16
 80014ea:	0c12      	lsrs	r2, r2, #16
 80014ec:	4322      	orrs	r2, r4
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80014ee:	f823 2021 	strh.w	r2, [r3, r1, lsl #2]
    }
  }

  return ret;
}
 80014f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80014f4:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 80014f8:	0456      	lsls	r6, r2, #17
 80014fa:	d509      	bpl.n	8001510 <USB_ActivateEndpoint+0x268>
 80014fc:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8001500:	b292      	uxth	r2, r2
 8001502:	402a      	ands	r2, r5
 8001504:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8001508:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800150c:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8001510:	780c      	ldrb	r4, [r1, #0]
 8001512:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8001516:	0652      	lsls	r2, r2, #25
 8001518:	d50d      	bpl.n	8001536 <USB_ActivateEndpoint+0x28e>
 800151a:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 800151e:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8001522:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001526:	0412      	lsls	r2, r2, #16
 8001528:	0c12      	lsrs	r2, r2, #16
 800152a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800152e:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8001532:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_RX_DTOG(USBx, ep->num);
 8001536:	780c      	ldrb	r4, [r1, #0]
 8001538:	4d15      	ldr	r5, [pc, #84]	; (8001590 <USB_ActivateEndpoint+0x2e8>)
 800153a:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 800153e:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8001542:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001546:	0412      	lsls	r2, r2, #16
 8001548:	0c12      	lsrs	r2, r2, #16
 800154a:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 800154e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001552:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      if (ep->type != EP_TYPE_ISOC)
 8001556:	78ca      	ldrb	r2, [r1, #3]
 8001558:	780c      	ldrb	r4, [r1, #0]
 800155a:	2a01      	cmp	r2, #1
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800155c:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8001560:	b292      	uxth	r2, r2
 8001562:	ea02 0205 	and.w	r2, r2, r5
 8001566:	bf18      	it	ne
 8001568:	f082 0220 	eorne.w	r2, r2, #32
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800156c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001570:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001574:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8001578:	7809      	ldrb	r1, [r1, #0]
 800157a:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 800157e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001582:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001586:	0412      	lsls	r2, r2, #16
 8001588:	0c12      	lsrs	r2, r2, #16
 800158a:	e6df      	b.n	800134c <USB_ActivateEndpoint+0xa4>
 800158c:	ffff8f8f 	.word	0xffff8f8f
 8001590:	ffff8fbf 	.word	0xffff8fbf
 8001594:	ffff8000 	.word	0xffff8000

08001598 <USB_DeactivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8001598:	b510      	push	{r4, lr}
  if (ep->doublebuffer == 0U)
 800159a:	7b0c      	ldrb	r4, [r1, #12]
 800159c:	784b      	ldrb	r3, [r1, #1]
 800159e:	780a      	ldrb	r2, [r1, #0]
 80015a0:	2c00      	cmp	r4, #0
 80015a2:	d13d      	bne.n	8001620 <USB_DeactivateEndpoint+0x88>
  {
    if (ep->is_in != 0U)
 80015a4:	b313      	cbz	r3, 80015ec <USB_DeactivateEndpoint+0x54>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80015a6:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80015aa:	065c      	lsls	r4, r3, #25
 80015ac:	d50d      	bpl.n	80015ca <USB_DeactivateEndpoint+0x32>
 80015ae:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80015b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80015b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80015ba:	041b      	lsls	r3, r3, #16
 80015bc:	0c1b      	lsrs	r3, r3, #16
 80015be:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80015c2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80015c6:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80015ca:	780a      	ldrb	r2, [r1, #0]
 80015cc:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80015d0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80015d4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80015d8:	041b      	lsls	r3, r3, #16
 80015da:	0c1b      	lsrs	r3, r3, #16
 80015dc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80015e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80015e4:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
    }
  }

  return HAL_OK;
}
 80015e8:	2000      	movs	r0, #0
 80015ea:	bd10      	pop	{r4, pc}
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80015ec:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80015f0:	045b      	lsls	r3, r3, #17
 80015f2:	d50d      	bpl.n	8001610 <USB_DeactivateEndpoint+0x78>
 80015f4:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80015f8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80015fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001600:	041b      	lsls	r3, r3, #16
 8001602:	0c1b      	lsrs	r3, r3, #16
 8001604:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001608:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800160c:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8001610:	780a      	ldrb	r2, [r1, #0]
 8001612:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001616:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800161a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800161e:	e7db      	b.n	80015d8 <USB_DeactivateEndpoint+0x40>
    if (ep->is_in == 0U)
 8001620:	2b00      	cmp	r3, #0
 8001622:	d14e      	bne.n	80016c2 <USB_DeactivateEndpoint+0x12a>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8001624:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001628:	045c      	lsls	r4, r3, #17
 800162a:	d50d      	bpl.n	8001648 <USB_DeactivateEndpoint+0xb0>
 800162c:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001630:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001634:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001638:	041b      	lsls	r3, r3, #16
 800163a:	0c1b      	lsrs	r3, r3, #16
 800163c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001640:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001644:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8001648:	780a      	ldrb	r2, [r1, #0]
 800164a:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800164e:	065b      	lsls	r3, r3, #25
 8001650:	d50d      	bpl.n	800166e <USB_DeactivateEndpoint+0xd6>
 8001652:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001656:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800165a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800165e:	041b      	lsls	r3, r3, #16
 8001660:	0c1b      	lsrs	r3, r3, #16
 8001662:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001666:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800166a:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_TX_DTOG(USBx, ep->num);
 800166e:	780a      	ldrb	r2, [r1, #0]
 8001670:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001674:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001678:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800167c:	041b      	lsls	r3, r3, #16
 800167e:	0c1b      	lsrs	r3, r3, #16
 8001680:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001684:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001688:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800168c:	f248 0280 	movw	r2, #32896	; 0x8080
 8001690:	780c      	ldrb	r4, [r1, #0]
 8001692:	f830 3024 	ldrh.w	r3, [r0, r4, lsl #2]
 8001696:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800169a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800169e:	041b      	lsls	r3, r3, #16
 80016a0:	0c1b      	lsrs	r3, r3, #16
 80016a2:	4313      	orrs	r3, r2
 80016a4:	f820 3024 	strh.w	r3, [r0, r4, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80016a8:	7809      	ldrb	r1, [r1, #0]
 80016aa:	f830 3021 	ldrh.w	r3, [r0, r1, lsl #2]
 80016ae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80016b2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80016b6:	041b      	lsls	r3, r3, #16
 80016b8:	0c1b      	lsrs	r3, r3, #16
 80016ba:	4313      	orrs	r3, r2
 80016bc:	f820 3021 	strh.w	r3, [r0, r1, lsl #2]
 80016c0:	e792      	b.n	80015e8 <USB_DeactivateEndpoint+0x50>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80016c2:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80016c6:	045c      	lsls	r4, r3, #17
 80016c8:	d50d      	bpl.n	80016e6 <USB_DeactivateEndpoint+0x14e>
 80016ca:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80016ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80016d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80016d6:	041b      	lsls	r3, r3, #16
 80016d8:	0c1b      	lsrs	r3, r3, #16
 80016da:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80016de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80016e2:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80016e6:	780a      	ldrb	r2, [r1, #0]
 80016e8:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80016ec:	065b      	lsls	r3, r3, #25
 80016ee:	d50d      	bpl.n	800170c <USB_DeactivateEndpoint+0x174>
 80016f0:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80016f4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80016f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80016fc:	041b      	lsls	r3, r3, #16
 80016fe:	0c1b      	lsrs	r3, r3, #16
 8001700:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001704:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001708:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_RX_DTOG(USBx, ep->num);
 800170c:	780a      	ldrb	r2, [r1, #0]
 800170e:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001712:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001716:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800171a:	041b      	lsls	r3, r3, #16
 800171c:	0c1b      	lsrs	r3, r3, #16
 800171e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001722:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001726:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800172a:	f248 0280 	movw	r2, #32896	; 0x8080
 800172e:	780c      	ldrb	r4, [r1, #0]
 8001730:	f830 3024 	ldrh.w	r3, [r0, r4, lsl #2]
 8001734:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001738:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800173c:	041b      	lsls	r3, r3, #16
 800173e:	0c1b      	lsrs	r3, r3, #16
 8001740:	4313      	orrs	r3, r2
 8001742:	f820 3024 	strh.w	r3, [r0, r4, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8001746:	7809      	ldrb	r1, [r1, #0]
 8001748:	f830 3021 	ldrh.w	r3, [r0, r1, lsl #2]
 800174c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001750:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001754:	e7af      	b.n	80016b6 <USB_DeactivateEndpoint+0x11e>

08001756 <USB_EPSetStall>:
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->is_in != 0U)
 8001756:	784b      	ldrb	r3, [r1, #1]
 8001758:	780a      	ldrb	r2, [r1, #0]
 800175a:	b18b      	cbz	r3, 8001780 <USB_EPSetStall+0x2a>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800175c:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001760:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001764:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001768:	041b      	lsls	r3, r3, #16
 800176a:	0c1b      	lsrs	r3, r3, #16
 800176c:	f083 0310 	eor.w	r3, r3, #16
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8001770:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001774:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001778:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
  }

  return HAL_OK;
}
 800177c:	2000      	movs	r0, #0
 800177e:	4770      	bx	lr
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8001780:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001784:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001788:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800178c:	041b      	lsls	r3, r3, #16
 800178e:	0c1b      	lsrs	r3, r3, #16
 8001790:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8001794:	e7ec      	b.n	8001770 <USB_EPSetStall+0x1a>

08001796 <USB_EPClearStall>:
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->doublebuffer == 0U)
 8001796:	7b0b      	ldrb	r3, [r1, #12]
 8001798:	bb43      	cbnz	r3, 80017ec <USB_EPClearStall+0x56>
  {
    if (ep->is_in != 0U)
 800179a:	784b      	ldrb	r3, [r1, #1]
 800179c:	780a      	ldrb	r2, [r1, #0]
 800179e:	b33b      	cbz	r3, 80017f0 <USB_EPClearStall+0x5a>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80017a0:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80017a4:	065b      	lsls	r3, r3, #25
 80017a6:	d50d      	bpl.n	80017c4 <USB_EPClearStall+0x2e>
 80017a8:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80017ac:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80017b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80017b4:	041b      	lsls	r3, r3, #16
 80017b6:	0c1b      	lsrs	r3, r3, #16
 80017b8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80017bc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80017c0:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]

      if (ep->type != EP_TYPE_ISOC)
 80017c4:	78cb      	ldrb	r3, [r1, #3]
 80017c6:	2b01      	cmp	r3, #1
 80017c8:	d010      	beq.n	80017ec <USB_EPClearStall+0x56>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80017ca:	780a      	ldrb	r2, [r1, #0]
 80017cc:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80017d0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80017d4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80017d8:	041b      	lsls	r3, r3, #16
 80017da:	0c1b      	lsrs	r3, r3, #16
 80017dc:	f083 0320 	eor.w	r3, r3, #32
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80017e0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80017e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80017e8:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    }
  }

  return HAL_OK;
}
 80017ec:	2000      	movs	r0, #0
 80017ee:	4770      	bx	lr
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80017f0:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80017f4:	045b      	lsls	r3, r3, #17
 80017f6:	d50d      	bpl.n	8001814 <USB_EPClearStall+0x7e>
 80017f8:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80017fc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001800:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001804:	041b      	lsls	r3, r3, #16
 8001806:	0c1b      	lsrs	r3, r3, #16
 8001808:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800180c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001810:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8001814:	780a      	ldrb	r2, [r1, #0]
 8001816:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800181a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800181e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001822:	041b      	lsls	r3, r3, #16
 8001824:	0c1b      	lsrs	r3, r3, #16
 8001826:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 800182a:	e7d9      	b.n	80017e0 <USB_EPClearStall+0x4a>

0800182c <USB_SetDevAddress>:
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
  if (address == 0U)
 800182c:	b911      	cbnz	r1, 8001834 <USB_SetDevAddress+0x8>
  {
    /* set device address and enable function */
    USBx->DADDR = USB_DADDR_EF;
 800182e:	2380      	movs	r3, #128	; 0x80
 8001830:	f8a0 304c 	strh.w	r3, [r0, #76]	; 0x4c
  }

  return HAL_OK;
}
 8001834:	2000      	movs	r0, #0
 8001836:	4770      	bx	lr

08001838 <USB_DevConnect>:
 8001838:	2000      	movs	r0, #0
 800183a:	4770      	bx	lr

0800183c <USB_DevDisconnect>:
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
}
 800183c:	2000      	movs	r0, #0
 800183e:	4770      	bx	lr

08001840 <USB_ReadInterrupts>:
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8001840:	f8b0 0044 	ldrh.w	r0, [r0, #68]	; 0x44
  return tmpreg;
}
 8001844:	b280      	uxth	r0, r0
 8001846:	4770      	bx	lr

08001848 <USB_EP0_OutStart>:
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
}
 8001848:	2000      	movs	r0, #0
 800184a:	4770      	bx	lr

0800184c <USB_WritePMA>:
  uint32_t BaseAddr = (uint32_t)USBx;
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800184c:	eb00 0242 	add.w	r2, r0, r2, lsl #1
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8001850:	3301      	adds	r3, #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8001852:	f502 6280 	add.w	r2, r2, #1024	; 0x400
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8001856:	085b      	lsrs	r3, r3, #1
 8001858:	eb02 0383 	add.w	r3, r2, r3, lsl #2

  for (i = n; i != 0U; i--)
 800185c:	429a      	cmp	r2, r3
 800185e:	d100      	bne.n	8001862 <USB_WritePMA+0x16>
    pdwVal++;
#endif

    pBuf++;
  }
}
 8001860:	4770      	bx	lr
 8001862:	f831 0b02 	ldrh.w	r0, [r1], #2
    *pdwVal = (uint16_t)temp2;
 8001866:	f822 0b04 	strh.w	r0, [r2], #4
 800186a:	e7f7      	b.n	800185c <USB_WritePMA+0x10>

0800186c <USB_EPStartXfer>:
{
 800186c:	b570      	push	{r4, r5, r6, lr}
 800186e:	460d      	mov	r5, r1
  if (ep->is_in == 1U)
 8001870:	7849      	ldrb	r1, [r1, #1]
{
 8001872:	4604      	mov	r4, r0
  if (ep->is_in == 1U)
 8001874:	2901      	cmp	r1, #1
 8001876:	69aa      	ldr	r2, [r5, #24]
 8001878:	692b      	ldr	r3, [r5, #16]
 800187a:	7b28      	ldrb	r0, [r5, #12]
 800187c:	d166      	bne.n	800194c <USB_EPStartXfer+0xe0>
    if (ep->xfer_len > ep->maxpacket)
 800187e:	429a      	cmp	r2, r3
      ep->xfer_len = 0U;
 8001880:	bf9d      	ittte	ls
 8001882:	2300      	movls	r3, #0
 8001884:	61ab      	strls	r3, [r5, #24]
 8001886:	4613      	movls	r3, r2
      ep->xfer_len -= len;
 8001888:	1ad2      	subhi	r2, r2, r3
 800188a:	bf88      	it	hi
 800188c:	61aa      	strhi	r2, [r5, #24]
 800188e:	b29e      	uxth	r6, r3
    if (ep->doublebuffer == 0U)
 8001890:	bb08      	cbnz	r0, 80018d6 <USB_EPStartXfer+0x6a>
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8001892:	4633      	mov	r3, r6
 8001894:	88ea      	ldrh	r2, [r5, #6]
 8001896:	6969      	ldr	r1, [r5, #20]
 8001898:	4620      	mov	r0, r4
 800189a:	f7ff ffd7 	bl	800184c <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800189e:	f8b4 3050 	ldrh.w	r3, [r4, #80]	; 0x50
 80018a2:	782a      	ldrb	r2, [r5, #0]
 80018a4:	b299      	uxth	r1, r3
 80018a6:	f204 4304 	addw	r3, r4, #1028	; 0x404
 80018aa:	0112      	lsls	r2, r2, #4
 80018ac:	440b      	add	r3, r1
 80018ae:	52d6      	strh	r6, [r2, r3]
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 80018b0:	782a      	ldrb	r2, [r5, #0]
 80018b2:	f834 3022 	ldrh.w	r3, [r4, r2, lsl #2]
 80018b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80018ba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80018be:	041b      	lsls	r3, r3, #16
 80018c0:	0c1b      	lsrs	r3, r3, #16
 80018c2:	f083 0330 	eor.w	r3, r3, #48	; 0x30
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80018c6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80018ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80018ce:	f824 3022 	strh.w	r3, [r4, r2, lsl #2]
}
 80018d2:	2000      	movs	r0, #0
 80018d4:	bd70      	pop	{r4, r5, r6, pc}
      if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80018d6:	782b      	ldrb	r3, [r5, #0]
      USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80018d8:	4620      	mov	r0, r4
      if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80018da:	f834 2023 	ldrh.w	r2, [r4, r3, lsl #2]
 80018de:	011b      	lsls	r3, r3, #4
 80018e0:	f012 0f40 	tst.w	r2, #64	; 0x40
        PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80018e4:	f8b4 2050 	ldrh.w	r2, [r4, #80]	; 0x50
 80018e8:	b291      	uxth	r1, r2
 80018ea:	bf15      	itete	ne
 80018ec:	f204 420c 	addwne	r2, r4, #1036	; 0x40c
        PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80018f0:	f204 4204 	addweq	r2, r4, #1028	; 0x404
        PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80018f4:	1852      	addne	r2, r2, r1
        PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80018f6:	1852      	addeq	r2, r2, r1
        PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80018f8:	bf15      	itete	ne
 80018fa:	52d6      	strhne	r6, [r2, r3]
        PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80018fc:	52d6      	strheq	r6, [r2, r3]
        pmabuffer = ep->pmaaddr1;
 80018fe:	896a      	ldrhne	r2, [r5, #10]
        pmabuffer = ep->pmaaddr0;
 8001900:	892a      	ldrheq	r2, [r5, #8]
      USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8001902:	4633      	mov	r3, r6
 8001904:	6969      	ldr	r1, [r5, #20]
 8001906:	f7ff ffa1 	bl	800184c <USB_WritePMA>
      PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 800190a:	786b      	ldrb	r3, [r5, #1]
 800190c:	782a      	ldrb	r2, [r5, #0]
 800190e:	b973      	cbnz	r3, 800192e <USB_EPStartXfer+0xc2>
 8001910:	f834 3022 	ldrh.w	r3, [r4, r2, lsl #2]
 8001914:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001918:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800191c:	041b      	lsls	r3, r3, #16
 800191e:	0c1b      	lsrs	r3, r3, #16
 8001920:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001924:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001928:	f824 3022 	strh.w	r3, [r4, r2, lsl #2]
 800192c:	e7c0      	b.n	80018b0 <USB_EPStartXfer+0x44>
 800192e:	2b01      	cmp	r3, #1
 8001930:	d1be      	bne.n	80018b0 <USB_EPStartXfer+0x44>
 8001932:	f834 3022 	ldrh.w	r3, [r4, r2, lsl #2]
 8001936:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800193a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800193e:	041b      	lsls	r3, r3, #16
 8001940:	0c1b      	lsrs	r3, r3, #16
 8001942:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001946:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800194a:	e7ed      	b.n	8001928 <USB_EPStartXfer+0xbc>
    if (ep->xfer_len > ep->maxpacket)
 800194c:	429a      	cmp	r2, r3
      ep->xfer_len = 0U;
 800194e:	bf93      	iteet	ls
 8001950:	2300      	movls	r3, #0
      ep->xfer_len -= len;
 8001952:	1ad2      	subhi	r2, r2, r3
 8001954:	61aa      	strhi	r2, [r5, #24]
      ep->xfer_len = 0U;
 8001956:	61ab      	strls	r3, [r5, #24]
 8001958:	bf98      	it	ls
 800195a:	4613      	movls	r3, r2
 800195c:	782a      	ldrb	r2, [r5, #0]
    if (ep->doublebuffer == 0U)
 800195e:	b9b0      	cbnz	r0, 800198e <USB_EPStartXfer+0x122>
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8001960:	f8b4 0050 	ldrh.w	r0, [r4, #80]	; 0x50
 8001964:	0112      	lsls	r2, r2, #4
 8001966:	b281      	uxth	r1, r0
 8001968:	f204 400c 	addw	r0, r4, #1036	; 0x40c
 800196c:	4408      	add	r0, r1
 800196e:	2b00      	cmp	r3, #0
 8001970:	d144      	bne.n	80019fc <USB_EPStartXfer+0x190>
 8001972:	5a83      	ldrh	r3, [r0, r2]
 8001974:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8001978:	041b      	lsls	r3, r3, #16
 800197a:	0c1b      	lsrs	r3, r3, #16
 800197c:	5283      	strh	r3, [r0, r2]
 800197e:	5a83      	ldrh	r3, [r0, r2]
 8001980:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001984:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001988:	b29b      	uxth	r3, r3
 800198a:	5283      	strh	r3, [r0, r2]
 800198c:	e03f      	b.n	8001a0e <USB_EPStartXfer+0x1a2>
 800198e:	b9a1      	cbnz	r1, 80019ba <USB_EPStartXfer+0x14e>
 8001990:	f8b4 0050 	ldrh.w	r0, [r4, #80]	; 0x50
 8001994:	0112      	lsls	r2, r2, #4
 8001996:	b281      	uxth	r1, r0
 8001998:	f204 4004 	addw	r0, r4, #1028	; 0x404
 800199c:	4408      	add	r0, r1
 800199e:	b9e3      	cbnz	r3, 80019da <USB_EPStartXfer+0x16e>
 80019a0:	5a81      	ldrh	r1, [r0, r2]
 80019a2:	f421 41f8 	bic.w	r1, r1, #31744	; 0x7c00
 80019a6:	0409      	lsls	r1, r1, #16
 80019a8:	0c09      	lsrs	r1, r1, #16
 80019aa:	5281      	strh	r1, [r0, r2]
 80019ac:	5a81      	ldrh	r1, [r0, r2]
 80019ae:	ea6f 4141 	mvn.w	r1, r1, lsl #17
 80019b2:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 80019b6:	b289      	uxth	r1, r1
 80019b8:	5281      	strh	r1, [r0, r2]
 80019ba:	7869      	ldrb	r1, [r5, #1]
 80019bc:	782a      	ldrb	r2, [r5, #0]
 80019be:	2900      	cmp	r1, #0
 80019c0:	d0ce      	beq.n	8001960 <USB_EPStartXfer+0xf4>
 80019c2:	2901      	cmp	r1, #1
 80019c4:	d123      	bne.n	8001a0e <USB_EPStartXfer+0x1a2>
 80019c6:	f8b4 1050 	ldrh.w	r1, [r4, #80]	; 0x50
 80019ca:	0112      	lsls	r2, r2, #4
 80019cc:	b288      	uxth	r0, r1
 80019ce:	f204 410c 	addw	r1, r4, #1036	; 0x40c
 80019d2:	4401      	add	r1, r0
 80019d4:	b29b      	uxth	r3, r3
 80019d6:	528b      	strh	r3, [r1, r2]
 80019d8:	e019      	b.n	8001a0e <USB_EPStartXfer+0x1a2>
 80019da:	2b3e      	cmp	r3, #62	; 0x3e
 80019dc:	d805      	bhi.n	80019ea <USB_EPStartXfer+0x17e>
 80019de:	0859      	lsrs	r1, r3, #1
 80019e0:	07de      	lsls	r6, r3, #31
 80019e2:	bf48      	it	mi
 80019e4:	3101      	addmi	r1, #1
 80019e6:	0289      	lsls	r1, r1, #10
 80019e8:	e7e5      	b.n	80019b6 <USB_EPStartXfer+0x14a>
 80019ea:	095e      	lsrs	r6, r3, #5
 80019ec:	06d9      	lsls	r1, r3, #27
 80019ee:	4912      	ldr	r1, [pc, #72]	; (8001a38 <USB_EPStartXfer+0x1cc>)
 80019f0:	bf08      	it	eq
 80019f2:	f106 36ff 	addeq.w	r6, r6, #4294967295
 80019f6:	ea41 2186 	orr.w	r1, r1, r6, lsl #10
 80019fa:	e7dc      	b.n	80019b6 <USB_EPStartXfer+0x14a>
 80019fc:	2b3e      	cmp	r3, #62	; 0x3e
 80019fe:	d812      	bhi.n	8001a26 <USB_EPStartXfer+0x1ba>
 8001a00:	0859      	lsrs	r1, r3, #1
 8001a02:	07de      	lsls	r6, r3, #31
 8001a04:	bf48      	it	mi
 8001a06:	3101      	addmi	r1, #1
 8001a08:	0289      	lsls	r1, r1, #10
 8001a0a:	b289      	uxth	r1, r1
 8001a0c:	5281      	strh	r1, [r0, r2]
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8001a0e:	782a      	ldrb	r2, [r5, #0]
 8001a10:	f834 3022 	ldrh.w	r3, [r4, r2, lsl #2]
 8001a14:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001a18:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001a1c:	041b      	lsls	r3, r3, #16
 8001a1e:	0c1b      	lsrs	r3, r3, #16
 8001a20:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8001a24:	e74f      	b.n	80018c6 <USB_EPStartXfer+0x5a>
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8001a26:	0959      	lsrs	r1, r3, #5
 8001a28:	06db      	lsls	r3, r3, #27
 8001a2a:	4b03      	ldr	r3, [pc, #12]	; (8001a38 <USB_EPStartXfer+0x1cc>)
 8001a2c:	bf08      	it	eq
 8001a2e:	f101 31ff 	addeq.w	r1, r1, #4294967295
 8001a32:	ea43 2381 	orr.w	r3, r3, r1, lsl #10
 8001a36:	e7a7      	b.n	8001988 <USB_EPStartXfer+0x11c>
 8001a38:	ffff8000 	.word	0xffff8000

08001a3c <USB_ReadPMA>:
  uint32_t BaseAddr = (uint32_t)USBx;
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8001a3c:	eb00 0242 	add.w	r2, r0, r2, lsl #1
{
 8001a40:	b5f0      	push	{r4, r5, r6, r7, lr}
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8001a42:	f502 6280 	add.w	r2, r2, #1024	; 0x400
  uint32_t n = (uint32_t)wNBytes >> 1;
 8001a46:	085d      	lsrs	r5, r3, #1
 8001a48:	4608      	mov	r0, r1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8001a4a:	4617      	mov	r7, r2

  for (i = n; i != 0U; i--)
 8001a4c:	462e      	mov	r6, r5
 8001a4e:	3002      	adds	r0, #2
 8001a50:	b936      	cbnz	r6, 8001a60 <USB_ReadPMA+0x24>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8001a52:	07db      	lsls	r3, r3, #31
  {
    temp = *pdwVal;
 8001a54:	bf44      	itt	mi
 8001a56:	f832 3025 	ldrhmi.w	r3, [r2, r5, lsl #2]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8001a5a:	f801 3015 	strbmi.w	r3, [r1, r5, lsl #1]
 8001a5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    temp = *(__IO uint16_t *)pdwVal;
 8001a60:	f837 4b04 	ldrh.w	r4, [r7], #4
  for (i = n; i != 0U; i--)
 8001a64:	3e01      	subs	r6, #1
    temp = *(__IO uint16_t *)pdwVal;
 8001a66:	b2a4      	uxth	r4, r4
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8001a68:	f800 4c02 	strb.w	r4, [r0, #-2]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8001a6c:	0a24      	lsrs	r4, r4, #8
 8001a6e:	f800 4c01 	strb.w	r4, [r0, #-1]
 8001a72:	e7ec      	b.n	8001a4e <USB_ReadPMA+0x12>

08001a74 <USBD_CDC_EP0_RxReady>:
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8001a74:	f8d0 32bc 	ldr.w	r3, [r0, #700]	; 0x2bc
{
 8001a78:	b510      	push	{r4, lr}
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8001a7a:	f8d0 42b8 	ldr.w	r4, [r0, #696]	; 0x2b8
  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8001a7e:	b15b      	cbz	r3, 8001a98 <USBD_CDC_EP0_RxReady+0x24>
 8001a80:	f894 0200 	ldrb.w	r0, [r4, #512]	; 0x200
 8001a84:	28ff      	cmp	r0, #255	; 0xff
 8001a86:	d007      	beq.n	8001a98 <USBD_CDC_EP0_RxReady+0x24>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8001a88:	689b      	ldr	r3, [r3, #8]
 8001a8a:	f894 2201 	ldrb.w	r2, [r4, #513]	; 0x201
 8001a8e:	4621      	mov	r1, r4
 8001a90:	4798      	blx	r3
                                                      (uint8_t *)(void *)hcdc->data,
                                                      (uint16_t)hcdc->CmdLength);
    hcdc->CmdOpCode = 0xFFU;
 8001a92:	23ff      	movs	r3, #255	; 0xff
 8001a94:	f884 3200 	strb.w	r3, [r4, #512]	; 0x200

  }
  return USBD_OK;
}
 8001a98:	2000      	movs	r0, #0
 8001a9a:	bd10      	pop	{r4, pc}

08001a9c <USBD_CDC_GetFSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8001a9c:	2343      	movs	r3, #67	; 0x43
 8001a9e:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_CfgFSDesc;
}
 8001aa0:	4800      	ldr	r0, [pc, #0]	; (8001aa4 <USBD_CDC_GetFSCfgDesc+0x8>)
 8001aa2:	4770      	bx	lr
 8001aa4:	20000040 	.word	0x20000040

08001aa8 <USBD_CDC_GetHSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8001aa8:	2343      	movs	r3, #67	; 0x43
 8001aaa:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_CfgHSDesc;
}
 8001aac:	4800      	ldr	r0, [pc, #0]	; (8001ab0 <USBD_CDC_GetHSCfgDesc+0x8>)
 8001aae:	4770      	bx	lr
 8001ab0:	20000084 	.word	0x20000084

08001ab4 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8001ab4:	2343      	movs	r3, #67	; 0x43
 8001ab6:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
}
 8001ab8:	4800      	ldr	r0, [pc, #0]	; (8001abc <USBD_CDC_GetOtherSpeedCfgDesc+0x8>)
 8001aba:	4770      	bx	lr
 8001abc:	200000d4 	.word	0x200000d4

08001ac0 <USBD_CDC_GetDeviceQualifierDescriptor>:
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8001ac0:	230a      	movs	r3, #10
 8001ac2:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_DeviceQualifierDesc;
}
 8001ac4:	4800      	ldr	r0, [pc, #0]	; (8001ac8 <USBD_CDC_GetDeviceQualifierDescriptor+0x8>)
 8001ac6:	4770      	bx	lr
 8001ac8:	200000c8 	.word	0x200000c8

08001acc <USBD_CDC_DataOut>:
{
 8001acc:	b538      	push	{r3, r4, r5, lr}
 8001ace:	4605      	mov	r5, r0
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8001ad0:	f8d0 42b8 	ldr.w	r4, [r0, #696]	; 0x2b8
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8001ad4:	f000 ffa4 	bl	8002a20 <USBD_LL_GetRxDataSize>
  if (pdev->pClassData != NULL)
 8001ad8:	f8d5 32b8 	ldr.w	r3, [r5, #696]	; 0x2b8
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8001adc:	f8c4 020c 	str.w	r0, [r4, #524]	; 0x20c
  if (pdev->pClassData != NULL)
 8001ae0:	b14b      	cbz	r3, 8001af6 <USBD_CDC_DataOut+0x2a>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8001ae2:	f8d5 32bc 	ldr.w	r3, [r5, #700]	; 0x2bc
 8001ae6:	f504 7103 	add.w	r1, r4, #524	; 0x20c
 8001aea:	68db      	ldr	r3, [r3, #12]
 8001aec:	f8d4 0204 	ldr.w	r0, [r4, #516]	; 0x204
 8001af0:	4798      	blx	r3
    return USBD_OK;
 8001af2:	2000      	movs	r0, #0
 8001af4:	bd38      	pop	{r3, r4, r5, pc}
    return USBD_FAIL;
 8001af6:	2002      	movs	r0, #2
}
 8001af8:	bd38      	pop	{r3, r4, r5, pc}

08001afa <USBD_CDC_DataIn>:
{
 8001afa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8001afc:	f8d0 62b8 	ldr.w	r6, [r0, #696]	; 0x2b8
  if (pdev->pClassData != NULL)
 8001b00:	b1ce      	cbz	r6, 8001b36 <USBD_CDC_DataIn+0x3c>
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8001b02:	2314      	movs	r3, #20
 8001b04:	fb03 0301 	mla	r3, r3, r1, r0
 8001b08:	69da      	ldr	r2, [r3, #28]
 8001b0a:	b182      	cbz	r2, 8001b2e <USBD_CDC_DataIn+0x34>
 8001b0c:	f8d0 42c0 	ldr.w	r4, [r0, #704]	; 0x2c0
 8001b10:	eb04 1441 	add.w	r4, r4, r1, lsl #5
 8001b14:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 8001b16:	fbb2 f4f5 	udiv	r4, r2, r5
 8001b1a:	fb05 2414 	mls	r4, r5, r4, r2
 8001b1e:	b934      	cbnz	r4, 8001b2e <USBD_CDC_DataIn+0x34>
      pdev->ep_in[epnum].total_length = 0U;
 8001b20:	61dc      	str	r4, [r3, #28]
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8001b22:	4622      	mov	r2, r4
 8001b24:	4623      	mov	r3, r4
 8001b26:	f000 ff5f 	bl	80029e8 <USBD_LL_Transmit>
    return USBD_OK;
 8001b2a:	4620      	mov	r0, r4
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8001b2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      hcdc->TxState = 0U;
 8001b2e:	2000      	movs	r0, #0
 8001b30:	f8c6 0214 	str.w	r0, [r6, #532]	; 0x214
 8001b34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return USBD_FAIL;
 8001b36:	2002      	movs	r0, #2
}
 8001b38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08001b3a <USBD_CDC_Setup>:
{
 8001b3a:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  uint8_t ifalt = 0U;
 8001b3e:	f04f 0800 	mov.w	r8, #0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8001b42:	780a      	ldrb	r2, [r1, #0]
{
 8001b44:	4605      	mov	r5, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8001b46:	f012 0460 	ands.w	r4, r2, #96	; 0x60
{
 8001b4a:	460e      	mov	r6, r1
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8001b4c:	f8d0 72b8 	ldr.w	r7, [r0, #696]	; 0x2b8
  uint8_t ifalt = 0U;
 8001b50:	f88d 8005 	strb.w	r8, [sp, #5]
  uint16_t status_info = 0U;
 8001b54:	f8ad 8006 	strh.w	r8, [sp, #6]
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8001b58:	d028      	beq.n	8001bac <USBD_CDC_Setup+0x72>
 8001b5a:	2c20      	cmp	r4, #32
 8001b5c:	d147      	bne.n	8001bee <USBD_CDC_Setup+0xb4>
      if (req->wLength)
 8001b5e:	88cc      	ldrh	r4, [r1, #6]
 8001b60:	784b      	ldrb	r3, [r1, #1]
 8001b62:	b1e4      	cbz	r4, 8001b9e <USBD_CDC_Setup+0x64>
        if (req->bmRequest & 0x80U)
 8001b64:	0612      	lsls	r2, r2, #24
 8001b66:	d511      	bpl.n	8001b8c <USBD_CDC_Setup+0x52>
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8001b68:	f8d0 22bc 	ldr.w	r2, [r0, #700]	; 0x2bc
 8001b6c:	4639      	mov	r1, r7
 8001b6e:	f8d2 9008 	ldr.w	r9, [r2, #8]
 8001b72:	4618      	mov	r0, r3
 8001b74:	4622      	mov	r2, r4
 8001b76:	47c8      	blx	r9
          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8001b78:	88f2      	ldrh	r2, [r6, #6]
 8001b7a:	4639      	mov	r1, r7
 8001b7c:	4628      	mov	r0, r5
 8001b7e:	f000 fc4c 	bl	800241a <USBD_CtlSendData>
  uint8_t ret = USBD_OK;
 8001b82:	4644      	mov	r4, r8
}
 8001b84:	4620      	mov	r0, r4
 8001b86:	b003      	add	sp, #12
 8001b88:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
          hcdc->CmdOpCode = req->bRequest;
 8001b8c:	f887 3200 	strb.w	r3, [r7, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8001b90:	f887 4201 	strb.w	r4, [r7, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8001b94:	4622      	mov	r2, r4
 8001b96:	4639      	mov	r1, r7
 8001b98:	f000 fc54 	bl	8002444 <USBD_CtlPrepareRx>
 8001b9c:	e7f1      	b.n	8001b82 <USBD_CDC_Setup+0x48>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8001b9e:	f8d0 22bc 	ldr.w	r2, [r0, #700]	; 0x2bc
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	6895      	ldr	r5, [r2, #8]
 8001ba6:	4622      	mov	r2, r4
 8001ba8:	47a8      	blx	r5
 8001baa:	e7eb      	b.n	8001b84 <USBD_CDC_Setup+0x4a>
      switch (req->bRequest)
 8001bac:	784f      	ldrb	r7, [r1, #1]
 8001bae:	2f0a      	cmp	r7, #10
 8001bb0:	d00d      	beq.n	8001bce <USBD_CDC_Setup+0x94>
 8001bb2:	2f0b      	cmp	r7, #11
 8001bb4:	d015      	beq.n	8001be2 <USBD_CDC_Setup+0xa8>
 8001bb6:	b9d7      	cbnz	r7, 8001bee <USBD_CDC_Setup+0xb4>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8001bb8:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8001bbc:	2b03      	cmp	r3, #3
 8001bbe:	d114      	bne.n	8001bea <USBD_CDC_Setup+0xb0>
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8001bc0:	2202      	movs	r2, #2
 8001bc2:	f10d 0106 	add.w	r1, sp, #6
 8001bc6:	f000 fc28 	bl	800241a <USBD_CtlSendData>
  uint8_t ret = USBD_OK;
 8001bca:	463c      	mov	r4, r7
 8001bcc:	e7da      	b.n	8001b84 <USBD_CDC_Setup+0x4a>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8001bce:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8001bd2:	2b03      	cmp	r3, #3
 8001bd4:	d109      	bne.n	8001bea <USBD_CDC_Setup+0xb0>
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8001bd6:	2201      	movs	r2, #1
 8001bd8:	f10d 0105 	add.w	r1, sp, #5
 8001bdc:	f000 fc1d 	bl	800241a <USBD_CtlSendData>
 8001be0:	e7d0      	b.n	8001b84 <USBD_CDC_Setup+0x4a>
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8001be2:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8001be6:	2b03      	cmp	r3, #3
 8001be8:	d0cc      	beq.n	8001b84 <USBD_CDC_Setup+0x4a>
            USBD_CtlError(pdev, req);
 8001bea:	4631      	mov	r1, r6
 8001bec:	4628      	mov	r0, r5
      USBD_CtlError(pdev, req);
 8001bee:	f000 fbed 	bl	80023cc <USBD_CtlError>
      ret = USBD_FAIL;
 8001bf2:	2402      	movs	r4, #2
      break;
 8001bf4:	e7c6      	b.n	8001b84 <USBD_CDC_Setup+0x4a>

08001bf6 <USBD_CDC_DeInit>:
{
 8001bf6:	b538      	push	{r3, r4, r5, lr}
 8001bf8:	4604      	mov	r4, r0
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8001bfa:	2500      	movs	r5, #0
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8001bfc:	2181      	movs	r1, #129	; 0x81
 8001bfe:	f000 feab 	bl	8002958 <USBD_LL_CloseEP>
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8001c02:	2101      	movs	r1, #1
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8001c04:	62e5      	str	r5, [r4, #44]	; 0x2c
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8001c06:	4620      	mov	r0, r4
 8001c08:	f000 fea6 	bl	8002958 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8001c0c:	f8c4 516c 	str.w	r5, [r4, #364]	; 0x16c
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8001c10:	2182      	movs	r1, #130	; 0x82
 8001c12:	4620      	mov	r0, r4
 8001c14:	f000 fea0 	bl	8002958 <USBD_LL_CloseEP>
  if (pdev->pClassData != NULL)
 8001c18:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8001c1c:	6425      	str	r5, [r4, #64]	; 0x40
  if (pdev->pClassData != NULL)
 8001c1e:	b14b      	cbz	r3, 8001c34 <USBD_CDC_DeInit+0x3e>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8001c20:	f8d4 32bc 	ldr.w	r3, [r4, #700]	; 0x2bc
 8001c24:	685b      	ldr	r3, [r3, #4]
 8001c26:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8001c28:	f8d4 02b8 	ldr.w	r0, [r4, #696]	; 0x2b8
 8001c2c:	f000 ff00 	bl	8002a30 <USBD_static_free>
    pdev->pClassData = NULL;
 8001c30:	f8c4 52b8 	str.w	r5, [r4, #696]	; 0x2b8
}
 8001c34:	2000      	movs	r0, #0
 8001c36:	bd38      	pop	{r3, r4, r5, pc}

08001c38 <USBD_CDC_Init>:
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8001c38:	7c03      	ldrb	r3, [r0, #16]
{
 8001c3a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001c3e:	4604      	mov	r4, r0
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8001c40:	bbcb      	cbnz	r3, 8001cb6 <USBD_CDC_Init+0x7e>
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8001c42:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001c46:	2202      	movs	r2, #2
 8001c48:	2181      	movs	r1, #129	; 0x81
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8001c4a:	2501      	movs	r5, #1
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8001c4c:	f000 fe74 	bl	8002938 <USBD_LL_OpenEP>
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8001c50:	f44f 7300 	mov.w	r3, #512	; 0x200
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8001c54:	62e5      	str	r5, [r4, #44]	; 0x2c
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8001c56:	4629      	mov	r1, r5
 8001c58:	2202      	movs	r2, #2
 8001c5a:	4620      	mov	r0, r4
 8001c5c:	f000 fe6c 	bl	8002938 <USBD_LL_OpenEP>
    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8001c60:	f8c4 516c 	str.w	r5, [r4, #364]	; 0x16c
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8001c64:	2501      	movs	r5, #1
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8001c66:	2308      	movs	r3, #8
 8001c68:	2203      	movs	r2, #3
 8001c6a:	2182      	movs	r1, #130	; 0x82
 8001c6c:	4620      	mov	r0, r4
 8001c6e:	f000 fe63 	bl	8002938 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8001c72:	6425      	str	r5, [r4, #64]	; 0x40
  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8001c74:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8001c78:	f000 fed6 	bl	8002a28 <USBD_static_malloc>
 8001c7c:	4606      	mov	r6, r0
 8001c7e:	f8c4 02b8 	str.w	r0, [r4, #696]	; 0x2b8
  if (pdev->pClassData == NULL)
 8001c82:	b358      	cbz	r0, 8001cdc <USBD_CDC_Init+0xa4>
    hcdc->TxState = 0U;
 8001c84:	2700      	movs	r7, #0
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8001c86:	f8d4 32bc 	ldr.w	r3, [r4, #700]	; 0x2bc
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	4798      	blx	r3
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8001c8e:	f894 8010 	ldrb.w	r8, [r4, #16]
    hcdc->TxState = 0U;
 8001c92:	f8c6 7214 	str.w	r7, [r6, #532]	; 0x214
    hcdc->RxState = 0U;
 8001c96:	f8c6 7218 	str.w	r7, [r6, #536]	; 0x218
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8001c9a:	f1b8 0f00 	cmp.w	r8, #0
 8001c9e:	d113      	bne.n	8001cc8 <USBD_CDC_Init+0x90>
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8001ca0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001ca4:	f8d6 2204 	ldr.w	r2, [r6, #516]	; 0x204
 8001ca8:	4629      	mov	r1, r5
 8001caa:	4620      	mov	r0, r4
 8001cac:	f000 feaa 	bl	8002a04 <USBD_LL_PrepareReceive>
  uint8_t ret = 0U;
 8001cb0:	4640      	mov	r0, r8
 8001cb2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8001cb6:	2501      	movs	r5, #1
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8001cb8:	2340      	movs	r3, #64	; 0x40
 8001cba:	2202      	movs	r2, #2
 8001cbc:	2181      	movs	r1, #129	; 0x81
 8001cbe:	f000 fe3b 	bl	8002938 <USBD_LL_OpenEP>
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8001cc2:	62e5      	str	r5, [r4, #44]	; 0x2c
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8001cc4:	2340      	movs	r3, #64	; 0x40
 8001cc6:	e7c6      	b.n	8001c56 <USBD_CDC_Init+0x1e>
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8001cc8:	2340      	movs	r3, #64	; 0x40
 8001cca:	f8d6 2204 	ldr.w	r2, [r6, #516]	; 0x204
 8001cce:	4629      	mov	r1, r5
 8001cd0:	4620      	mov	r0, r4
 8001cd2:	f000 fe97 	bl	8002a04 <USBD_LL_PrepareReceive>
  uint8_t ret = 0U;
 8001cd6:	4638      	mov	r0, r7
 8001cd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ret = 1U;
 8001cdc:	4628      	mov	r0, r5
}
 8001cde:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08001ce2 <USBD_CDC_RegisterInterface>:
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
  uint8_t  ret = USBD_FAIL;

  if (fops != NULL)
 8001ce2:	b119      	cbz	r1, 8001cec <USBD_CDC_RegisterInterface+0xa>
  {
    pdev->pUserData = fops;
 8001ce4:	f8c0 12bc 	str.w	r1, [r0, #700]	; 0x2bc
    ret = USBD_OK;
 8001ce8:	2000      	movs	r0, #0
 8001cea:	4770      	bx	lr
  uint8_t  ret = USBD_FAIL;
 8001cec:	2002      	movs	r0, #2
  }

  return ret;
}
 8001cee:	4770      	bx	lr

08001cf0 <USBD_CDC_SetTxBuffer>:
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8001cf0:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8

  hcdc->TxBuffer = pbuff;
  hcdc->TxLength = length;

  return USBD_OK;
}
 8001cf4:	2000      	movs	r0, #0
  hcdc->TxBuffer = pbuff;
 8001cf6:	f8c3 1208 	str.w	r1, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8001cfa:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
}
 8001cfe:	4770      	bx	lr

08001d00 <USBD_CDC_SetRxBuffer>:
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;

  hcdc->RxBuffer = pbuff;
 8001d00:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8

  return USBD_OK;
}
 8001d04:	2000      	movs	r0, #0
  hcdc->RxBuffer = pbuff;
 8001d06:	f8c3 1204 	str.w	r1, [r3, #516]	; 0x204
}
 8001d0a:	4770      	bx	lr

08001d0c <USBD_CDC_ReceivePacket>:
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8001d0c:	f8d0 22b8 	ldr.w	r2, [r0, #696]	; 0x2b8
{
 8001d10:	b510      	push	{r4, lr}

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8001d12:	b162      	cbz	r2, 8001d2e <USBD_CDC_ReceivePacket+0x22>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8001d14:	7c04      	ldrb	r4, [r0, #16]
 8001d16:	b944      	cbnz	r4, 8001d2a <USBD_CDC_ReceivePacket+0x1e>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8001d18:	f44f 7300 	mov.w	r3, #512	; 0x200
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8001d1c:	f8d2 2204 	ldr.w	r2, [r2, #516]	; 0x204
 8001d20:	2101      	movs	r1, #1
 8001d22:	f000 fe6f 	bl	8002a04 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8001d26:	2000      	movs	r0, #0
 8001d28:	bd10      	pop	{r4, pc}
      USBD_LL_PrepareReceive(pdev,
 8001d2a:	2340      	movs	r3, #64	; 0x40
 8001d2c:	e7f6      	b.n	8001d1c <USBD_CDC_ReceivePacket+0x10>
  }
  else
  {
    return USBD_FAIL;
 8001d2e:	2002      	movs	r0, #2
  }
}
 8001d30:	bd10      	pop	{r4, pc}
	...

08001d34 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8001d34:	b508      	push	{r3, lr}
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8001d36:	b950      	cbnz	r0, 8001d4e <USBD_Init+0x1a>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
 8001d38:	480d      	ldr	r0, [pc, #52]	; (8001d70 <USBD_Init+0x3c>)
 8001d3a:	f000 ff4b 	bl	8002bd4 <iprintf>
 8001d3e:	480d      	ldr	r0, [pc, #52]	; (8001d74 <USBD_Init+0x40>)
 8001d40:	f000 ff48 	bl	8002bd4 <iprintf>
 8001d44:	200a      	movs	r0, #10
 8001d46:	f000 ff5d 	bl	8002c04 <putchar>
#endif
    return USBD_FAIL;
 8001d4a:	2002      	movs	r0, #2
 8001d4c:	bd08      	pop	{r3, pc}
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8001d4e:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8001d52:	b113      	cbz	r3, 8001d5a <USBD_Init+0x26>
  {
    pdev->pClass = NULL;
 8001d54:	2300      	movs	r3, #0
 8001d56:	f8c0 32b4 	str.w	r3, [r0, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8001d5a:	b109      	cbz	r1, 8001d60 <USBD_Init+0x2c>
  {
    pdev->pDesc = pdesc;
 8001d5c:	f8c0 12b0 	str.w	r1, [r0, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8001d60:	2301      	movs	r3, #1
  pdev->id = id;
 8001d62:	7002      	strb	r2, [r0, #0]
  pdev->dev_state = USBD_STATE_DEFAULT;
 8001d64:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8001d68:	f000 fd98 	bl	800289c <USBD_LL_Init>

  return USBD_OK;
 8001d6c:	2000      	movs	r0, #0
}
 8001d6e:	bd08      	pop	{r3, pc}
 8001d70:	08003a98 	.word	0x08003a98
 8001d74:	08003aa0 	.word	0x08003aa0

08001d78 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8001d78:	b508      	push	{r3, lr}
  USBD_StatusTypeDef status = USBD_OK;
  if (pclass != NULL)
 8001d7a:	b119      	cbz	r1, 8001d84 <USBD_RegisterClass+0xc>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8001d7c:	f8c0 12b4 	str.w	r1, [r0, #692]	; 0x2b4
    status = USBD_OK;
 8001d80:	2000      	movs	r0, #0
 8001d82:	bd08      	pop	{r3, pc}
  }
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
 8001d84:	4805      	ldr	r0, [pc, #20]	; (8001d9c <USBD_RegisterClass+0x24>)
 8001d86:	f000 ff25 	bl	8002bd4 <iprintf>
 8001d8a:	4805      	ldr	r0, [pc, #20]	; (8001da0 <USBD_RegisterClass+0x28>)
 8001d8c:	f000 ff22 	bl	8002bd4 <iprintf>
 8001d90:	200a      	movs	r0, #10
 8001d92:	f000 ff37 	bl	8002c04 <putchar>
#endif
    status = USBD_FAIL;
 8001d96:	2002      	movs	r0, #2
  }

  return status;
}
 8001d98:	bd08      	pop	{r3, pc}
 8001d9a:	bf00      	nop
 8001d9c:	08003a98 	.word	0x08003a98
 8001da0:	08003ab6 	.word	0x08003ab6

08001da4 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8001da4:	b508      	push	{r3, lr}
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8001da6:	f000 fdb9 	bl	800291c <USBD_LL_Start>

  return USBD_OK;
}
 8001daa:	2000      	movs	r0, #0
 8001dac:	bd08      	pop	{r3, pc}

08001dae <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8001dae:	b508      	push	{r3, lr}
  USBD_StatusTypeDef ret = USBD_FAIL;

  if (pdev->pClass != NULL)
 8001db0:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8001db4:	b90b      	cbnz	r3, 8001dba <USBD_SetClassConfig+0xc>
  USBD_StatusTypeDef ret = USBD_FAIL;
 8001db6:	2002      	movs	r0, #2
 8001db8:	bd08      	pop	{r3, pc}
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	4798      	blx	r3
 8001dbe:	2800      	cmp	r0, #0
 8001dc0:	d1f9      	bne.n	8001db6 <USBD_SetClassConfig+0x8>
      ret = USBD_OK;
    }
  }

  return ret;
}
 8001dc2:	bd08      	pop	{r3, pc}

08001dc4 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8001dc4:	b508      	push	{r3, lr}
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8001dc6:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8001dca:	685b      	ldr	r3, [r3, #4]
 8001dcc:	4798      	blx	r3

  return USBD_OK;
}
 8001dce:	2000      	movs	r0, #0
 8001dd0:	bd08      	pop	{r3, pc}

08001dd2 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8001dd2:	b538      	push	{r3, r4, r5, lr}
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8001dd4:	f500 752a 	add.w	r5, r0, #680	; 0x2a8
{
 8001dd8:	4604      	mov	r4, r0
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8001dda:	4628      	mov	r0, r5
 8001ddc:	f000 fae2 	bl	80023a4 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8001de0:	2301      	movs	r3, #1

  pdev->ep0_data_len = pdev->request.wLength;

  switch (pdev->request.bmRequest & 0x1FU)
 8001de2:	f894 12a8 	ldrb.w	r1, [r4, #680]	; 0x2a8
  pdev->ep0_state = USBD_EP0_SETUP;
 8001de6:	f8c4 3294 	str.w	r3, [r4, #660]	; 0x294
  pdev->ep0_data_len = pdev->request.wLength;
 8001dea:	f8b4 32ae 	ldrh.w	r3, [r4, #686]	; 0x2ae
 8001dee:	f8c4 3298 	str.w	r3, [r4, #664]	; 0x298
  switch (pdev->request.bmRequest & 0x1FU)
 8001df2:	f001 031f 	and.w	r3, r1, #31
 8001df6:	2b01      	cmp	r3, #1
 8001df8:	d00e      	beq.n	8001e18 <USBD_LL_SetupStage+0x46>
 8001dfa:	d307      	bcc.n	8001e0c <USBD_LL_SetupStage+0x3a>
 8001dfc:	2b02      	cmp	r3, #2
 8001dfe:	d010      	beq.n	8001e22 <USBD_LL_SetupStage+0x50>
    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
      break;

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8001e00:	f001 0180 	and.w	r1, r1, #128	; 0x80
 8001e04:	4620      	mov	r0, r4
 8001e06:	f000 fdb5 	bl	8002974 <USBD_LL_StallEP>
      break;
 8001e0a:	e003      	b.n	8001e14 <USBD_LL_SetupStage+0x42>
      USBD_StdDevReq(pdev, &pdev->request);
 8001e0c:	4629      	mov	r1, r5
 8001e0e:	4620      	mov	r0, r4
 8001e10:	f000 f8f6 	bl	8002000 <USBD_StdDevReq>
  }

  return USBD_OK;
}
 8001e14:	2000      	movs	r0, #0
 8001e16:	bd38      	pop	{r3, r4, r5, pc}
      USBD_StdItfReq(pdev, &pdev->request);
 8001e18:	4629      	mov	r1, r5
 8001e1a:	4620      	mov	r0, r4
 8001e1c:	f000 fa14 	bl	8002248 <USBD_StdItfReq>
      break;
 8001e20:	e7f8      	b.n	8001e14 <USBD_LL_SetupStage+0x42>
      USBD_StdEPReq(pdev, &pdev->request);
 8001e22:	4629      	mov	r1, r5
 8001e24:	4620      	mov	r0, r4
 8001e26:	f000 fa34 	bl	8002292 <USBD_StdEPReq>
      break;
 8001e2a:	e7f3      	b.n	8001e14 <USBD_LL_SetupStage+0x42>

08001e2c <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8001e2c:	b570      	push	{r4, r5, r6, lr}
 8001e2e:	4605      	mov	r5, r0
 8001e30:	4616      	mov	r6, r2
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8001e32:	bb49      	cbnz	r1, 8001e88 <USBD_LL_DataOutStage+0x5c>
  {
    pep = &pdev->ep_out[0];

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8001e34:	f8d0 3294 	ldr.w	r3, [r0, #660]	; 0x294
 8001e38:	2b03      	cmp	r3, #3
 8001e3a:	d11e      	bne.n	8001e7a <USBD_LL_DataOutStage+0x4e>
    {
      if (pep->rem_length > pep->maxpacket)
 8001e3c:	f8d0 3160 	ldr.w	r3, [r0, #352]	; 0x160
 8001e40:	f8d0 2164 	ldr.w	r2, [r0, #356]	; 0x164
 8001e44:	4293      	cmp	r3, r2
 8001e46:	d90b      	bls.n	8001e60 <USBD_LL_DataOutStage+0x34>
      {
        pep->rem_length -= pep->maxpacket;
 8001e48:	1a9b      	subs	r3, r3, r2

        USBD_CtlContinueRx(pdev, pdata,
 8001e4a:	429a      	cmp	r2, r3
        pep->rem_length -= pep->maxpacket;
 8001e4c:	f8c0 3160 	str.w	r3, [r0, #352]	; 0x160
        USBD_CtlContinueRx(pdev, pdata,
 8001e50:	bf8c      	ite	hi
 8001e52:	b29a      	uxthhi	r2, r3
 8001e54:	b292      	uxthls	r2, r2
 8001e56:	4631      	mov	r1, r6
 8001e58:	f000 fb03 	bl	8002462 <USBD_CtlContinueRx>
  {
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
 8001e5c:	2000      	movs	r0, #0
    pdev->pClass->DataOut(pdev, epnum);
 8001e5e:	bd70      	pop	{r4, r5, r6, pc}
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8001e60:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8001e64:	691b      	ldr	r3, [r3, #16]
 8001e66:	b123      	cbz	r3, 8001e72 <USBD_LL_DataOutStage+0x46>
 8001e68:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 8001e6c:	2a03      	cmp	r2, #3
 8001e6e:	d100      	bne.n	8001e72 <USBD_LL_DataOutStage+0x46>
          pdev->pClass->EP0_RxReady(pdev);
 8001e70:	4798      	blx	r3
        USBD_CtlSendStatus(pdev);
 8001e72:	4628      	mov	r0, r5
 8001e74:	f000 fafd 	bl	8002472 <USBD_CtlSendStatus>
 8001e78:	e7f0      	b.n	8001e5c <USBD_LL_DataOutStage+0x30>
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8001e7a:	2b05      	cmp	r3, #5
 8001e7c:	d1ee      	bne.n	8001e5c <USBD_LL_DataOutStage+0x30>
        pdev->ep0_state = USBD_EP0_IDLE;
 8001e7e:	f8c5 1294 	str.w	r1, [r5, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8001e82:	f000 fd77 	bl	8002974 <USBD_LL_StallEP>
 8001e86:	e7e9      	b.n	8001e5c <USBD_LL_DataOutStage+0x30>
  else if ((pdev->pClass->DataOut != NULL) &&
 8001e88:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8001e8c:	699b      	ldr	r3, [r3, #24]
 8001e8e:	b12b      	cbz	r3, 8001e9c <USBD_LL_DataOutStage+0x70>
 8001e90:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 8001e94:	2a03      	cmp	r2, #3
 8001e96:	d101      	bne.n	8001e9c <USBD_LL_DataOutStage+0x70>
    pdev->pClass->DataOut(pdev, epnum);
 8001e98:	4798      	blx	r3
 8001e9a:	e7df      	b.n	8001e5c <USBD_LL_DataOutStage+0x30>
    return USBD_FAIL;
 8001e9c:	2002      	movs	r0, #2
}
 8001e9e:	bd70      	pop	{r4, r5, r6, pc}

08001ea0 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8001ea0:	b570      	push	{r4, r5, r6, lr}
 8001ea2:	4613      	mov	r3, r2
 8001ea4:	4604      	mov	r4, r0
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8001ea6:	460e      	mov	r6, r1
 8001ea8:	2900      	cmp	r1, #0
 8001eaa:	d147      	bne.n	8001f3c <USBD_LL_DataInStage+0x9c>
  {
    pep = &pdev->ep_in[0];

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8001eac:	f8d0 2294 	ldr.w	r2, [r0, #660]	; 0x294
 8001eb0:	2a02      	cmp	r2, #2
 8001eb2:	d13c      	bne.n	8001f2e <USBD_LL_DataInStage+0x8e>
    {
      if (pep->rem_length > pep->maxpacket)
 8001eb4:	6a05      	ldr	r5, [r0, #32]
 8001eb6:	6a42      	ldr	r2, [r0, #36]	; 0x24
 8001eb8:	4295      	cmp	r5, r2
 8001eba:	d913      	bls.n	8001ee4 <USBD_LL_DataInStage+0x44>
      {
        pep->rem_length -= pep->maxpacket;
 8001ebc:	1aaa      	subs	r2, r5, r2
 8001ebe:	6202      	str	r2, [r0, #32]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8001ec0:	4619      	mov	r1, r3
 8001ec2:	b292      	uxth	r2, r2
 8001ec4:	f000 fab6 	bl	8002434 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8001ec8:	4633      	mov	r3, r6
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
          pdev->ep0_data_len = 0U;

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8001eca:	461a      	mov	r2, r3
 8001ecc:	4619      	mov	r1, r3
 8001ece:	4620      	mov	r0, r4
 8001ed0:	f000 fd98 	bl	8002a04 <USBD_LL_PrepareReceive>
      {
        USBD_LL_StallEP(pdev, 0x80U);
      }
    }

    if (pdev->dev_test_mode == 1U)
 8001ed4:	f894 32a0 	ldrb.w	r3, [r4, #672]	; 0x2a0
 8001ed8:	2000      	movs	r0, #0
 8001eda:	2b01      	cmp	r3, #1
 8001edc:	d13a      	bne.n	8001f54 <USBD_LL_DataInStage+0xb4>
    {
      USBD_RunTestMode(pdev);
      pdev->dev_test_mode = 0U;
 8001ede:	f884 02a0 	strb.w	r0, [r4, #672]	; 0x2a0
 8001ee2:	bd70      	pop	{r4, r5, r6, pc}
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8001ee4:	69c3      	ldr	r3, [r0, #28]
 8001ee6:	fbb3 f5f2 	udiv	r5, r3, r2
 8001eea:	fb02 3515 	mls	r5, r2, r5, r3
 8001eee:	b965      	cbnz	r5, 8001f0a <USBD_LL_DataInStage+0x6a>
 8001ef0:	429a      	cmp	r2, r3
 8001ef2:	d80a      	bhi.n	8001f0a <USBD_LL_DataInStage+0x6a>
            (pep->total_length >= pep->maxpacket) &&
 8001ef4:	f8d0 2298 	ldr.w	r2, [r0, #664]	; 0x298
 8001ef8:	4293      	cmp	r3, r2
 8001efa:	d206      	bcs.n	8001f0a <USBD_LL_DataInStage+0x6a>
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8001efc:	462a      	mov	r2, r5
 8001efe:	f000 fa99 	bl	8002434 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8001f02:	f8c4 5298 	str.w	r5, [r4, #664]	; 0x298
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8001f06:	462b      	mov	r3, r5
 8001f08:	e7df      	b.n	8001eca <USBD_LL_DataInStage+0x2a>
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8001f0a:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
 8001f0e:	68db      	ldr	r3, [r3, #12]
 8001f10:	b12b      	cbz	r3, 8001f1e <USBD_LL_DataInStage+0x7e>
 8001f12:	f894 229c 	ldrb.w	r2, [r4, #668]	; 0x29c
 8001f16:	2a03      	cmp	r2, #3
 8001f18:	d101      	bne.n	8001f1e <USBD_LL_DataInStage+0x7e>
            pdev->pClass->EP0_TxSent(pdev);
 8001f1a:	4620      	mov	r0, r4
 8001f1c:	4798      	blx	r3
          USBD_LL_StallEP(pdev, 0x80U);
 8001f1e:	2180      	movs	r1, #128	; 0x80
 8001f20:	4620      	mov	r0, r4
 8001f22:	f000 fd27 	bl	8002974 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8001f26:	4620      	mov	r0, r4
 8001f28:	f000 faae 	bl	8002488 <USBD_CtlReceiveStatus>
 8001f2c:	e7d2      	b.n	8001ed4 <USBD_LL_DataInStage+0x34>
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8001f2e:	f032 0304 	bics.w	r3, r2, #4
 8001f32:	d1cf      	bne.n	8001ed4 <USBD_LL_DataInStage+0x34>
        USBD_LL_StallEP(pdev, 0x80U);
 8001f34:	2180      	movs	r1, #128	; 0x80
 8001f36:	f000 fd1d 	bl	8002974 <USBD_LL_StallEP>
 8001f3a:	e7cb      	b.n	8001ed4 <USBD_LL_DataInStage+0x34>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8001f3c:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8001f40:	695b      	ldr	r3, [r3, #20]
 8001f42:	b133      	cbz	r3, 8001f52 <USBD_LL_DataInStage+0xb2>
 8001f44:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 8001f48:	2a03      	cmp	r2, #3
 8001f4a:	d102      	bne.n	8001f52 <USBD_LL_DataInStage+0xb2>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
  {
    pdev->pClass->DataIn(pdev, epnum);
 8001f4c:	4798      	blx	r3
  {
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
 8001f4e:	2000      	movs	r0, #0
    pdev->pClass->DataIn(pdev, epnum);
 8001f50:	bd70      	pop	{r4, r5, r6, pc}
    return USBD_FAIL;
 8001f52:	2002      	movs	r0, #2
}
 8001f54:	bd70      	pop	{r4, r5, r6, pc}

08001f56 <USBD_LL_Reset>:
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8001f56:	2200      	movs	r2, #0
{
 8001f58:	b570      	push	{r4, r5, r6, lr}
 8001f5a:	4604      	mov	r4, r0
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8001f5c:	2501      	movs	r5, #1

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8001f5e:	2640      	movs	r6, #64	; 0x40
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8001f60:	4611      	mov	r1, r2
 8001f62:	2340      	movs	r3, #64	; 0x40
 8001f64:	f000 fce8 	bl	8002938 <USBD_LL_OpenEP>

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8001f68:	4633      	mov	r3, r6
 8001f6a:	2180      	movs	r1, #128	; 0x80
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8001f6c:	f8c4 5158 	str.w	r5, [r4, #344]	; 0x158
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8001f70:	f8c4 6164 	str.w	r6, [r4, #356]	; 0x164
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8001f74:	2200      	movs	r2, #0
 8001f76:	4620      	mov	r0, r4
 8001f78:	f000 fcde 	bl	8002938 <USBD_LL_OpenEP>

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
  pdev->ep0_state = USBD_EP0_IDLE;
 8001f7c:	2100      	movs	r1, #0
  pdev->dev_config = 0U;
  pdev->dev_remote_wakeup = 0U;

  if (pdev->pClassData)
 8001f7e:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8001f82:	61a5      	str	r5, [r4, #24]
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8001f84:	6266      	str	r6, [r4, #36]	; 0x24
  pdev->dev_state = USBD_STATE_DEFAULT;
 8001f86:	f884 529c 	strb.w	r5, [r4, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8001f8a:	f8c4 1294 	str.w	r1, [r4, #660]	; 0x294
  pdev->dev_config = 0U;
 8001f8e:	6061      	str	r1, [r4, #4]
  pdev->dev_remote_wakeup = 0U;
 8001f90:	f8c4 12a4 	str.w	r1, [r4, #676]	; 0x2a4
  if (pdev->pClassData)
 8001f94:	b123      	cbz	r3, 8001fa0 <USBD_LL_Reset+0x4a>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8001f96:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
 8001f9a:	4620      	mov	r0, r4
 8001f9c:	685b      	ldr	r3, [r3, #4]
 8001f9e:	4798      	blx	r3
  }

  return USBD_OK;
}
 8001fa0:	2000      	movs	r0, #0
 8001fa2:	bd70      	pop	{r4, r5, r6, pc}

08001fa4 <USBD_LL_SetSpeed>:
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
  pdev->dev_speed = speed;
 8001fa4:	7401      	strb	r1, [r0, #16]

  return USBD_OK;
}
 8001fa6:	2000      	movs	r0, #0
 8001fa8:	4770      	bx	lr

08001faa <USBD_LL_Suspend>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
  pdev->dev_old_state =  pdev->dev_state;
 8001faa:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8001fae:	f880 329d 	strb.w	r3, [r0, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8001fb2:	2304      	movs	r3, #4
 8001fb4:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c

  return USBD_OK;
}
 8001fb8:	2000      	movs	r0, #0
 8001fba:	4770      	bx	lr

08001fbc <USBD_LL_Resume>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8001fbc:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8001fc0:	2b04      	cmp	r3, #4
  {
    pdev->dev_state = pdev->dev_old_state;
 8001fc2:	bf04      	itt	eq
 8001fc4:	f890 329d 	ldrbeq.w	r3, [r0, #669]	; 0x29d
 8001fc8:	f880 329c 	strbeq.w	r3, [r0, #668]	; 0x29c
  }

  return USBD_OK;
}
 8001fcc:	2000      	movs	r0, #0
 8001fce:	4770      	bx	lr

08001fd0 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8001fd0:	b508      	push	{r3, lr}
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8001fd2:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 8001fd6:	2a03      	cmp	r2, #3
 8001fd8:	d104      	bne.n	8001fe4 <USBD_LL_SOF+0x14>
  {
    if (pdev->pClass->SOF != NULL)
 8001fda:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8001fde:	69db      	ldr	r3, [r3, #28]
 8001fe0:	b103      	cbz	r3, 8001fe4 <USBD_LL_SOF+0x14>
    {
      pdev->pClass->SOF(pdev);
 8001fe2:	4798      	blx	r3
    }
  }

  return USBD_OK;
}
 8001fe4:	2000      	movs	r0, #0
 8001fe6:	bd08      	pop	{r3, pc}

08001fe8 <USBD_CtlError.constprop.1>:
* @param  pdev: device instance
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
 8001fe8:	b510      	push	{r4, lr}
 8001fea:	4604      	mov	r4, r0
                   USBD_SetupReqTypedef *req)
{
  USBD_LL_StallEP(pdev, 0x80U);
 8001fec:	2180      	movs	r1, #128	; 0x80
 8001fee:	f000 fcc1 	bl	8002974 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8001ff2:	4620      	mov	r0, r4
}
 8001ff4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_StallEP(pdev, 0U);
 8001ff8:	2100      	movs	r1, #0
 8001ffa:	f000 bcbb 	b.w	8002974 <USBD_LL_StallEP>
	...

08002000 <USBD_StdDevReq>:
{
 8002000:	b537      	push	{r0, r1, r2, r4, r5, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8002002:	780b      	ldrb	r3, [r1, #0]
{
 8002004:	4604      	mov	r4, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8002006:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800200a:	2b20      	cmp	r3, #32
{
 800200c:	460d      	mov	r5, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800200e:	d012      	beq.n	8002036 <USBD_StdDevReq+0x36>
 8002010:	2b40      	cmp	r3, #64	; 0x40
 8002012:	d010      	beq.n	8002036 <USBD_StdDevReq+0x36>
 8002014:	2b00      	cmp	r3, #0
 8002016:	d15c      	bne.n	80020d2 <USBD_StdDevReq+0xd2>
      switch (req->bRequest)
 8002018:	784b      	ldrb	r3, [r1, #1]
 800201a:	2b09      	cmp	r3, #9
 800201c:	d858      	bhi.n	80020d0 <USBD_StdDevReq+0xd0>
 800201e:	e8df f013 	tbh	[pc, r3, lsl #1]
 8002022:	00e9      	.short	0x00e9
 8002024:	00570105 	.word	0x00570105
 8002028:	005700fe 	.word	0x005700fe
 800202c:	00130084 	.word	0x00130084
 8002030:	00d20057 	.word	0x00d20057
 8002034:	00a0      	.short	0x00a0
      pdev->pClass->Setup(pdev, req);
 8002036:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
 800203a:	4629      	mov	r1, r5
 800203c:	689b      	ldr	r3, [r3, #8]
 800203e:	4620      	mov	r0, r4
 8002040:	4798      	blx	r3
}
 8002042:	2000      	movs	r0, #0
 8002044:	b003      	add	sp, #12
 8002046:	bd30      	pop	{r4, r5, pc}
  uint16_t len = 0U;
 8002048:	2300      	movs	r3, #0
 800204a:	f8ad 3006 	strh.w	r3, [sp, #6]
  switch (req->wValue >> 8)
 800204e:	884b      	ldrh	r3, [r1, #2]
 8002050:	0a1a      	lsrs	r2, r3, #8
 8002052:	3a01      	subs	r2, #1
 8002054:	2a06      	cmp	r2, #6
 8002056:	d83b      	bhi.n	80020d0 <USBD_StdDevReq+0xd0>
 8002058:	e8df f002 	tbb	[pc, r2]
 800205c:	3a2d2004 	.word	0x3a2d2004
 8002060:	523a      	.short	0x523a
 8002062:	5c          	.byte	0x5c
 8002063:	00          	.byte	0x00
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8002064:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 8002068:	681b      	ldr	r3, [r3, #0]
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800206a:	f10d 0106 	add.w	r1, sp, #6
 800206e:	7c20      	ldrb	r0, [r4, #16]
 8002070:	4798      	blx	r3
    if ((len != 0U) && (req->wLength != 0U))
 8002072:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8002076:	b152      	cbz	r2, 800208e <USBD_StdDevReq+0x8e>
 8002078:	88eb      	ldrh	r3, [r5, #6]
 800207a:	b143      	cbz	r3, 800208e <USBD_StdDevReq+0x8e>
      len = MIN(len, req->wLength);
 800207c:	429a      	cmp	r2, r3
 800207e:	bf28      	it	cs
 8002080:	461a      	movcs	r2, r3
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8002082:	4601      	mov	r1, r0
 8002084:	4620      	mov	r0, r4
      len = MIN(len, req->wLength);
 8002086:	f8ad 2006 	strh.w	r2, [sp, #6]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800208a:	f000 f9c6 	bl	800241a <USBD_CtlSendData>
    if (req->wLength == 0U)
 800208e:	88eb      	ldrh	r3, [r5, #6]
 8002090:	2b00      	cmp	r3, #0
 8002092:	d1d6      	bne.n	8002042 <USBD_StdDevReq+0x42>
        USBD_CtlSendStatus(pdev);
 8002094:	4620      	mov	r0, r4
 8002096:	f000 f9ec 	bl	8002472 <USBD_CtlSendStatus>
 800209a:	e7d2      	b.n	8002042 <USBD_StdDevReq+0x42>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800209c:	7c02      	ldrb	r2, [r0, #16]
 800209e:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 80020a2:	b932      	cbnz	r2, 80020b2 <USBD_StdDevReq+0xb2>
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80020a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80020a6:	f10d 0006 	add.w	r0, sp, #6
 80020aa:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80020ac:	2302      	movs	r3, #2
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80020ae:	7043      	strb	r3, [r0, #1]
 80020b0:	e7df      	b.n	8002072 <USBD_StdDevReq+0x72>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80020b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020b4:	e7f7      	b.n	80020a6 <USBD_StdDevReq+0xa6>
      switch ((uint8_t)(req->wValue))
 80020b6:	b2db      	uxtb	r3, r3
 80020b8:	2b05      	cmp	r3, #5
 80020ba:	d809      	bhi.n	80020d0 <USBD_StdDevReq+0xd0>
 80020bc:	e8df f003 	tbb	[pc, r3]
 80020c0:	14100c03 	.word	0x14100c03
 80020c4:	1c18      	.short	0x1c18
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80020c6:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 80020ca:	685b      	ldr	r3, [r3, #4]
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d1cc      	bne.n	800206a <USBD_StdDevReq+0x6a>
          USBD_CtlError(pdev, req);
 80020d0:	4620      	mov	r0, r4
      USBD_CtlError(pdev, req);
 80020d2:	f7ff ff89 	bl	8001fe8 <USBD_CtlError.constprop.1>
  return ret;
 80020d6:	e7b4      	b.n	8002042 <USBD_StdDevReq+0x42>
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80020d8:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 80020dc:	689b      	ldr	r3, [r3, #8]
 80020de:	e7f5      	b.n	80020cc <USBD_StdDevReq+0xcc>
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80020e0:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 80020e4:	68db      	ldr	r3, [r3, #12]
 80020e6:	e7f1      	b.n	80020cc <USBD_StdDevReq+0xcc>
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80020e8:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 80020ec:	691b      	ldr	r3, [r3, #16]
 80020ee:	e7ed      	b.n	80020cc <USBD_StdDevReq+0xcc>
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80020f0:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 80020f4:	695b      	ldr	r3, [r3, #20]
 80020f6:	e7e9      	b.n	80020cc <USBD_StdDevReq+0xcc>
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80020f8:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 80020fc:	699b      	ldr	r3, [r3, #24]
 80020fe:	e7e5      	b.n	80020cc <USBD_StdDevReq+0xcc>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8002100:	7c03      	ldrb	r3, [r0, #16]
 8002102:	2b00      	cmp	r3, #0
 8002104:	d1e4      	bne.n	80020d0 <USBD_StdDevReq+0xd0>
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8002106:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800210a:	f10d 0006 	add.w	r0, sp, #6
 800210e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002110:	4798      	blx	r3
 8002112:	e7ae      	b.n	8002072 <USBD_StdDevReq+0x72>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8002114:	7c03      	ldrb	r3, [r0, #16]
 8002116:	2b00      	cmp	r3, #0
 8002118:	d1da      	bne.n	80020d0 <USBD_StdDevReq+0xd0>
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800211a:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800211e:	f10d 0006 	add.w	r0, sp, #6
 8002122:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002124:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8002126:	2307      	movs	r3, #7
 8002128:	e7c1      	b.n	80020ae <USBD_StdDevReq+0xae>
  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800212a:	888b      	ldrh	r3, [r1, #4]
 800212c:	2b00      	cmp	r3, #0
 800212e:	d1cf      	bne.n	80020d0 <USBD_StdDevReq+0xd0>
 8002130:	88cb      	ldrh	r3, [r1, #6]
 8002132:	2b00      	cmp	r3, #0
 8002134:	d1cc      	bne.n	80020d0 <USBD_StdDevReq+0xd0>
 8002136:	884d      	ldrh	r5, [r1, #2]
 8002138:	2d7f      	cmp	r5, #127	; 0x7f
 800213a:	d8c9      	bhi.n	80020d0 <USBD_StdDevReq+0xd0>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800213c:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8002140:	b2e9      	uxtb	r1, r5
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8002142:	2b03      	cmp	r3, #3
 8002144:	d0c4      	beq.n	80020d0 <USBD_StdDevReq+0xd0>
      pdev->dev_address = dev_addr;
 8002146:	f880 129e 	strb.w	r1, [r0, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800214a:	f000 fc3f 	bl	80029cc <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800214e:	4620      	mov	r0, r4
 8002150:	f000 f98f 	bl	8002472 <USBD_CtlSendStatus>
      if (dev_addr != 0U)
 8002154:	b11d      	cbz	r5, 800215e <USBD_StdDevReq+0x15e>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8002156:	2302      	movs	r3, #2
        pdev->dev_state = USBD_STATE_DEFAULT;
 8002158:	f884 329c 	strb.w	r3, [r4, #668]	; 0x29c
 800215c:	e771      	b.n	8002042 <USBD_StdDevReq+0x42>
 800215e:	2301      	movs	r3, #1
 8002160:	e7fa      	b.n	8002158 <USBD_StdDevReq+0x158>
  cfgidx = (uint8_t)(req->wValue);
 8002162:	7889      	ldrb	r1, [r1, #2]
 8002164:	4d37      	ldr	r5, [pc, #220]	; (8002244 <USBD_StdDevReq+0x244>)
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8002166:	2901      	cmp	r1, #1
  cfgidx = (uint8_t)(req->wValue);
 8002168:	7029      	strb	r1, [r5, #0]
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800216a:	d8b1      	bhi.n	80020d0 <USBD_StdDevReq+0xd0>
    switch (pdev->dev_state)
 800216c:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8002170:	2b02      	cmp	r3, #2
 8002172:	d008      	beq.n	8002186 <USBD_StdDevReq+0x186>
 8002174:	2b03      	cmp	r3, #3
 8002176:	d014      	beq.n	80021a2 <USBD_StdDevReq+0x1a2>
        USBD_CtlError(pdev, req);
 8002178:	f7ff ff36 	bl	8001fe8 <USBD_CtlError.constprop.1>
        USBD_ClrClassConfig(pdev, cfgidx);
 800217c:	7829      	ldrb	r1, [r5, #0]
 800217e:	4620      	mov	r0, r4
 8002180:	f7ff fe20 	bl	8001dc4 <USBD_ClrClassConfig>
 8002184:	e75d      	b.n	8002042 <USBD_StdDevReq+0x42>
        if (cfgidx)
 8002186:	2900      	cmp	r1, #0
 8002188:	d084      	beq.n	8002094 <USBD_StdDevReq+0x94>
          pdev->dev_config = cfgidx;
 800218a:	2101      	movs	r1, #1
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800218c:	2303      	movs	r3, #3
          pdev->dev_config = cfgidx;
 800218e:	6041      	str	r1, [r0, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8002190:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8002194:	4620      	mov	r0, r4
 8002196:	f7ff fe0a 	bl	8001dae <USBD_SetClassConfig>
 800219a:	2802      	cmp	r0, #2
 800219c:	f47f af7a 	bne.w	8002094 <USBD_StdDevReq+0x94>
 80021a0:	e796      	b.n	80020d0 <USBD_StdDevReq+0xd0>
        if (cfgidx == 0U)
 80021a2:	b931      	cbnz	r1, 80021b2 <USBD_StdDevReq+0x1b2>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80021a4:	2302      	movs	r3, #2
          pdev->dev_config = cfgidx;
 80021a6:	6041      	str	r1, [r0, #4]
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80021a8:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
          USBD_ClrClassConfig(pdev, cfgidx);
 80021ac:	f7ff fe0a 	bl	8001dc4 <USBD_ClrClassConfig>
 80021b0:	e770      	b.n	8002094 <USBD_StdDevReq+0x94>
        else if (cfgidx != pdev->dev_config)
 80021b2:	6841      	ldr	r1, [r0, #4]
 80021b4:	2901      	cmp	r1, #1
 80021b6:	f43f af6d 	beq.w	8002094 <USBD_StdDevReq+0x94>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80021ba:	b2c9      	uxtb	r1, r1
 80021bc:	f7ff fe02 	bl	8001dc4 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 80021c0:	7829      	ldrb	r1, [r5, #0]
 80021c2:	6061      	str	r1, [r4, #4]
 80021c4:	e7e6      	b.n	8002194 <USBD_StdDevReq+0x194>
  if (req->wLength != 1U)
 80021c6:	88ca      	ldrh	r2, [r1, #6]
 80021c8:	2a01      	cmp	r2, #1
 80021ca:	d181      	bne.n	80020d0 <USBD_StdDevReq+0xd0>
    switch (pdev->dev_state)
 80021cc:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	f43f af7d 	beq.w	80020d0 <USBD_StdDevReq+0xd0>
 80021d6:	2b02      	cmp	r3, #2
 80021d8:	d904      	bls.n	80021e4 <USBD_StdDevReq+0x1e4>
 80021da:	2b03      	cmp	r3, #3
 80021dc:	f47f af78 	bne.w	80020d0 <USBD_StdDevReq+0xd0>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 80021e0:	1d01      	adds	r1, r0, #4
 80021e2:	e003      	b.n	80021ec <USBD_StdDevReq+0x1ec>
        pdev->dev_default_config = 0U;
 80021e4:	4601      	mov	r1, r0
 80021e6:	2300      	movs	r3, #0
 80021e8:	f841 3f08 	str.w	r3, [r1, #8]!
      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 80021ec:	4620      	mov	r0, r4
 80021ee:	f000 f914 	bl	800241a <USBD_CtlSendData>
 80021f2:	e726      	b.n	8002042 <USBD_StdDevReq+0x42>
  switch (pdev->dev_state)
 80021f4:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80021f8:	3b01      	subs	r3, #1
 80021fa:	2b02      	cmp	r3, #2
 80021fc:	f63f af68 	bhi.w	80020d0 <USBD_StdDevReq+0xd0>
      if (req->wLength != 0x2U)
 8002200:	88cb      	ldrh	r3, [r1, #6]
 8002202:	2b02      	cmp	r3, #2
 8002204:	f47f af64 	bne.w	80020d0 <USBD_StdDevReq+0xd0>
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8002208:	2301      	movs	r3, #1
 800220a:	60c3      	str	r3, [r0, #12]
      if (pdev->dev_remote_wakeup)
 800220c:	f8d0 32a4 	ldr.w	r3, [r0, #676]	; 0x2a4
 8002210:	b10b      	cbz	r3, 8002216 <USBD_StdDevReq+0x216>
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8002212:	2303      	movs	r3, #3
 8002214:	60c3      	str	r3, [r0, #12]
      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8002216:	2202      	movs	r2, #2
 8002218:	f104 010c 	add.w	r1, r4, #12
 800221c:	e7e6      	b.n	80021ec <USBD_StdDevReq+0x1ec>
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800221e:	884b      	ldrh	r3, [r1, #2]
 8002220:	2b01      	cmp	r3, #1
 8002222:	f47f af0e 	bne.w	8002042 <USBD_StdDevReq+0x42>
        pdev->dev_remote_wakeup = 0U;
 8002226:	f8c4 32a4 	str.w	r3, [r4, #676]	; 0x2a4
 800222a:	e733      	b.n	8002094 <USBD_StdDevReq+0x94>
  switch (pdev->dev_state)
 800222c:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8002230:	3b01      	subs	r3, #1
 8002232:	2b02      	cmp	r3, #2
 8002234:	f63f af4c 	bhi.w	80020d0 <USBD_StdDevReq+0xd0>
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8002238:	884b      	ldrh	r3, [r1, #2]
 800223a:	2b01      	cmp	r3, #1
 800223c:	f47f af01 	bne.w	8002042 <USBD_StdDevReq+0x42>
        pdev->dev_remote_wakeup = 0U;
 8002240:	2300      	movs	r3, #0
 8002242:	e7f0      	b.n	8002226 <USBD_StdDevReq+0x226>
 8002244:	200001fc 	.word	0x200001fc

08002248 <USBD_StdItfReq>:
{
 8002248:	b538      	push	{r3, r4, r5, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800224a:	780b      	ldrb	r3, [r1, #0]
{
 800224c:	4604      	mov	r4, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800224e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8002252:	2b20      	cmp	r3, #32
{
 8002254:	460d      	mov	r5, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8002256:	d002      	beq.n	800225e <USBD_StdItfReq+0x16>
 8002258:	2b40      	cmp	r3, #64	; 0x40
 800225a:	d000      	beq.n	800225e <USBD_StdItfReq+0x16>
 800225c:	b9b3      	cbnz	r3, 800228c <USBD_StdItfReq+0x44>
      switch (pdev->dev_state)
 800225e:	f894 329c 	ldrb.w	r3, [r4, #668]	; 0x29c
 8002262:	3b01      	subs	r3, #1
 8002264:	2b02      	cmp	r3, #2
 8002266:	d810      	bhi.n	800228a <USBD_StdItfReq+0x42>
          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8002268:	792b      	ldrb	r3, [r5, #4]
 800226a:	2b01      	cmp	r3, #1
 800226c:	d80d      	bhi.n	800228a <USBD_StdItfReq+0x42>
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800226e:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
 8002272:	4629      	mov	r1, r5
 8002274:	689b      	ldr	r3, [r3, #8]
 8002276:	4620      	mov	r0, r4
 8002278:	4798      	blx	r3
            if ((req->wLength == 0U) && (ret == USBD_OK))
 800227a:	88eb      	ldrh	r3, [r5, #6]
 800227c:	b91b      	cbnz	r3, 8002286 <USBD_StdItfReq+0x3e>
 800227e:	b910      	cbnz	r0, 8002286 <USBD_StdItfReq+0x3e>
              USBD_CtlSendStatus(pdev);
 8002280:	4620      	mov	r0, r4
 8002282:	f000 f8f6 	bl	8002472 <USBD_CtlSendStatus>
}
 8002286:	2000      	movs	r0, #0
 8002288:	bd38      	pop	{r3, r4, r5, pc}
          USBD_CtlError(pdev, req);
 800228a:	4620      	mov	r0, r4
      USBD_CtlError(pdev, req);
 800228c:	f7ff feac 	bl	8001fe8 <USBD_CtlError.constprop.1>
      break;
 8002290:	e7f9      	b.n	8002286 <USBD_StdItfReq+0x3e>

08002292 <USBD_StdEPReq>:
{
 8002292:	b538      	push	{r3, r4, r5, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8002294:	780a      	ldrb	r2, [r1, #0]
{
 8002296:	4604      	mov	r4, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8002298:	f002 0260 	and.w	r2, r2, #96	; 0x60
 800229c:	2a20      	cmp	r2, #32
{
 800229e:	460b      	mov	r3, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80022a0:	d013      	beq.n	80022ca <USBD_StdEPReq+0x38>
 80022a2:	2a40      	cmp	r2, #64	; 0x40
 80022a4:	d011      	beq.n	80022ca <USBD_StdEPReq+0x38>
 80022a6:	b96a      	cbnz	r2, 80022c4 <USBD_StdEPReq+0x32>
      switch (req->bRequest)
 80022a8:	785d      	ldrb	r5, [r3, #1]
  ep_addr  = LOBYTE(req->wIndex);
 80022aa:	888a      	ldrh	r2, [r1, #4]
      switch (req->bRequest)
 80022ac:	2d01      	cmp	r5, #1
  ep_addr  = LOBYTE(req->wIndex);
 80022ae:	b2d1      	uxtb	r1, r2
      switch (req->bRequest)
 80022b0:	d01f      	beq.n	80022f2 <USBD_StdEPReq+0x60>
 80022b2:	d335      	bcc.n	8002320 <USBD_StdEPReq+0x8e>
 80022b4:	2d03      	cmp	r5, #3
 80022b6:	d105      	bne.n	80022c4 <USBD_StdEPReq+0x32>
          switch (pdev->dev_state)
 80022b8:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 80022bc:	2a02      	cmp	r2, #2
 80022be:	d026      	beq.n	800230e <USBD_StdEPReq+0x7c>
 80022c0:	2a03      	cmp	r2, #3
 80022c2:	d00a      	beq.n	80022da <USBD_StdEPReq+0x48>
      USBD_CtlError(pdev, req);
 80022c4:	f7ff fe90 	bl	8001fe8 <USBD_CtlError.constprop.1>
      break;
 80022c8:	e005      	b.n	80022d6 <USBD_StdEPReq+0x44>
      pdev->pClass->Setup(pdev, req);
 80022ca:	f8d4 22b4 	ldr.w	r2, [r4, #692]	; 0x2b4
 80022ce:	4619      	mov	r1, r3
 80022d0:	6892      	ldr	r2, [r2, #8]
 80022d2:	4620      	mov	r0, r4
 80022d4:	4790      	blx	r2
}
 80022d6:	2000      	movs	r0, #0
 80022d8:	bd38      	pop	{r3, r4, r5, pc}
              if (req->wValue == USB_FEATURE_EP_HALT)
 80022da:	885a      	ldrh	r2, [r3, #2]
 80022dc:	b92a      	cbnz	r2, 80022ea <USBD_StdEPReq+0x58>
                if ((ep_addr != 0x00U) &&
 80022de:	064a      	lsls	r2, r1, #25
 80022e0:	d003      	beq.n	80022ea <USBD_StdEPReq+0x58>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80022e2:	88db      	ldrh	r3, [r3, #6]
 80022e4:	b90b      	cbnz	r3, 80022ea <USBD_StdEPReq+0x58>
                  USBD_LL_StallEP(pdev, ep_addr);
 80022e6:	f000 fb45 	bl	8002974 <USBD_LL_StallEP>
              USBD_CtlSendStatus(pdev);
 80022ea:	4620      	mov	r0, r4
 80022ec:	f000 f8c1 	bl	8002472 <USBD_CtlSendStatus>
              break;
 80022f0:	e7f1      	b.n	80022d6 <USBD_StdEPReq+0x44>
          switch (pdev->dev_state)
 80022f2:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 80022f6:	2a02      	cmp	r2, #2
 80022f8:	d009      	beq.n	800230e <USBD_StdEPReq+0x7c>
 80022fa:	2a03      	cmp	r2, #3
 80022fc:	d1e2      	bne.n	80022c4 <USBD_StdEPReq+0x32>
              if (req->wValue == USB_FEATURE_EP_HALT)
 80022fe:	885b      	ldrh	r3, [r3, #2]
 8002300:	2b00      	cmp	r3, #0
 8002302:	d1e8      	bne.n	80022d6 <USBD_StdEPReq+0x44>
                if ((ep_addr & 0x7FU) != 0x00U)
 8002304:	064d      	lsls	r5, r1, #25
 8002306:	d0f0      	beq.n	80022ea <USBD_StdEPReq+0x58>
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8002308:	f000 fb42 	bl	8002990 <USBD_LL_ClearStallEP>
 800230c:	e7ed      	b.n	80022ea <USBD_StdEPReq+0x58>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800230e:	064b      	lsls	r3, r1, #25
 8002310:	d016      	beq.n	8002340 <USBD_StdEPReq+0xae>
                USBD_LL_StallEP(pdev, ep_addr);
 8002312:	f000 fb2f 	bl	8002974 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8002316:	2180      	movs	r1, #128	; 0x80
 8002318:	4620      	mov	r0, r4
 800231a:	f000 fb2b 	bl	8002974 <USBD_LL_StallEP>
 800231e:	e7da      	b.n	80022d6 <USBD_StdEPReq+0x44>
          switch (pdev->dev_state)
 8002320:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8002324:	2b02      	cmp	r3, #2
 8002326:	d00d      	beq.n	8002344 <USBD_StdEPReq+0xb2>
 8002328:	2b03      	cmp	r3, #3
 800232a:	d1cb      	bne.n	80022c4 <USBD_StdEPReq+0x32>
 800232c:	2314      	movs	r3, #20
              if ((ep_addr & 0x80U) == 0x80U)
 800232e:	f012 0f80 	tst.w	r2, #128	; 0x80
 8002332:	f001 020f 	and.w	r2, r1, #15
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8002336:	fb03 0202 	mla	r2, r3, r2, r0
              if ((ep_addr & 0x80U) == 0x80U)
 800233a:	d014      	beq.n	8002366 <USBD_StdEPReq+0xd4>
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800233c:	6992      	ldr	r2, [r2, #24]
 800233e:	b9ea      	cbnz	r2, 800237c <USBD_StdEPReq+0xea>
                USBD_CtlError(pdev, req);
 8002340:	4620      	mov	r0, r4
 8002342:	e7bf      	b.n	80022c4 <USBD_StdEPReq+0x32>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8002344:	0649      	lsls	r1, r1, #25
 8002346:	d1fb      	bne.n	8002340 <USBD_StdEPReq+0xae>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8002348:	0613      	lsls	r3, r2, #24
              pep->status = 0x0000U;
 800234a:	f04f 0300 	mov.w	r3, #0
              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800234e:	f04f 0202 	mov.w	r2, #2
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8002352:	bf4c      	ite	mi
 8002354:	f100 0114 	addmi.w	r1, r0, #20
 8002358:	f500 71aa 	addpl.w	r1, r0, #340	; 0x154
              pep->status = 0x0000U;
 800235c:	600b      	str	r3, [r1, #0]
              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800235e:	4620      	mov	r0, r4
 8002360:	f000 f85b 	bl	800241a <USBD_CtlSendData>
              break;
 8002364:	e7b7      	b.n	80022d6 <USBD_StdEPReq+0x44>
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8002366:	f8d2 2158 	ldr.w	r2, [r2, #344]	; 0x158
 800236a:	2a00      	cmp	r2, #0
 800236c:	d0e8      	beq.n	8002340 <USBD_StdEPReq+0xae>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800236e:	f001 057f 	and.w	r5, r1, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8002372:	fb03 0505 	mla	r5, r3, r5, r0
 8002376:	f505 75aa 	add.w	r5, r5, #340	; 0x154
 800237a:	e004      	b.n	8002386 <USBD_StdEPReq+0xf4>
 800237c:	f001 057f 	and.w	r5, r1, #127	; 0x7f
 8002380:	fb05 3503 	mla	r5, r5, r3, r3
 8002384:	4405      	add	r5, r0
              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8002386:	f011 037f 	ands.w	r3, r1, #127	; 0x7f
 800238a:	d103      	bne.n	8002394 <USBD_StdEPReq+0x102>
                pep->status = 0x0001U;
 800238c:	602b      	str	r3, [r5, #0]
              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800238e:	2202      	movs	r2, #2
 8002390:	4629      	mov	r1, r5
 8002392:	e7e4      	b.n	800235e <USBD_StdEPReq+0xcc>
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8002394:	4620      	mov	r0, r4
 8002396:	f000 fb09 	bl	80029ac <USBD_LL_IsStallEP>
 800239a:	b108      	cbz	r0, 80023a0 <USBD_StdEPReq+0x10e>
                pep->status = 0x0001U;
 800239c:	2301      	movs	r3, #1
 800239e:	e7f5      	b.n	800238c <USBD_StdEPReq+0xfa>
                pep->status = 0x0000U;
 80023a0:	6028      	str	r0, [r5, #0]
 80023a2:	e7f4      	b.n	800238e <USBD_StdEPReq+0xfc>

080023a4 <USBD_ParseSetupRequest>:
  req->bmRequest = *(uint8_t *)(pdata);
 80023a4:	780b      	ldrb	r3, [r1, #0]
 80023a6:	7003      	strb	r3, [r0, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 80023a8:	784b      	ldrb	r3, [r1, #1]
 80023aa:	7043      	strb	r3, [r0, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 80023ac:	78ca      	ldrb	r2, [r1, #3]
 80023ae:	788b      	ldrb	r3, [r1, #2]
 80023b0:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 80023b4:	8043      	strh	r3, [r0, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 80023b6:	794a      	ldrb	r2, [r1, #5]
 80023b8:	790b      	ldrb	r3, [r1, #4]
 80023ba:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 80023be:	8083      	strh	r3, [r0, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 80023c0:	79ca      	ldrb	r2, [r1, #7]
 80023c2:	798b      	ldrb	r3, [r1, #6]
 80023c4:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 80023c8:	80c3      	strh	r3, [r0, #6]
 80023ca:	4770      	bx	lr

080023cc <USBD_CtlError>:
{
 80023cc:	b510      	push	{r4, lr}
 80023ce:	4604      	mov	r4, r0
  USBD_LL_StallEP(pdev, 0x80U);
 80023d0:	2180      	movs	r1, #128	; 0x80
 80023d2:	f000 facf 	bl	8002974 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 80023d6:	4620      	mov	r0, r4
}
 80023d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_StallEP(pdev, 0U);
 80023dc:	2100      	movs	r1, #0
 80023de:	f000 bac9 	b.w	8002974 <USBD_LL_StallEP>

080023e2 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80023e2:	b530      	push	{r4, r5, lr}
  uint8_t idx = 0U;

  if (desc != NULL)
 80023e4:	b188      	cbz	r0, 800240a <USBD_GetString+0x28>
 80023e6:	4605      	mov	r5, r0
 80023e8:	1a2b      	subs	r3, r5, r0
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
  uint8_t  len = 0U;

  while (*buf != '\0')
 80023ea:	f815 4b01 	ldrb.w	r4, [r5], #1
 80023ee:	b2db      	uxtb	r3, r3
 80023f0:	2c00      	cmp	r4, #0
 80023f2:	d1f9      	bne.n	80023e8 <USBD_GetString+0x6>
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 80023f4:	3301      	adds	r3, #1
 80023f6:	005b      	lsls	r3, r3, #1
 80023f8:	8013      	strh	r3, [r2, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 80023fa:	700b      	strb	r3, [r1, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 80023fc:	2303      	movs	r3, #3
 80023fe:	704b      	strb	r3, [r1, #1]
 8002400:	2302      	movs	r3, #2
 8002402:	3801      	subs	r0, #1
    while (*desc != '\0')
 8002404:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 8002408:	b905      	cbnz	r5, 800240c <USBD_GetString+0x2a>
 800240a:	bd30      	pop	{r4, r5, pc}
      unicode[idx++] = *desc++;
 800240c:	1c5a      	adds	r2, r3, #1
 800240e:	54cd      	strb	r5, [r1, r3]
 8002410:	b2d2      	uxtb	r2, r2
      unicode[idx++] =  0U;
 8002412:	3302      	adds	r3, #2
 8002414:	b2db      	uxtb	r3, r3
 8002416:	548c      	strb	r4, [r1, r2]
 8002418:	e7f4      	b.n	8002404 <USBD_GetString+0x22>

0800241a <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800241a:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800241c:	2202      	movs	r2, #2
{
 800241e:	b510      	push	{r4, lr}
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8002420:	f8c0 2294 	str.w	r2, [r0, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8002424:	61c3      	str	r3, [r0, #28]
  pdev->ep_in[0].rem_length   = len;

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8002426:	460a      	mov	r2, r1
  pdev->ep_in[0].rem_length   = len;
 8002428:	6203      	str	r3, [r0, #32]
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800242a:	2100      	movs	r1, #0
 800242c:	f000 fadc 	bl	80029e8 <USBD_LL_Transmit>

  return USBD_OK;
}
 8002430:	2000      	movs	r0, #0
 8002432:	bd10      	pop	{r4, pc}

08002434 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8002434:	b508      	push	{r3, lr}
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8002436:	4613      	mov	r3, r2
 8002438:	460a      	mov	r2, r1
 800243a:	2100      	movs	r1, #0
 800243c:	f000 fad4 	bl	80029e8 <USBD_LL_Transmit>

  return USBD_OK;
}
 8002440:	2000      	movs	r0, #0
 8002442:	bd08      	pop	{r3, pc}

08002444 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8002444:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8002446:	2203      	movs	r2, #3
{
 8002448:	b510      	push	{r4, lr}
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800244a:	f8c0 2294 	str.w	r2, [r0, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800244e:	f8c0 315c 	str.w	r3, [r0, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8002452:	460a      	mov	r2, r1
  pdev->ep_out[0].rem_length   = len;
 8002454:	f8c0 3160 	str.w	r3, [r0, #352]	; 0x160
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8002458:	2100      	movs	r1, #0
 800245a:	f000 fad3 	bl	8002a04 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 800245e:	2000      	movs	r0, #0
 8002460:	bd10      	pop	{r4, pc}

08002462 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8002462:	b508      	push	{r3, lr}
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8002464:	4613      	mov	r3, r2
 8002466:	460a      	mov	r2, r1
 8002468:	2100      	movs	r1, #0
 800246a:	f000 facb 	bl	8002a04 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 800246e:	2000      	movs	r0, #0
 8002470:	bd08      	pop	{r3, pc}

08002472 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8002472:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8002474:	2304      	movs	r3, #4
 8002476:	f8c0 3294 	str.w	r3, [r0, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800247a:	2300      	movs	r3, #0
 800247c:	461a      	mov	r2, r3
 800247e:	4619      	mov	r1, r3
 8002480:	f000 fab2 	bl	80029e8 <USBD_LL_Transmit>

  return USBD_OK;
}
 8002484:	2000      	movs	r0, #0
 8002486:	bd08      	pop	{r3, pc}

08002488 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8002488:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800248a:	2305      	movs	r3, #5
 800248c:	f8c0 3294 	str.w	r3, [r0, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8002490:	2300      	movs	r3, #0
 8002492:	461a      	mov	r2, r3
 8002494:	4619      	mov	r1, r3
 8002496:	f000 fab5 	bl	8002a04 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 800249a:	2000      	movs	r0, #0
 800249c:	bd08      	pop	{r3, pc}

0800249e <SystemClock_Config>:
}


void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800249e:	2228      	movs	r2, #40	; 0x28
{
 80024a0:	b570      	push	{r4, r5, r6, lr}
 80024a2:	b094      	sub	sp, #80	; 0x50
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80024a4:	eb0d 0002 	add.w	r0, sp, r2
 80024a8:	2100      	movs	r1, #0
 80024aa:	f000 fb8b 	bl	8002bc4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80024ae:	2214      	movs	r2, #20
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80024b0:	2510      	movs	r5, #16
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80024b2:	eb0d 0002 	add.w	r0, sp, r2
 80024b6:	2100      	movs	r1, #0
 80024b8:	f000 fb84 	bl	8002bc4 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80024bc:	462a      	mov	r2, r5
 80024be:	2100      	movs	r1, #0
 80024c0:	a801      	add	r0, sp, #4
 80024c2:	f000 fb7f 	bl	8002bc4 <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80024c6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80024ca:	2401      	movs	r4, #1
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80024cc:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80024ce:	2602      	movs	r6, #2
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80024d0:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 80024d2:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80024d6:	a80a      	add	r0, sp, #40	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 80024d8:	9313      	str	r3, [sp, #76]	; 0x4c
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80024da:	940a      	str	r4, [sp, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80024dc:	940e      	str	r4, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80024de:	9611      	str	r6, [sp, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80024e0:	f7fe fbba 	bl	8000c58 <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80024e4:	230f      	movs	r3, #15
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80024e6:	f44f 6280 	mov.w	r2, #1024	; 0x400
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80024ea:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80024ec:	2300      	movs	r3, #0
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80024ee:	4621      	mov	r1, r4
 80024f0:	a805      	add	r0, sp, #20
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80024f2:	9307      	str	r3, [sp, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80024f4:	9208      	str	r2, [sp, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80024f6:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80024f8:	9606      	str	r6, [sp, #24]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80024fa:	f7fe fd87 	bl	800100c <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 80024fe:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002502:	a801      	add	r0, sp, #4
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8002504:	9501      	str	r5, [sp, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8002506:	9304      	str	r3, [sp, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002508:	f7fe fe1e 	bl	8001148 <HAL_RCCEx_PeriphCLKConfig>
  {
    Error_Handler();
  }
}
 800250c:	b014      	add	sp, #80	; 0x50
 800250e:	bd70      	pop	{r4, r5, r6, pc}

08002510 <main>:
{
 8002510:	b500      	push	{lr}
 8002512:	b089      	sub	sp, #36	; 0x24
  HAL_Init();
 8002514:	f7fd fe3e 	bl	8000194 <HAL_Init>
  SystemClock_Config();
 8002518:	f7ff ffc1 	bl	800249e <SystemClock_Config>
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800251c:	2210      	movs	r2, #16
 800251e:	2100      	movs	r1, #0
 8002520:	eb0d 0002 	add.w	r0, sp, r2
 8002524:	f000 fb4e 	bl	8002bc4 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002528:	4b34      	ldr	r3, [pc, #208]	; (80025fc <main+0xec>)
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15 
 800252a:	f24f 01f0 	movw	r1, #61680	; 0xf0f0
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800252e:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15 
 8002530:	4833      	ldr	r0, [pc, #204]	; (8002600 <main+0xf0>)
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002532:	f042 0220 	orr.w	r2, r2, #32
 8002536:	619a      	str	r2, [r3, #24]
 8002538:	699a      	ldr	r2, [r3, #24]
  /*Configure GPIO pins : PB12 PB13 PB14 PB15 
                           PB4 PB5 PB6 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15 
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800253a:	2400      	movs	r4, #0
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800253c:	f002 0220 	and.w	r2, r2, #32
 8002540:	9200      	str	r2, [sp, #0]
 8002542:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002544:	699a      	ldr	r2, [r3, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002546:	2601      	movs	r6, #1
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002548:	f042 0208 	orr.w	r2, r2, #8
 800254c:	619a      	str	r2, [r3, #24]
 800254e:	699a      	ldr	r2, [r3, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002550:	2502      	movs	r5, #2
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002552:	f002 0208 	and.w	r2, r2, #8
 8002556:	9201      	str	r2, [sp, #4]
 8002558:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800255a:	699a      	ldr	r2, [r3, #24]
 800255c:	f042 0210 	orr.w	r2, r2, #16
 8002560:	619a      	str	r2, [r3, #24]
 8002562:	699a      	ldr	r2, [r3, #24]
 8002564:	f002 0210 	and.w	r2, r2, #16
 8002568:	9202      	str	r2, [sp, #8]
 800256a:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800256c:	699a      	ldr	r2, [r3, #24]
 800256e:	f042 0204 	orr.w	r2, r2, #4
 8002572:	619a      	str	r2, [r3, #24]
 8002574:	699b      	ldr	r3, [r3, #24]
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15 
 8002576:	2200      	movs	r2, #0
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002578:	f003 0304 	and.w	r3, r3, #4
 800257c:	9303      	str	r3, [sp, #12]
 800257e:	9b03      	ldr	r3, [sp, #12]
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15 
 8002580:	f7fd ff8a 	bl	8000498 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET);
 8002584:	2200      	movs	r2, #0
 8002586:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800258a:	481e      	ldr	r0, [pc, #120]	; (8002604 <main+0xf4>)
 800258c:	f7fd ff84 	bl	8000498 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15 
 8002590:	f24f 03f0 	movw	r3, #61680	; 0xf0f0
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002594:	a904      	add	r1, sp, #16
 8002596:	481a      	ldr	r0, [pc, #104]	; (8002600 <main+0xf0>)
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15 
 8002598:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800259a:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800259c:	9605      	str	r6, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800259e:	9507      	str	r5, [sp, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80025a0:	f7fd fe98 	bl	80002d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC6 PC7 PC8 PC9 
                           PC10 PC11 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9 
 80025a4:	f44f 53fe 	mov.w	r3, #8128	; 0x1fc0
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80025a8:	a904      	add	r1, sp, #16
 80025aa:	4817      	ldr	r0, [pc, #92]	; (8002608 <main+0xf8>)
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9 
 80025ac:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80025ae:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025b0:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80025b2:	f7fd fe8f 	bl	80002d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 80025b6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025ba:	a904      	add	r1, sp, #16
 80025bc:	4811      	ldr	r0, [pc, #68]	; (8002604 <main+0xf4>)
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 80025be:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025c0:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80025c2:	9605      	str	r6, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025c4:	9507      	str	r5, [sp, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025c6:	f7fd fe85 	bl	80002d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 80025ca:	2308      	movs	r3, #8
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80025cc:	a904      	add	r1, sp, #16
 80025ce:	480c      	ldr	r0, [pc, #48]	; (8002600 <main+0xf0>)
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 80025d0:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80025d2:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025d4:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80025d6:	f7fd fe7d 	bl	80002d4 <HAL_GPIO_Init>
  MX_USB_DEVICE_Init();
 80025da:	f000 f8b3 	bl	8002744 <MX_USB_DEVICE_Init>
	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_15);
 80025de:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
 80025e2:	f504 3484 	add.w	r4, r4, #67584	; 0x10800
 80025e6:	4620      	mov	r0, r4
 80025e8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80025ec:	f7fd ff59 	bl	80004a2 <HAL_GPIO_TogglePin>
	  HAL_Delay(1000);
 80025f0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80025f4:	f7fd fdf2 	bl	80001dc <HAL_Delay>
 80025f8:	e7f5      	b.n	80025e6 <main+0xd6>
 80025fa:	bf00      	nop
 80025fc:	40021000 	.word	0x40021000
 8002600:	40010c00 	.word	0x40010c00
 8002604:	40010800 	.word	0x40010800
 8002608:	40011000 	.word	0x40011000

0800260c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800260c:	4770      	bx	lr
	...

08002610 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002610:	4b0e      	ldr	r3, [pc, #56]	; (800264c <HAL_MspInit+0x3c>)
{
 8002612:	b082      	sub	sp, #8
  __HAL_RCC_AFIO_CLK_ENABLE();
 8002614:	699a      	ldr	r2, [r3, #24]
 8002616:	f042 0201 	orr.w	r2, r2, #1
 800261a:	619a      	str	r2, [r3, #24]
 800261c:	699a      	ldr	r2, [r3, #24]
 800261e:	f002 0201 	and.w	r2, r2, #1
 8002622:	9200      	str	r2, [sp, #0]
 8002624:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002626:	69da      	ldr	r2, [r3, #28]
 8002628:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800262c:	61da      	str	r2, [r3, #28]
 800262e:	69db      	ldr	r3, [r3, #28]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled 
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8002630:	4a07      	ldr	r2, [pc, #28]	; (8002650 <HAL_MspInit+0x40>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8002632:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002636:	9301      	str	r3, [sp, #4]
 8002638:	9b01      	ldr	r3, [sp, #4]
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 800263a:	6853      	ldr	r3, [r2, #4]
 800263c:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002640:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002644:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002646:	b002      	add	sp, #8
 8002648:	4770      	bx	lr
 800264a:	bf00      	nop
 800264c:	40021000 	.word	0x40021000
 8002650:	40010000 	.word	0x40010000

08002654 <NMI_Handler>:
 8002654:	4770      	bx	lr

08002656 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002656:	e7fe      	b.n	8002656 <HardFault_Handler>

08002658 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002658:	e7fe      	b.n	8002658 <MemManage_Handler>

0800265a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800265a:	e7fe      	b.n	800265a <BusFault_Handler>

0800265c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800265c:	e7fe      	b.n	800265c <UsageFault_Handler>

0800265e <SVC_Handler>:
 800265e:	4770      	bx	lr

08002660 <DebugMon_Handler>:
 8002660:	4770      	bx	lr

08002662 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002662:	4770      	bx	lr

08002664 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002664:	f7fd bda8 	b.w	80001b8 <HAL_IncTick>

08002668 <USB_LP_CAN1_RX0_IRQHandler>:
void USB_LP_CAN1_RX0_IRQHandler(void)
{
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8002668:	4801      	ldr	r0, [pc, #4]	; (8002670 <USB_LP_CAN1_RX0_IRQHandler+0x8>)
 800266a:	f7fe b851 	b.w	8000710 <HAL_PCD_IRQHandler>
 800266e:	bf00      	nop
 8002670:	20000ec4 	.word	0x20000ec4

08002674 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002674:	b570      	push	{r4, r5, r6, lr}
 8002676:	460e      	mov	r6, r1
 8002678:	4615      	mov	r5, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800267a:	460c      	mov	r4, r1
 800267c:	1ba3      	subs	r3, r4, r6
 800267e:	429d      	cmp	r5, r3
 8002680:	dc01      	bgt.n	8002686 <_read+0x12>
	{
		*ptr++ = __io_getchar();
	}

return len;
}
 8002682:	4628      	mov	r0, r5
 8002684:	bd70      	pop	{r4, r5, r6, pc}
		*ptr++ = __io_getchar();
 8002686:	f3af 8000 	nop.w
 800268a:	f804 0b01 	strb.w	r0, [r4], #1
 800268e:	e7f5      	b.n	800267c <_read+0x8>

08002690 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002690:	b570      	push	{r4, r5, r6, lr}
 8002692:	460e      	mov	r6, r1
 8002694:	4615      	mov	r5, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002696:	460c      	mov	r4, r1
 8002698:	1ba3      	subs	r3, r4, r6
 800269a:	429d      	cmp	r5, r3
 800269c:	dc01      	bgt.n	80026a2 <_write+0x12>
	{
		__io_putchar(*ptr++);
	}
	return len;
}
 800269e:	4628      	mov	r0, r5
 80026a0:	bd70      	pop	{r4, r5, r6, pc}
		__io_putchar(*ptr++);
 80026a2:	f814 0b01 	ldrb.w	r0, [r4], #1
 80026a6:	f3af 8000 	nop.w
 80026aa:	e7f5      	b.n	8002698 <_write+0x8>

080026ac <_sbrk>:

caddr_t _sbrk(int incr)
{
 80026ac:	b508      	push	{r3, lr}
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80026ae:	4b0a      	ldr	r3, [pc, #40]	; (80026d8 <_sbrk+0x2c>)
{
 80026b0:	4602      	mov	r2, r0
	if (heap_end == 0)
 80026b2:	6819      	ldr	r1, [r3, #0]
 80026b4:	b909      	cbnz	r1, 80026ba <_sbrk+0xe>
		heap_end = &end;
 80026b6:	4909      	ldr	r1, [pc, #36]	; (80026dc <_sbrk+0x30>)
 80026b8:	6019      	str	r1, [r3, #0]

	prev_heap_end = heap_end;
	if (heap_end + incr > stack_ptr)
 80026ba:	4669      	mov	r1, sp
	prev_heap_end = heap_end;
 80026bc:	6818      	ldr	r0, [r3, #0]
	if (heap_end + incr > stack_ptr)
 80026be:	4402      	add	r2, r0
 80026c0:	428a      	cmp	r2, r1
 80026c2:	d906      	bls.n	80026d2 <_sbrk+0x26>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 80026c4:	f000 fa54 	bl	8002b70 <__errno>
 80026c8:	230c      	movs	r3, #12
 80026ca:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 80026cc:	f04f 30ff 	mov.w	r0, #4294967295
 80026d0:	bd08      	pop	{r3, pc}
	}

	heap_end += incr;
 80026d2:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap_end;
}
 80026d4:	bd08      	pop	{r3, pc}
 80026d6:	bf00      	nop
 80026d8:	20000200 	.word	0x20000200
 80026dc:	20001334 	.word	0x20001334

080026e0 <_close>:

int _close(int file)
{
	return -1;
}
 80026e0:	f04f 30ff 	mov.w	r0, #4294967295
 80026e4:	4770      	bx	lr

080026e6 <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 80026e6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	return 0;
}
 80026ea:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
 80026ec:	604b      	str	r3, [r1, #4]
}
 80026ee:	4770      	bx	lr

080026f0 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 80026f0:	2001      	movs	r0, #1
 80026f2:	4770      	bx	lr

080026f4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 80026f4:	2000      	movs	r0, #0
 80026f6:	4770      	bx	lr

080026f8 <SystemInit>:
  */
void SystemInit (void)
{
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 80026f8:	4b0f      	ldr	r3, [pc, #60]	; (8002738 <SystemInit+0x40>)
 80026fa:	681a      	ldr	r2, [r3, #0]
 80026fc:	f042 0201 	orr.w	r2, r2, #1
 8002700:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8002702:	6859      	ldr	r1, [r3, #4]
 8002704:	4a0d      	ldr	r2, [pc, #52]	; (800273c <SystemInit+0x44>)
 8002706:	400a      	ands	r2, r1
 8002708:	605a      	str	r2, [r3, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 800270a:	681a      	ldr	r2, [r3, #0]
 800270c:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8002710:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002714:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002716:	681a      	ldr	r2, [r3, #0]
 8002718:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800271c:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 800271e:	685a      	ldr	r2, [r3, #4]
 8002720:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 8002724:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8002726:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 800272a:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 800272c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002730:	4b03      	ldr	r3, [pc, #12]	; (8002740 <SystemInit+0x48>)
 8002732:	609a      	str	r2, [r3, #8]
 8002734:	4770      	bx	lr
 8002736:	bf00      	nop
 8002738:	40021000 	.word	0x40021000
 800273c:	f8ff0000 	.word	0xf8ff0000
 8002740:	e000ed00 	.word	0xe000ed00

08002744 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8002744:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8002746:	2200      	movs	r2, #0
 8002748:	490e      	ldr	r1, [pc, #56]	; (8002784 <MX_USB_DEVICE_Init+0x40>)
 800274a:	480f      	ldr	r0, [pc, #60]	; (8002788 <MX_USB_DEVICE_Init+0x44>)
 800274c:	f7ff faf2 	bl	8001d34 <USBD_Init>
 8002750:	b108      	cbz	r0, 8002756 <MX_USB_DEVICE_Init+0x12>
  {
    Error_Handler();
 8002752:	f7ff ff5b 	bl	800260c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8002756:	490d      	ldr	r1, [pc, #52]	; (800278c <MX_USB_DEVICE_Init+0x48>)
 8002758:	480b      	ldr	r0, [pc, #44]	; (8002788 <MX_USB_DEVICE_Init+0x44>)
 800275a:	f7ff fb0d 	bl	8001d78 <USBD_RegisterClass>
 800275e:	b108      	cbz	r0, 8002764 <MX_USB_DEVICE_Init+0x20>
  {
    Error_Handler();
 8002760:	f7ff ff54 	bl	800260c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8002764:	490a      	ldr	r1, [pc, #40]	; (8002790 <MX_USB_DEVICE_Init+0x4c>)
 8002766:	4808      	ldr	r0, [pc, #32]	; (8002788 <MX_USB_DEVICE_Init+0x44>)
 8002768:	f7ff fabb 	bl	8001ce2 <USBD_CDC_RegisterInterface>
 800276c:	b108      	cbz	r0, 8002772 <MX_USB_DEVICE_Init+0x2e>
  {
    Error_Handler();
 800276e:	f7ff ff4d 	bl	800260c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8002772:	4805      	ldr	r0, [pc, #20]	; (8002788 <MX_USB_DEVICE_Init+0x44>)
 8002774:	f7ff fb16 	bl	8001da4 <USBD_Start>
 8002778:	b118      	cbz	r0, 8002782 <MX_USB_DEVICE_Init+0x3e>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800277a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 800277e:	f7ff bf45 	b.w	800260c <Error_Handler>
 8002782:	bd08      	pop	{r3, pc}
 8002784:	2000012c 	.word	0x2000012c
 8002788:	20000430 	.word	0x20000430
 800278c:	20000008 	.word	0x20000008
 8002790:	2000011c 	.word	0x2000011c

08002794 <CDC_DeInit_FS>:
static int8_t CDC_DeInit_FS(void)
{
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
  /* USER CODE END 4 */
}
 8002794:	2000      	movs	r0, #0
 8002796:	4770      	bx	lr

08002798 <CDC_Control_FS>:
    break;
  }

  return (USBD_OK);
  /* USER CODE END 5 */
}
 8002798:	2000      	movs	r0, #0
 800279a:	4770      	bx	lr

0800279c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800279c:	b510      	push	{r4, lr}
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800279e:	4c05      	ldr	r4, [pc, #20]	; (80027b4 <CDC_Receive_FS+0x18>)
 80027a0:	4601      	mov	r1, r0
 80027a2:	4620      	mov	r0, r4
 80027a4:	f7ff faac 	bl	8001d00 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80027a8:	4620      	mov	r0, r4
 80027aa:	f7ff faaf 	bl	8001d0c <USBD_CDC_ReceivePacket>
  return (USBD_OK);
  /* USER CODE END 6 */
}
 80027ae:	2000      	movs	r0, #0
 80027b0:	bd10      	pop	{r4, pc}
 80027b2:	bf00      	nop
 80027b4:	20000430 	.word	0x20000430

080027b8 <CDC_Init_FS>:
{
 80027b8:	b510      	push	{r4, lr}
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80027ba:	4c06      	ldr	r4, [pc, #24]	; (80027d4 <CDC_Init_FS+0x1c>)
 80027bc:	2200      	movs	r2, #0
 80027be:	4906      	ldr	r1, [pc, #24]	; (80027d8 <CDC_Init_FS+0x20>)
 80027c0:	4620      	mov	r0, r4
 80027c2:	f7ff fa95 	bl	8001cf0 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80027c6:	4905      	ldr	r1, [pc, #20]	; (80027dc <CDC_Init_FS+0x24>)
 80027c8:	4620      	mov	r0, r4
 80027ca:	f7ff fa99 	bl	8001d00 <USBD_CDC_SetRxBuffer>
}
 80027ce:	2000      	movs	r0, #0
 80027d0:	bd10      	pop	{r4, pc}
 80027d2:	bf00      	nop
 80027d4:	20000430 	.word	0x20000430
 80027d8:	20000adc 	.word	0x20000adc
 80027dc:	200006f4 	.word	0x200006f4

080027e0 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80027e0:	b507      	push	{r0, r1, r2, lr}
  if(pcdHandle->Instance==USB)
 80027e2:	4b0d      	ldr	r3, [pc, #52]	; (8002818 <HAL_PCD_MspInit+0x38>)
 80027e4:	6802      	ldr	r2, [r0, #0]
 80027e6:	429a      	cmp	r2, r3
 80027e8:	d112      	bne.n	8002810 <HAL_PCD_MspInit+0x30>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80027ea:	f503 33da 	add.w	r3, r3, #111616	; 0x1b400
 80027ee:	69da      	ldr	r2, [r3, #28]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 80027f0:	2014      	movs	r0, #20
    __HAL_RCC_USB_CLK_ENABLE();
 80027f2:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80027f6:	61da      	str	r2, [r3, #28]
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 80027f8:	2200      	movs	r2, #0
    __HAL_RCC_USB_CLK_ENABLE();
 80027fa:	69db      	ldr	r3, [r3, #28]
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 80027fc:	4611      	mov	r1, r2
    __HAL_RCC_USB_CLK_ENABLE();
 80027fe:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002802:	9301      	str	r3, [sp, #4]
 8002804:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8002806:	f7fd fd0d 	bl	8000224 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800280a:	2014      	movs	r0, #20
 800280c:	f7fd fd3e 	bl	800028c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8002810:	b003      	add	sp, #12
 8002812:	f85d fb04 	ldr.w	pc, [sp], #4
 8002816:	bf00      	nop
 8002818:	40005c00 	.word	0x40005c00

0800281c <HAL_PCD_SetupStageCallback>:
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800281c:	f500 710c 	add.w	r1, r0, #560	; 0x230
 8002820:	f8d0 0268 	ldr.w	r0, [r0, #616]	; 0x268
 8002824:	f7ff bad5 	b.w	8001dd2 <USBD_LL_SetupStage>

08002828 <HAL_PCD_DataOutStageCallback>:
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8002828:	eb00 1341 	add.w	r3, r0, r1, lsl #5
 800282c:	f8d3 213c 	ldr.w	r2, [r3, #316]	; 0x13c
 8002830:	f8d0 0268 	ldr.w	r0, [r0, #616]	; 0x268
 8002834:	f7ff bafa 	b.w	8001e2c <USBD_LL_DataOutStage>

08002838 <HAL_PCD_DataInStageCallback>:
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8002838:	eb00 1341 	add.w	r3, r0, r1, lsl #5
 800283c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800283e:	f8d0 0268 	ldr.w	r0, [r0, #616]	; 0x268
 8002842:	f7ff bb2d 	b.w	8001ea0 <USBD_LL_DataInStage>

08002846 <HAL_PCD_SOFCallback>:
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8002846:	f8d0 0268 	ldr.w	r0, [r0, #616]	; 0x268
 800284a:	f7ff bbc1 	b.w	8001fd0 <USBD_LL_SOF>

0800284e <HAL_PCD_ResetCallback>:
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800284e:	6883      	ldr	r3, [r0, #8]
{ 
 8002850:	b510      	push	{r4, lr}
  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8002852:	2b02      	cmp	r3, #2
{ 
 8002854:	4604      	mov	r4, r0
  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8002856:	d001      	beq.n	800285c <HAL_PCD_ResetCallback+0xe>
  {
    Error_Handler();
 8002858:	f7ff fed8 	bl	800260c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800285c:	f8d4 0268 	ldr.w	r0, [r4, #616]	; 0x268
 8002860:	2101      	movs	r1, #1
 8002862:	f7ff fb9f 	bl	8001fa4 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8002866:	f8d4 0268 	ldr.w	r0, [r4, #616]	; 0x268
}
 800286a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800286e:	f7ff bb72 	b.w	8001f56 <USBD_LL_Reset>
	...

08002874 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8002874:	b510      	push	{r4, lr}
 8002876:	4604      	mov	r4, r0
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8002878:	f8d0 0268 	ldr.w	r0, [r0, #616]	; 0x268
 800287c:	f7ff fb95 	bl	8001faa <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8002880:	69a3      	ldr	r3, [r4, #24]
 8002882:	b123      	cbz	r3, 800288e <HAL_PCD_SuspendCallback+0x1a>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8002884:	4a02      	ldr	r2, [pc, #8]	; (8002890 <HAL_PCD_SuspendCallback+0x1c>)
 8002886:	6913      	ldr	r3, [r2, #16]
 8002888:	f043 0306 	orr.w	r3, r3, #6
 800288c:	6113      	str	r3, [r2, #16]
 800288e:	bd10      	pop	{r4, pc}
 8002890:	e000ed00 	.word	0xe000ed00

08002894 <HAL_PCD_ResumeCallback>:
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8002894:	f8d0 0268 	ldr.w	r0, [r0, #616]	; 0x268
 8002898:	f7ff bb90 	b.w	8001fbc <USBD_LL_Resume>

0800289c <USBD_LL_Init>:
  hpcd_USB_FS.pData = pdev;
  pdev->pData = &hpcd_USB_FS;

  hpcd_USB_FS.Instance = USB;
  hpcd_USB_FS.Init.dev_endpoints = 8;
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800289c:	2302      	movs	r3, #2
 800289e:	2208      	movs	r2, #8
{
 80028a0:	b510      	push	{r4, lr}
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80028a2:	491c      	ldr	r1, [pc, #112]	; (8002914 <USBD_LL_Init+0x78>)
{
 80028a4:	4604      	mov	r4, r0
  hpcd_USB_FS.pData = pdev;
 80028a6:	481c      	ldr	r0, [pc, #112]	; (8002918 <USBD_LL_Init+0x7c>)
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80028a8:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80028ac:	2300      	movs	r3, #0
  pdev->pData = &hpcd_USB_FS;
 80028ae:	f8c4 02c0 	str.w	r0, [r4, #704]	; 0x2c0
  hpcd_USB_FS.pData = pdev;
 80028b2:	f8c0 4268 	str.w	r4, [r0, #616]	; 0x268
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80028b6:	6183      	str	r3, [r0, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 80028b8:	61c3      	str	r3, [r0, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80028ba:	6203      	str	r3, [r0, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80028bc:	f7fd fdf7 	bl	80004ae <HAL_PCD_Init>
 80028c0:	b108      	cbz	r0, 80028c6 <USBD_LL_Init+0x2a>
  {
    Error_Handler( );
 80028c2:	f7ff fea3 	bl	800260c <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 80028c6:	2200      	movs	r2, #0
 80028c8:	2318      	movs	r3, #24
 80028ca:	4611      	mov	r1, r2
 80028cc:	f8d4 02c0 	ldr.w	r0, [r4, #704]	; 0x2c0
 80028d0:	f7fe f9aa 	bl	8000c28 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 80028d4:	2358      	movs	r3, #88	; 0x58
 80028d6:	2200      	movs	r2, #0
 80028d8:	2180      	movs	r1, #128	; 0x80
 80028da:	f8d4 02c0 	ldr.w	r0, [r4, #704]	; 0x2c0
 80028de:	f7fe f9a3 	bl	8000c28 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 80028e2:	23c0      	movs	r3, #192	; 0xc0
 80028e4:	2200      	movs	r2, #0
 80028e6:	2181      	movs	r1, #129	; 0x81
 80028e8:	f8d4 02c0 	ldr.w	r0, [r4, #704]	; 0x2c0
 80028ec:	f7fe f99c 	bl	8000c28 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 80028f0:	f44f 7388 	mov.w	r3, #272	; 0x110
 80028f4:	2200      	movs	r2, #0
 80028f6:	2101      	movs	r1, #1
 80028f8:	f8d4 02c0 	ldr.w	r0, [r4, #704]	; 0x2c0
 80028fc:	f7fe f994 	bl	8000c28 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8002900:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002904:	2200      	movs	r2, #0
 8002906:	2182      	movs	r1, #130	; 0x82
 8002908:	f8d4 02c0 	ldr.w	r0, [r4, #704]	; 0x2c0
 800290c:	f7fe f98c 	bl	8000c28 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
}
 8002910:	2000      	movs	r0, #0
 8002912:	bd10      	pop	{r4, pc}
 8002914:	40005c00 	.word	0x40005c00
 8002918:	20000ec4 	.word	0x20000ec4

0800291c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800291c:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
 
  hal_status = HAL_PCD_Start(pdev->pData);
 800291e:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8002922:	f7fd fe39 	bl	8000598 <HAL_PCD_Start>
 8002926:	2803      	cmp	r0, #3
 8002928:	bf9a      	itte	ls
 800292a:	4b02      	ldrls	r3, [pc, #8]	; (8002934 <USBD_LL_Start+0x18>)
 800292c:	5c18      	ldrbls	r0, [r3, r0]
 800292e:	2002      	movhi	r0, #2
     
  usb_status =  USBD_Get_USB_Status(hal_status);
  
  return usb_status;
}
 8002930:	bd08      	pop	{r3, pc}
 8002932:	bf00      	nop
 8002934:	08003adb 	.word	0x08003adb

08002938 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8002938:	b510      	push	{r4, lr}
 800293a:	461c      	mov	r4, r3
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800293c:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8002940:	4613      	mov	r3, r2
 8002942:	4622      	mov	r2, r4
 8002944:	f7fd fe53 	bl	80005ee <HAL_PCD_EP_Open>
 8002948:	2803      	cmp	r0, #3
 800294a:	bf9a      	itte	ls
 800294c:	4b01      	ldrls	r3, [pc, #4]	; (8002954 <USBD_LL_OpenEP+0x1c>)
 800294e:	5c18      	ldrbls	r0, [r3, r0]
 8002950:	2002      	movhi	r0, #2

  usb_status =  USBD_Get_USB_Status(hal_status);
 
  return usb_status;
}
 8002952:	bd10      	pop	{r4, pc}
 8002954:	08003adb 	.word	0x08003adb

08002958 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8002958:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800295a:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 800295e:	f7fd fe79 	bl	8000654 <HAL_PCD_EP_Close>
 8002962:	2803      	cmp	r0, #3
 8002964:	bf9a      	itte	ls
 8002966:	4b02      	ldrls	r3, [pc, #8]	; (8002970 <USBD_LL_CloseEP+0x18>)
 8002968:	5c18      	ldrbls	r0, [r3, r0]
 800296a:	2002      	movhi	r0, #2
      
  usb_status =  USBD_Get_USB_Status(hal_status);

  return usb_status;  
}
 800296c:	bd08      	pop	{r3, pc}
 800296e:	bf00      	nop
 8002970:	08003adb 	.word	0x08003adb

08002974 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8002974:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8002976:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 800297a:	f7fe f8ef 	bl	8000b5c <HAL_PCD_EP_SetStall>
 800297e:	2803      	cmp	r0, #3
 8002980:	bf9a      	itte	ls
 8002982:	4b02      	ldrls	r3, [pc, #8]	; (800298c <USBD_LL_StallEP+0x18>)
 8002984:	5c18      	ldrbls	r0, [r3, r0]
 8002986:	2002      	movhi	r0, #2

  usb_status =  USBD_Get_USB_Status(hal_status);
 
  return usb_status;  
}
 8002988:	bd08      	pop	{r3, pc}
 800298a:	bf00      	nop
 800298c:	08003adb 	.word	0x08003adb

08002990 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8002990:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);  
 8002992:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8002996:	f7fe f915 	bl	8000bc4 <HAL_PCD_EP_ClrStall>
 800299a:	2803      	cmp	r0, #3
 800299c:	bf9a      	itte	ls
 800299e:	4b02      	ldrls	r3, [pc, #8]	; (80029a8 <USBD_LL_ClearStallEP+0x18>)
 80029a0:	5c18      	ldrbls	r0, [r3, r0]
 80029a2:	2002      	movhi	r0, #2
     
  usb_status =  USBD_Get_USB_Status(hal_status);

  return usb_status; 
}
 80029a4:	bd08      	pop	{r3, pc}
 80029a6:	bf00      	nop
 80029a8:	08003adb 	.word	0x08003adb

080029ac <USBD_LL_IsStallEP>:
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
  
  if((ep_addr & 0x80) == 0x80)
 80029ac:	060a      	lsls	r2, r1, #24
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80029ae:	f8d0 32c0 	ldr.w	r3, [r0, #704]	; 0x2c0
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 80029b2:	bf45      	ittet	mi
 80029b4:	f001 017f 	andmi.w	r1, r1, #127	; 0x7f
 80029b8:	eb03 1341 	addmi.w	r3, r3, r1, lsl #5
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 80029bc:	eb03 1341 	addpl.w	r3, r3, r1, lsl #5
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 80029c0:	f893 002a 	ldrbmi.w	r0, [r3, #42]	; 0x2a
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 80029c4:	bf58      	it	pl
 80029c6:	f893 012a 	ldrbpl.w	r0, [r3, #298]	; 0x12a
  }
}
 80029ca:	4770      	bx	lr

080029cc <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80029cc:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80029ce:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 80029d2:	f7fd fdf8 	bl	80005c6 <HAL_PCD_SetAddress>
 80029d6:	2803      	cmp	r0, #3
 80029d8:	bf9a      	itte	ls
 80029da:	4b02      	ldrls	r3, [pc, #8]	; (80029e4 <USBD_LL_SetUSBAddress+0x18>)
 80029dc:	5c18      	ldrbls	r0, [r3, r0]
 80029de:	2002      	movhi	r0, #2
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 
  return usb_status;  
}
 80029e0:	bd08      	pop	{r3, pc}
 80029e2:	bf00      	nop
 80029e4:	08003adb 	.word	0x08003adb

080029e8 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80029e8:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80029ea:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 80029ee:	f7fd fe79 	bl	80006e4 <HAL_PCD_EP_Transmit>
 80029f2:	2803      	cmp	r0, #3
 80029f4:	bf9a      	itte	ls
 80029f6:	4b02      	ldrls	r3, [pc, #8]	; (8002a00 <USBD_LL_Transmit+0x18>)
 80029f8:	5c18      	ldrbls	r0, [r3, r0]
 80029fa:	2002      	movhi	r0, #2
     
  usb_status =  USBD_Get_USB_Status(hal_status);
  
  return usb_status;    
}
 80029fc:	bd08      	pop	{r3, pc}
 80029fe:	bf00      	nop
 8002a00:	08003adb 	.word	0x08003adb

08002a04 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8002a04:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8002a06:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8002a0a:	f7fd fe4c 	bl	80006a6 <HAL_PCD_EP_Receive>
 8002a0e:	2803      	cmp	r0, #3
 8002a10:	bf9a      	itte	ls
 8002a12:	4b02      	ldrls	r3, [pc, #8]	; (8002a1c <USBD_LL_PrepareReceive+0x18>)
 8002a14:	5c18      	ldrbls	r0, [r3, r0]
 8002a16:	2002      	movhi	r0, #2
     
  usb_status =  USBD_Get_USB_Status(hal_status);
  	
  return usb_status; 
}
 8002a18:	bd08      	pop	{r3, pc}
 8002a1a:	bf00      	nop
 8002a1c:	08003adb 	.word	0x08003adb

08002a20 <USBD_LL_GetRxDataSize>:
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8002a20:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8002a24:	f7fd be57 	b.w	80006d6 <HAL_PCD_EP_GetRxCount>

08002a28 <USBD_static_malloc>:
  */
void *USBD_static_malloc(uint32_t size)
{
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
}
 8002a28:	4800      	ldr	r0, [pc, #0]	; (8002a2c <USBD_static_malloc+0x4>)
 8002a2a:	4770      	bx	lr
 8002a2c:	20000204 	.word	0x20000204

08002a30 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8002a30:	4770      	bx	lr

08002a32 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8002a32:	4770      	bx	lr

08002a34 <USBD_FS_DeviceDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8002a34:	2312      	movs	r3, #18
  return USBD_FS_DeviceDesc;
}
 8002a36:	4801      	ldr	r0, [pc, #4]	; (8002a3c <USBD_FS_DeviceDescriptor+0x8>)
  *length = sizeof(USBD_FS_DeviceDesc);
 8002a38:	800b      	strh	r3, [r1, #0]
}
 8002a3a:	4770      	bx	lr
 8002a3c:	20000148 	.word	0x20000148

08002a40 <USBD_FS_LangIDStrDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8002a40:	2304      	movs	r3, #4
  return USBD_LangIDDesc;
}
 8002a42:	4801      	ldr	r0, [pc, #4]	; (8002a48 <USBD_FS_LangIDStrDescriptor+0x8>)
  *length = sizeof(USBD_LangIDDesc);
 8002a44:	800b      	strh	r3, [r1, #0]
}
 8002a46:	4770      	bx	lr
 8002a48:	2000015c 	.word	0x2000015c

08002a4c <IntToUnicode>:
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
  uint8_t idx = 0;

  for (idx = 0; idx < len; idx++)
 8002a4c:	2300      	movs	r3, #0
{
 8002a4e:	b530      	push	{r4, r5, lr}
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
    }

    value = value << 4;

    pbuf[2 * idx + 1] = 0;
 8002a50:	461d      	mov	r5, r3
  for (idx = 0; idx < len; idx++)
 8002a52:	b2dc      	uxtb	r4, r3
 8002a54:	42a2      	cmp	r2, r4
 8002a56:	d800      	bhi.n	8002a5a <IntToUnicode+0xe>
  }
}
 8002a58:	bd30      	pop	{r4, r5, pc}
    if (((value >> 28)) < 0xA)
 8002a5a:	0f04      	lsrs	r4, r0, #28
 8002a5c:	2c09      	cmp	r4, #9
      pbuf[2 * idx] = (value >> 28) + '0';
 8002a5e:	bf94      	ite	ls
 8002a60:	3430      	addls	r4, #48	; 0x30
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8002a62:	3437      	addhi	r4, #55	; 0x37
 8002a64:	f801 4013 	strb.w	r4, [r1, r3, lsl #1]
    pbuf[2 * idx + 1] = 0;
 8002a68:	eb01 0443 	add.w	r4, r1, r3, lsl #1
    value = value << 4;
 8002a6c:	0100      	lsls	r0, r0, #4
    pbuf[2 * idx + 1] = 0;
 8002a6e:	7065      	strb	r5, [r4, #1]
 8002a70:	3301      	adds	r3, #1
 8002a72:	e7ee      	b.n	8002a52 <IntToUnicode+0x6>

08002a74 <USBD_FS_SerialStrDescriptor>:
  *length = USB_SIZ_STRING_SERIAL;
 8002a74:	231a      	movs	r3, #26
{
 8002a76:	b510      	push	{r4, lr}
  *length = USB_SIZ_STRING_SERIAL;
 8002a78:	800b      	strh	r3, [r1, #0]
  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8002a7a:	4b09      	ldr	r3, [pc, #36]	; (8002aa0 <USBD_FS_SerialStrDescriptor+0x2c>)
 8002a7c:	6818      	ldr	r0, [r3, #0]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8002a7e:	3308      	adds	r3, #8
  deviceserial0 += deviceserial2;
 8002a80:	681b      	ldr	r3, [r3, #0]
  if (deviceserial0 != 0)
 8002a82:	18c0      	adds	r0, r0, r3
 8002a84:	d00a      	beq.n	8002a9c <USBD_FS_SerialStrDescriptor+0x28>
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8002a86:	4b07      	ldr	r3, [pc, #28]	; (8002aa4 <USBD_FS_SerialStrDescriptor+0x30>)
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8002a88:	2208      	movs	r2, #8
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8002a8a:	681c      	ldr	r4, [r3, #0]
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8002a8c:	4906      	ldr	r1, [pc, #24]	; (8002aa8 <USBD_FS_SerialStrDescriptor+0x34>)
 8002a8e:	f7ff ffdd 	bl	8002a4c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8002a92:	2204      	movs	r2, #4
 8002a94:	4905      	ldr	r1, [pc, #20]	; (8002aac <USBD_FS_SerialStrDescriptor+0x38>)
 8002a96:	4620      	mov	r0, r4
 8002a98:	f7ff ffd8 	bl	8002a4c <IntToUnicode>
}
 8002a9c:	4804      	ldr	r0, [pc, #16]	; (8002ab0 <USBD_FS_SerialStrDescriptor+0x3c>)
 8002a9e:	bd10      	pop	{r4, pc}
 8002aa0:	1ffff7e8 	.word	0x1ffff7e8
 8002aa4:	1ffff7ec 	.word	0x1ffff7ec
 8002aa8:	20000162 	.word	0x20000162
 8002aac:	20000172 	.word	0x20000172
 8002ab0:	20000160 	.word	0x20000160

08002ab4 <USBD_FS_ManufacturerStrDescriptor>:
{
 8002ab4:	b510      	push	{r4, lr}
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8002ab6:	4c04      	ldr	r4, [pc, #16]	; (8002ac8 <USBD_FS_ManufacturerStrDescriptor+0x14>)
 8002ab8:	460a      	mov	r2, r1
 8002aba:	4804      	ldr	r0, [pc, #16]	; (8002acc <USBD_FS_ManufacturerStrDescriptor+0x18>)
 8002abc:	4621      	mov	r1, r4
 8002abe:	f7ff fc90 	bl	80023e2 <USBD_GetString>
}
 8002ac2:	4620      	mov	r0, r4
 8002ac4:	bd10      	pop	{r4, pc}
 8002ac6:	bf00      	nop
 8002ac8:	20001130 	.word	0x20001130
 8002acc:	08003af8 	.word	0x08003af8

08002ad0 <USBD_FS_ProductStrDescriptor>:
{
 8002ad0:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8002ad2:	4c04      	ldr	r4, [pc, #16]	; (8002ae4 <USBD_FS_ProductStrDescriptor+0x14>)
 8002ad4:	460a      	mov	r2, r1
 8002ad6:	4804      	ldr	r0, [pc, #16]	; (8002ae8 <USBD_FS_ProductStrDescriptor+0x18>)
 8002ad8:	4621      	mov	r1, r4
 8002ada:	f7ff fc82 	bl	80023e2 <USBD_GetString>
}
 8002ade:	4620      	mov	r0, r4
 8002ae0:	bd10      	pop	{r4, pc}
 8002ae2:	bf00      	nop
 8002ae4:	20001130 	.word	0x20001130
 8002ae8:	08003b0b 	.word	0x08003b0b

08002aec <USBD_FS_ConfigStrDescriptor>:
{
 8002aec:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8002aee:	4c04      	ldr	r4, [pc, #16]	; (8002b00 <USBD_FS_ConfigStrDescriptor+0x14>)
 8002af0:	460a      	mov	r2, r1
 8002af2:	4804      	ldr	r0, [pc, #16]	; (8002b04 <USBD_FS_ConfigStrDescriptor+0x18>)
 8002af4:	4621      	mov	r1, r4
 8002af6:	f7ff fc74 	bl	80023e2 <USBD_GetString>
}
 8002afa:	4620      	mov	r0, r4
 8002afc:	bd10      	pop	{r4, pc}
 8002afe:	bf00      	nop
 8002b00:	20001130 	.word	0x20001130
 8002b04:	08003adf 	.word	0x08003adf

08002b08 <USBD_FS_InterfaceStrDescriptor>:
{
 8002b08:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8002b0a:	4c04      	ldr	r4, [pc, #16]	; (8002b1c <USBD_FS_InterfaceStrDescriptor+0x14>)
 8002b0c:	460a      	mov	r2, r1
 8002b0e:	4804      	ldr	r0, [pc, #16]	; (8002b20 <USBD_FS_InterfaceStrDescriptor+0x18>)
 8002b10:	4621      	mov	r1, r4
 8002b12:	f7ff fc66 	bl	80023e2 <USBD_GetString>
}
 8002b16:	4620      	mov	r0, r4
 8002b18:	bd10      	pop	{r4, pc}
 8002b1a:	bf00      	nop
 8002b1c:	20001130 	.word	0x20001130
 8002b20:	08003aea 	.word	0x08003aea

08002b24 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8002b24:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8002b26:	e003      	b.n	8002b30 <LoopCopyDataInit>

08002b28 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8002b28:	4b0b      	ldr	r3, [pc, #44]	; (8002b58 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8002b2a:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8002b2c:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8002b2e:	3104      	adds	r1, #4

08002b30 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8002b30:	480a      	ldr	r0, [pc, #40]	; (8002b5c <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8002b32:	4b0b      	ldr	r3, [pc, #44]	; (8002b60 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8002b34:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8002b36:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8002b38:	d3f6      	bcc.n	8002b28 <CopyDataInit>
  ldr r2, =_sbss
 8002b3a:	4a0a      	ldr	r2, [pc, #40]	; (8002b64 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8002b3c:	e002      	b.n	8002b44 <LoopFillZerobss>

08002b3e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8002b3e:	2300      	movs	r3, #0
  str r3, [r2], #4
 8002b40:	f842 3b04 	str.w	r3, [r2], #4

08002b44 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8002b44:	4b08      	ldr	r3, [pc, #32]	; (8002b68 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8002b46:	429a      	cmp	r2, r3
  bcc FillZerobss
 8002b48:	d3f9      	bcc.n	8002b3e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002b4a:	f7ff fdd5 	bl	80026f8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002b4e:	f000 f815 	bl	8002b7c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002b52:	f7ff fcdd 	bl	8002510 <main>
  bx lr
 8002b56:	4770      	bx	lr
  ldr r3, =_sidata
 8002b58:	08003bc4 	.word	0x08003bc4
  ldr r0, =_sdata
 8002b5c:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8002b60:	200001e0 	.word	0x200001e0
  ldr r2, =_sbss
 8002b64:	200001e0 	.word	0x200001e0
  ldr r3, = _ebss
 8002b68:	20001334 	.word	0x20001334

08002b6c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002b6c:	e7fe      	b.n	8002b6c <ADC1_2_IRQHandler>
	...

08002b70 <__errno>:
 8002b70:	4b01      	ldr	r3, [pc, #4]	; (8002b78 <__errno+0x8>)
 8002b72:	6818      	ldr	r0, [r3, #0]
 8002b74:	4770      	bx	lr
 8002b76:	bf00      	nop
 8002b78:	2000017c 	.word	0x2000017c

08002b7c <__libc_init_array>:
 8002b7c:	b570      	push	{r4, r5, r6, lr}
 8002b7e:	2500      	movs	r5, #0
 8002b80:	4e0c      	ldr	r6, [pc, #48]	; (8002bb4 <__libc_init_array+0x38>)
 8002b82:	4c0d      	ldr	r4, [pc, #52]	; (8002bb8 <__libc_init_array+0x3c>)
 8002b84:	1ba4      	subs	r4, r4, r6
 8002b86:	10a4      	asrs	r4, r4, #2
 8002b88:	42a5      	cmp	r5, r4
 8002b8a:	d109      	bne.n	8002ba0 <__libc_init_array+0x24>
 8002b8c:	f000 ff70 	bl	8003a70 <_init>
 8002b90:	2500      	movs	r5, #0
 8002b92:	4e0a      	ldr	r6, [pc, #40]	; (8002bbc <__libc_init_array+0x40>)
 8002b94:	4c0a      	ldr	r4, [pc, #40]	; (8002bc0 <__libc_init_array+0x44>)
 8002b96:	1ba4      	subs	r4, r4, r6
 8002b98:	10a4      	asrs	r4, r4, #2
 8002b9a:	42a5      	cmp	r5, r4
 8002b9c:	d105      	bne.n	8002baa <__libc_init_array+0x2e>
 8002b9e:	bd70      	pop	{r4, r5, r6, pc}
 8002ba0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002ba4:	4798      	blx	r3
 8002ba6:	3501      	adds	r5, #1
 8002ba8:	e7ee      	b.n	8002b88 <__libc_init_array+0xc>
 8002baa:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002bae:	4798      	blx	r3
 8002bb0:	3501      	adds	r5, #1
 8002bb2:	e7f2      	b.n	8002b9a <__libc_init_array+0x1e>
 8002bb4:	08003bbc 	.word	0x08003bbc
 8002bb8:	08003bbc 	.word	0x08003bbc
 8002bbc:	08003bbc 	.word	0x08003bbc
 8002bc0:	08003bc0 	.word	0x08003bc0

08002bc4 <memset>:
 8002bc4:	4603      	mov	r3, r0
 8002bc6:	4402      	add	r2, r0
 8002bc8:	4293      	cmp	r3, r2
 8002bca:	d100      	bne.n	8002bce <memset+0xa>
 8002bcc:	4770      	bx	lr
 8002bce:	f803 1b01 	strb.w	r1, [r3], #1
 8002bd2:	e7f9      	b.n	8002bc8 <memset+0x4>

08002bd4 <iprintf>:
 8002bd4:	b40f      	push	{r0, r1, r2, r3}
 8002bd6:	4b0a      	ldr	r3, [pc, #40]	; (8002c00 <iprintf+0x2c>)
 8002bd8:	b513      	push	{r0, r1, r4, lr}
 8002bda:	681c      	ldr	r4, [r3, #0]
 8002bdc:	b124      	cbz	r4, 8002be8 <iprintf+0x14>
 8002bde:	69a3      	ldr	r3, [r4, #24]
 8002be0:	b913      	cbnz	r3, 8002be8 <iprintf+0x14>
 8002be2:	4620      	mov	r0, r4
 8002be4:	f000 f862 	bl	8002cac <__sinit>
 8002be8:	ab05      	add	r3, sp, #20
 8002bea:	9a04      	ldr	r2, [sp, #16]
 8002bec:	68a1      	ldr	r1, [r4, #8]
 8002bee:	4620      	mov	r0, r4
 8002bf0:	9301      	str	r3, [sp, #4]
 8002bf2:	f000 f96b 	bl	8002ecc <_vfiprintf_r>
 8002bf6:	b002      	add	sp, #8
 8002bf8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002bfc:	b004      	add	sp, #16
 8002bfe:	4770      	bx	lr
 8002c00:	2000017c 	.word	0x2000017c

08002c04 <putchar>:
 8002c04:	b538      	push	{r3, r4, r5, lr}
 8002c06:	4b08      	ldr	r3, [pc, #32]	; (8002c28 <putchar+0x24>)
 8002c08:	4605      	mov	r5, r0
 8002c0a:	681c      	ldr	r4, [r3, #0]
 8002c0c:	b124      	cbz	r4, 8002c18 <putchar+0x14>
 8002c0e:	69a3      	ldr	r3, [r4, #24]
 8002c10:	b913      	cbnz	r3, 8002c18 <putchar+0x14>
 8002c12:	4620      	mov	r0, r4
 8002c14:	f000 f84a 	bl	8002cac <__sinit>
 8002c18:	68a2      	ldr	r2, [r4, #8]
 8002c1a:	4629      	mov	r1, r5
 8002c1c:	4620      	mov	r0, r4
 8002c1e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002c22:	f000 bc01 	b.w	8003428 <_putc_r>
 8002c26:	bf00      	nop
 8002c28:	2000017c 	.word	0x2000017c

08002c2c <_cleanup_r>:
 8002c2c:	4901      	ldr	r1, [pc, #4]	; (8002c34 <_cleanup_r+0x8>)
 8002c2e:	f000 b8a9 	b.w	8002d84 <_fwalk_reent>
 8002c32:	bf00      	nop
 8002c34:	08003811 	.word	0x08003811

08002c38 <std.isra.0>:
 8002c38:	2300      	movs	r3, #0
 8002c3a:	b510      	push	{r4, lr}
 8002c3c:	4604      	mov	r4, r0
 8002c3e:	6003      	str	r3, [r0, #0]
 8002c40:	6043      	str	r3, [r0, #4]
 8002c42:	6083      	str	r3, [r0, #8]
 8002c44:	8181      	strh	r1, [r0, #12]
 8002c46:	6643      	str	r3, [r0, #100]	; 0x64
 8002c48:	81c2      	strh	r2, [r0, #14]
 8002c4a:	6103      	str	r3, [r0, #16]
 8002c4c:	6143      	str	r3, [r0, #20]
 8002c4e:	6183      	str	r3, [r0, #24]
 8002c50:	4619      	mov	r1, r3
 8002c52:	2208      	movs	r2, #8
 8002c54:	305c      	adds	r0, #92	; 0x5c
 8002c56:	f7ff ffb5 	bl	8002bc4 <memset>
 8002c5a:	4b05      	ldr	r3, [pc, #20]	; (8002c70 <std.isra.0+0x38>)
 8002c5c:	6224      	str	r4, [r4, #32]
 8002c5e:	6263      	str	r3, [r4, #36]	; 0x24
 8002c60:	4b04      	ldr	r3, [pc, #16]	; (8002c74 <std.isra.0+0x3c>)
 8002c62:	62a3      	str	r3, [r4, #40]	; 0x28
 8002c64:	4b04      	ldr	r3, [pc, #16]	; (8002c78 <std.isra.0+0x40>)
 8002c66:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002c68:	4b04      	ldr	r3, [pc, #16]	; (8002c7c <std.isra.0+0x44>)
 8002c6a:	6323      	str	r3, [r4, #48]	; 0x30
 8002c6c:	bd10      	pop	{r4, pc}
 8002c6e:	bf00      	nop
 8002c70:	080034b5 	.word	0x080034b5
 8002c74:	080034d7 	.word	0x080034d7
 8002c78:	0800350f 	.word	0x0800350f
 8002c7c:	08003533 	.word	0x08003533

08002c80 <__sfmoreglue>:
 8002c80:	b570      	push	{r4, r5, r6, lr}
 8002c82:	2568      	movs	r5, #104	; 0x68
 8002c84:	1e4a      	subs	r2, r1, #1
 8002c86:	4355      	muls	r5, r2
 8002c88:	460e      	mov	r6, r1
 8002c8a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8002c8e:	f000 f897 	bl	8002dc0 <_malloc_r>
 8002c92:	4604      	mov	r4, r0
 8002c94:	b140      	cbz	r0, 8002ca8 <__sfmoreglue+0x28>
 8002c96:	2100      	movs	r1, #0
 8002c98:	e880 0042 	stmia.w	r0, {r1, r6}
 8002c9c:	300c      	adds	r0, #12
 8002c9e:	60a0      	str	r0, [r4, #8]
 8002ca0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8002ca4:	f7ff ff8e 	bl	8002bc4 <memset>
 8002ca8:	4620      	mov	r0, r4
 8002caa:	bd70      	pop	{r4, r5, r6, pc}

08002cac <__sinit>:
 8002cac:	6983      	ldr	r3, [r0, #24]
 8002cae:	b510      	push	{r4, lr}
 8002cb0:	4604      	mov	r4, r0
 8002cb2:	bb33      	cbnz	r3, 8002d02 <__sinit+0x56>
 8002cb4:	6483      	str	r3, [r0, #72]	; 0x48
 8002cb6:	64c3      	str	r3, [r0, #76]	; 0x4c
 8002cb8:	6503      	str	r3, [r0, #80]	; 0x50
 8002cba:	4b12      	ldr	r3, [pc, #72]	; (8002d04 <__sinit+0x58>)
 8002cbc:	4a12      	ldr	r2, [pc, #72]	; (8002d08 <__sinit+0x5c>)
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	6282      	str	r2, [r0, #40]	; 0x28
 8002cc2:	4298      	cmp	r0, r3
 8002cc4:	bf04      	itt	eq
 8002cc6:	2301      	moveq	r3, #1
 8002cc8:	6183      	streq	r3, [r0, #24]
 8002cca:	f000 f81f 	bl	8002d0c <__sfp>
 8002cce:	6060      	str	r0, [r4, #4]
 8002cd0:	4620      	mov	r0, r4
 8002cd2:	f000 f81b 	bl	8002d0c <__sfp>
 8002cd6:	60a0      	str	r0, [r4, #8]
 8002cd8:	4620      	mov	r0, r4
 8002cda:	f000 f817 	bl	8002d0c <__sfp>
 8002cde:	2200      	movs	r2, #0
 8002ce0:	60e0      	str	r0, [r4, #12]
 8002ce2:	2104      	movs	r1, #4
 8002ce4:	6860      	ldr	r0, [r4, #4]
 8002ce6:	f7ff ffa7 	bl	8002c38 <std.isra.0>
 8002cea:	2201      	movs	r2, #1
 8002cec:	2109      	movs	r1, #9
 8002cee:	68a0      	ldr	r0, [r4, #8]
 8002cf0:	f7ff ffa2 	bl	8002c38 <std.isra.0>
 8002cf4:	2202      	movs	r2, #2
 8002cf6:	2112      	movs	r1, #18
 8002cf8:	68e0      	ldr	r0, [r4, #12]
 8002cfa:	f7ff ff9d 	bl	8002c38 <std.isra.0>
 8002cfe:	2301      	movs	r3, #1
 8002d00:	61a3      	str	r3, [r4, #24]
 8002d02:	bd10      	pop	{r4, pc}
 8002d04:	08003b24 	.word	0x08003b24
 8002d08:	08002c2d 	.word	0x08002c2d

08002d0c <__sfp>:
 8002d0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d0e:	4b1c      	ldr	r3, [pc, #112]	; (8002d80 <__sfp+0x74>)
 8002d10:	4607      	mov	r7, r0
 8002d12:	681e      	ldr	r6, [r3, #0]
 8002d14:	69b3      	ldr	r3, [r6, #24]
 8002d16:	b913      	cbnz	r3, 8002d1e <__sfp+0x12>
 8002d18:	4630      	mov	r0, r6
 8002d1a:	f7ff ffc7 	bl	8002cac <__sinit>
 8002d1e:	3648      	adds	r6, #72	; 0x48
 8002d20:	68b4      	ldr	r4, [r6, #8]
 8002d22:	6873      	ldr	r3, [r6, #4]
 8002d24:	3b01      	subs	r3, #1
 8002d26:	d503      	bpl.n	8002d30 <__sfp+0x24>
 8002d28:	6833      	ldr	r3, [r6, #0]
 8002d2a:	b133      	cbz	r3, 8002d3a <__sfp+0x2e>
 8002d2c:	6836      	ldr	r6, [r6, #0]
 8002d2e:	e7f7      	b.n	8002d20 <__sfp+0x14>
 8002d30:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8002d34:	b16d      	cbz	r5, 8002d52 <__sfp+0x46>
 8002d36:	3468      	adds	r4, #104	; 0x68
 8002d38:	e7f4      	b.n	8002d24 <__sfp+0x18>
 8002d3a:	2104      	movs	r1, #4
 8002d3c:	4638      	mov	r0, r7
 8002d3e:	f7ff ff9f 	bl	8002c80 <__sfmoreglue>
 8002d42:	6030      	str	r0, [r6, #0]
 8002d44:	2800      	cmp	r0, #0
 8002d46:	d1f1      	bne.n	8002d2c <__sfp+0x20>
 8002d48:	230c      	movs	r3, #12
 8002d4a:	4604      	mov	r4, r0
 8002d4c:	603b      	str	r3, [r7, #0]
 8002d4e:	4620      	mov	r0, r4
 8002d50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002d52:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002d56:	81e3      	strh	r3, [r4, #14]
 8002d58:	2301      	movs	r3, #1
 8002d5a:	6665      	str	r5, [r4, #100]	; 0x64
 8002d5c:	81a3      	strh	r3, [r4, #12]
 8002d5e:	6025      	str	r5, [r4, #0]
 8002d60:	60a5      	str	r5, [r4, #8]
 8002d62:	6065      	str	r5, [r4, #4]
 8002d64:	6125      	str	r5, [r4, #16]
 8002d66:	6165      	str	r5, [r4, #20]
 8002d68:	61a5      	str	r5, [r4, #24]
 8002d6a:	2208      	movs	r2, #8
 8002d6c:	4629      	mov	r1, r5
 8002d6e:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8002d72:	f7ff ff27 	bl	8002bc4 <memset>
 8002d76:	6365      	str	r5, [r4, #52]	; 0x34
 8002d78:	63a5      	str	r5, [r4, #56]	; 0x38
 8002d7a:	64a5      	str	r5, [r4, #72]	; 0x48
 8002d7c:	64e5      	str	r5, [r4, #76]	; 0x4c
 8002d7e:	e7e6      	b.n	8002d4e <__sfp+0x42>
 8002d80:	08003b24 	.word	0x08003b24

08002d84 <_fwalk_reent>:
 8002d84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002d88:	4680      	mov	r8, r0
 8002d8a:	4689      	mov	r9, r1
 8002d8c:	2600      	movs	r6, #0
 8002d8e:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8002d92:	b914      	cbnz	r4, 8002d9a <_fwalk_reent+0x16>
 8002d94:	4630      	mov	r0, r6
 8002d96:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002d9a:	68a5      	ldr	r5, [r4, #8]
 8002d9c:	6867      	ldr	r7, [r4, #4]
 8002d9e:	3f01      	subs	r7, #1
 8002da0:	d501      	bpl.n	8002da6 <_fwalk_reent+0x22>
 8002da2:	6824      	ldr	r4, [r4, #0]
 8002da4:	e7f5      	b.n	8002d92 <_fwalk_reent+0xe>
 8002da6:	89ab      	ldrh	r3, [r5, #12]
 8002da8:	2b01      	cmp	r3, #1
 8002daa:	d907      	bls.n	8002dbc <_fwalk_reent+0x38>
 8002dac:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002db0:	3301      	adds	r3, #1
 8002db2:	d003      	beq.n	8002dbc <_fwalk_reent+0x38>
 8002db4:	4629      	mov	r1, r5
 8002db6:	4640      	mov	r0, r8
 8002db8:	47c8      	blx	r9
 8002dba:	4306      	orrs	r6, r0
 8002dbc:	3568      	adds	r5, #104	; 0x68
 8002dbe:	e7ee      	b.n	8002d9e <_fwalk_reent+0x1a>

08002dc0 <_malloc_r>:
 8002dc0:	b570      	push	{r4, r5, r6, lr}
 8002dc2:	1ccd      	adds	r5, r1, #3
 8002dc4:	f025 0503 	bic.w	r5, r5, #3
 8002dc8:	3508      	adds	r5, #8
 8002dca:	2d0c      	cmp	r5, #12
 8002dcc:	bf38      	it	cc
 8002dce:	250c      	movcc	r5, #12
 8002dd0:	2d00      	cmp	r5, #0
 8002dd2:	4606      	mov	r6, r0
 8002dd4:	db01      	blt.n	8002dda <_malloc_r+0x1a>
 8002dd6:	42a9      	cmp	r1, r5
 8002dd8:	d903      	bls.n	8002de2 <_malloc_r+0x22>
 8002dda:	230c      	movs	r3, #12
 8002ddc:	6033      	str	r3, [r6, #0]
 8002dde:	2000      	movs	r0, #0
 8002de0:	bd70      	pop	{r4, r5, r6, pc}
 8002de2:	f000 fdc3 	bl	800396c <__malloc_lock>
 8002de6:	4a23      	ldr	r2, [pc, #140]	; (8002e74 <_malloc_r+0xb4>)
 8002de8:	6814      	ldr	r4, [r2, #0]
 8002dea:	4621      	mov	r1, r4
 8002dec:	b991      	cbnz	r1, 8002e14 <_malloc_r+0x54>
 8002dee:	4c22      	ldr	r4, [pc, #136]	; (8002e78 <_malloc_r+0xb8>)
 8002df0:	6823      	ldr	r3, [r4, #0]
 8002df2:	b91b      	cbnz	r3, 8002dfc <_malloc_r+0x3c>
 8002df4:	4630      	mov	r0, r6
 8002df6:	f000 fb4d 	bl	8003494 <_sbrk_r>
 8002dfa:	6020      	str	r0, [r4, #0]
 8002dfc:	4629      	mov	r1, r5
 8002dfe:	4630      	mov	r0, r6
 8002e00:	f000 fb48 	bl	8003494 <_sbrk_r>
 8002e04:	1c43      	adds	r3, r0, #1
 8002e06:	d126      	bne.n	8002e56 <_malloc_r+0x96>
 8002e08:	230c      	movs	r3, #12
 8002e0a:	4630      	mov	r0, r6
 8002e0c:	6033      	str	r3, [r6, #0]
 8002e0e:	f000 fdae 	bl	800396e <__malloc_unlock>
 8002e12:	e7e4      	b.n	8002dde <_malloc_r+0x1e>
 8002e14:	680b      	ldr	r3, [r1, #0]
 8002e16:	1b5b      	subs	r3, r3, r5
 8002e18:	d41a      	bmi.n	8002e50 <_malloc_r+0x90>
 8002e1a:	2b0b      	cmp	r3, #11
 8002e1c:	d90f      	bls.n	8002e3e <_malloc_r+0x7e>
 8002e1e:	600b      	str	r3, [r1, #0]
 8002e20:	18cc      	adds	r4, r1, r3
 8002e22:	50cd      	str	r5, [r1, r3]
 8002e24:	4630      	mov	r0, r6
 8002e26:	f000 fda2 	bl	800396e <__malloc_unlock>
 8002e2a:	f104 000b 	add.w	r0, r4, #11
 8002e2e:	1d23      	adds	r3, r4, #4
 8002e30:	f020 0007 	bic.w	r0, r0, #7
 8002e34:	1ac3      	subs	r3, r0, r3
 8002e36:	d01b      	beq.n	8002e70 <_malloc_r+0xb0>
 8002e38:	425a      	negs	r2, r3
 8002e3a:	50e2      	str	r2, [r4, r3]
 8002e3c:	bd70      	pop	{r4, r5, r6, pc}
 8002e3e:	428c      	cmp	r4, r1
 8002e40:	bf0b      	itete	eq
 8002e42:	6863      	ldreq	r3, [r4, #4]
 8002e44:	684b      	ldrne	r3, [r1, #4]
 8002e46:	6013      	streq	r3, [r2, #0]
 8002e48:	6063      	strne	r3, [r4, #4]
 8002e4a:	bf18      	it	ne
 8002e4c:	460c      	movne	r4, r1
 8002e4e:	e7e9      	b.n	8002e24 <_malloc_r+0x64>
 8002e50:	460c      	mov	r4, r1
 8002e52:	6849      	ldr	r1, [r1, #4]
 8002e54:	e7ca      	b.n	8002dec <_malloc_r+0x2c>
 8002e56:	1cc4      	adds	r4, r0, #3
 8002e58:	f024 0403 	bic.w	r4, r4, #3
 8002e5c:	42a0      	cmp	r0, r4
 8002e5e:	d005      	beq.n	8002e6c <_malloc_r+0xac>
 8002e60:	1a21      	subs	r1, r4, r0
 8002e62:	4630      	mov	r0, r6
 8002e64:	f000 fb16 	bl	8003494 <_sbrk_r>
 8002e68:	3001      	adds	r0, #1
 8002e6a:	d0cd      	beq.n	8002e08 <_malloc_r+0x48>
 8002e6c:	6025      	str	r5, [r4, #0]
 8002e6e:	e7d9      	b.n	8002e24 <_malloc_r+0x64>
 8002e70:	bd70      	pop	{r4, r5, r6, pc}
 8002e72:	bf00      	nop
 8002e74:	20000424 	.word	0x20000424
 8002e78:	20000428 	.word	0x20000428

08002e7c <__sfputc_r>:
 8002e7c:	6893      	ldr	r3, [r2, #8]
 8002e7e:	b410      	push	{r4}
 8002e80:	3b01      	subs	r3, #1
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	6093      	str	r3, [r2, #8]
 8002e86:	da08      	bge.n	8002e9a <__sfputc_r+0x1e>
 8002e88:	6994      	ldr	r4, [r2, #24]
 8002e8a:	42a3      	cmp	r3, r4
 8002e8c:	db02      	blt.n	8002e94 <__sfputc_r+0x18>
 8002e8e:	b2cb      	uxtb	r3, r1
 8002e90:	2b0a      	cmp	r3, #10
 8002e92:	d102      	bne.n	8002e9a <__sfputc_r+0x1e>
 8002e94:	bc10      	pop	{r4}
 8002e96:	f000 bb51 	b.w	800353c <__swbuf_r>
 8002e9a:	6813      	ldr	r3, [r2, #0]
 8002e9c:	1c58      	adds	r0, r3, #1
 8002e9e:	6010      	str	r0, [r2, #0]
 8002ea0:	7019      	strb	r1, [r3, #0]
 8002ea2:	b2c8      	uxtb	r0, r1
 8002ea4:	bc10      	pop	{r4}
 8002ea6:	4770      	bx	lr

08002ea8 <__sfputs_r>:
 8002ea8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002eaa:	4606      	mov	r6, r0
 8002eac:	460f      	mov	r7, r1
 8002eae:	4614      	mov	r4, r2
 8002eb0:	18d5      	adds	r5, r2, r3
 8002eb2:	42ac      	cmp	r4, r5
 8002eb4:	d101      	bne.n	8002eba <__sfputs_r+0x12>
 8002eb6:	2000      	movs	r0, #0
 8002eb8:	e007      	b.n	8002eca <__sfputs_r+0x22>
 8002eba:	463a      	mov	r2, r7
 8002ebc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002ec0:	4630      	mov	r0, r6
 8002ec2:	f7ff ffdb 	bl	8002e7c <__sfputc_r>
 8002ec6:	1c43      	adds	r3, r0, #1
 8002ec8:	d1f3      	bne.n	8002eb2 <__sfputs_r+0xa>
 8002eca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08002ecc <_vfiprintf_r>:
 8002ecc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002ed0:	b09d      	sub	sp, #116	; 0x74
 8002ed2:	460c      	mov	r4, r1
 8002ed4:	4617      	mov	r7, r2
 8002ed6:	9303      	str	r3, [sp, #12]
 8002ed8:	4606      	mov	r6, r0
 8002eda:	b118      	cbz	r0, 8002ee4 <_vfiprintf_r+0x18>
 8002edc:	6983      	ldr	r3, [r0, #24]
 8002ede:	b90b      	cbnz	r3, 8002ee4 <_vfiprintf_r+0x18>
 8002ee0:	f7ff fee4 	bl	8002cac <__sinit>
 8002ee4:	4b7c      	ldr	r3, [pc, #496]	; (80030d8 <_vfiprintf_r+0x20c>)
 8002ee6:	429c      	cmp	r4, r3
 8002ee8:	d157      	bne.n	8002f9a <_vfiprintf_r+0xce>
 8002eea:	6874      	ldr	r4, [r6, #4]
 8002eec:	89a3      	ldrh	r3, [r4, #12]
 8002eee:	0718      	lsls	r0, r3, #28
 8002ef0:	d55d      	bpl.n	8002fae <_vfiprintf_r+0xe2>
 8002ef2:	6923      	ldr	r3, [r4, #16]
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d05a      	beq.n	8002fae <_vfiprintf_r+0xe2>
 8002ef8:	2300      	movs	r3, #0
 8002efa:	9309      	str	r3, [sp, #36]	; 0x24
 8002efc:	2320      	movs	r3, #32
 8002efe:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002f02:	2330      	movs	r3, #48	; 0x30
 8002f04:	f04f 0b01 	mov.w	fp, #1
 8002f08:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002f0c:	46b8      	mov	r8, r7
 8002f0e:	4645      	mov	r5, r8
 8002f10:	f815 3b01 	ldrb.w	r3, [r5], #1
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d155      	bne.n	8002fc4 <_vfiprintf_r+0xf8>
 8002f18:	ebb8 0a07 	subs.w	sl, r8, r7
 8002f1c:	d00b      	beq.n	8002f36 <_vfiprintf_r+0x6a>
 8002f1e:	4653      	mov	r3, sl
 8002f20:	463a      	mov	r2, r7
 8002f22:	4621      	mov	r1, r4
 8002f24:	4630      	mov	r0, r6
 8002f26:	f7ff ffbf 	bl	8002ea8 <__sfputs_r>
 8002f2a:	3001      	adds	r0, #1
 8002f2c:	f000 80c4 	beq.w	80030b8 <_vfiprintf_r+0x1ec>
 8002f30:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002f32:	4453      	add	r3, sl
 8002f34:	9309      	str	r3, [sp, #36]	; 0x24
 8002f36:	f898 3000 	ldrb.w	r3, [r8]
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	f000 80bc 	beq.w	80030b8 <_vfiprintf_r+0x1ec>
 8002f40:	2300      	movs	r3, #0
 8002f42:	f04f 32ff 	mov.w	r2, #4294967295
 8002f46:	9304      	str	r3, [sp, #16]
 8002f48:	9307      	str	r3, [sp, #28]
 8002f4a:	9205      	str	r2, [sp, #20]
 8002f4c:	9306      	str	r3, [sp, #24]
 8002f4e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002f52:	931a      	str	r3, [sp, #104]	; 0x68
 8002f54:	2205      	movs	r2, #5
 8002f56:	7829      	ldrb	r1, [r5, #0]
 8002f58:	4860      	ldr	r0, [pc, #384]	; (80030dc <_vfiprintf_r+0x210>)
 8002f5a:	f000 fcf9 	bl	8003950 <memchr>
 8002f5e:	f105 0801 	add.w	r8, r5, #1
 8002f62:	9b04      	ldr	r3, [sp, #16]
 8002f64:	2800      	cmp	r0, #0
 8002f66:	d131      	bne.n	8002fcc <_vfiprintf_r+0x100>
 8002f68:	06d9      	lsls	r1, r3, #27
 8002f6a:	bf44      	itt	mi
 8002f6c:	2220      	movmi	r2, #32
 8002f6e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8002f72:	071a      	lsls	r2, r3, #28
 8002f74:	bf44      	itt	mi
 8002f76:	222b      	movmi	r2, #43	; 0x2b
 8002f78:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8002f7c:	782a      	ldrb	r2, [r5, #0]
 8002f7e:	2a2a      	cmp	r2, #42	; 0x2a
 8002f80:	d02c      	beq.n	8002fdc <_vfiprintf_r+0x110>
 8002f82:	2100      	movs	r1, #0
 8002f84:	200a      	movs	r0, #10
 8002f86:	9a07      	ldr	r2, [sp, #28]
 8002f88:	46a8      	mov	r8, r5
 8002f8a:	f898 3000 	ldrb.w	r3, [r8]
 8002f8e:	3501      	adds	r5, #1
 8002f90:	3b30      	subs	r3, #48	; 0x30
 8002f92:	2b09      	cmp	r3, #9
 8002f94:	d96d      	bls.n	8003072 <_vfiprintf_r+0x1a6>
 8002f96:	b371      	cbz	r1, 8002ff6 <_vfiprintf_r+0x12a>
 8002f98:	e026      	b.n	8002fe8 <_vfiprintf_r+0x11c>
 8002f9a:	4b51      	ldr	r3, [pc, #324]	; (80030e0 <_vfiprintf_r+0x214>)
 8002f9c:	429c      	cmp	r4, r3
 8002f9e:	d101      	bne.n	8002fa4 <_vfiprintf_r+0xd8>
 8002fa0:	68b4      	ldr	r4, [r6, #8]
 8002fa2:	e7a3      	b.n	8002eec <_vfiprintf_r+0x20>
 8002fa4:	4b4f      	ldr	r3, [pc, #316]	; (80030e4 <_vfiprintf_r+0x218>)
 8002fa6:	429c      	cmp	r4, r3
 8002fa8:	bf08      	it	eq
 8002faa:	68f4      	ldreq	r4, [r6, #12]
 8002fac:	e79e      	b.n	8002eec <_vfiprintf_r+0x20>
 8002fae:	4621      	mov	r1, r4
 8002fb0:	4630      	mov	r0, r6
 8002fb2:	f000 fb27 	bl	8003604 <__swsetup_r>
 8002fb6:	2800      	cmp	r0, #0
 8002fb8:	d09e      	beq.n	8002ef8 <_vfiprintf_r+0x2c>
 8002fba:	f04f 30ff 	mov.w	r0, #4294967295
 8002fbe:	b01d      	add	sp, #116	; 0x74
 8002fc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002fc4:	2b25      	cmp	r3, #37	; 0x25
 8002fc6:	d0a7      	beq.n	8002f18 <_vfiprintf_r+0x4c>
 8002fc8:	46a8      	mov	r8, r5
 8002fca:	e7a0      	b.n	8002f0e <_vfiprintf_r+0x42>
 8002fcc:	4a43      	ldr	r2, [pc, #268]	; (80030dc <_vfiprintf_r+0x210>)
 8002fce:	4645      	mov	r5, r8
 8002fd0:	1a80      	subs	r0, r0, r2
 8002fd2:	fa0b f000 	lsl.w	r0, fp, r0
 8002fd6:	4318      	orrs	r0, r3
 8002fd8:	9004      	str	r0, [sp, #16]
 8002fda:	e7bb      	b.n	8002f54 <_vfiprintf_r+0x88>
 8002fdc:	9a03      	ldr	r2, [sp, #12]
 8002fde:	1d11      	adds	r1, r2, #4
 8002fe0:	6812      	ldr	r2, [r2, #0]
 8002fe2:	9103      	str	r1, [sp, #12]
 8002fe4:	2a00      	cmp	r2, #0
 8002fe6:	db01      	blt.n	8002fec <_vfiprintf_r+0x120>
 8002fe8:	9207      	str	r2, [sp, #28]
 8002fea:	e004      	b.n	8002ff6 <_vfiprintf_r+0x12a>
 8002fec:	4252      	negs	r2, r2
 8002fee:	f043 0302 	orr.w	r3, r3, #2
 8002ff2:	9207      	str	r2, [sp, #28]
 8002ff4:	9304      	str	r3, [sp, #16]
 8002ff6:	f898 3000 	ldrb.w	r3, [r8]
 8002ffa:	2b2e      	cmp	r3, #46	; 0x2e
 8002ffc:	d110      	bne.n	8003020 <_vfiprintf_r+0x154>
 8002ffe:	f898 3001 	ldrb.w	r3, [r8, #1]
 8003002:	f108 0101 	add.w	r1, r8, #1
 8003006:	2b2a      	cmp	r3, #42	; 0x2a
 8003008:	d137      	bne.n	800307a <_vfiprintf_r+0x1ae>
 800300a:	9b03      	ldr	r3, [sp, #12]
 800300c:	f108 0802 	add.w	r8, r8, #2
 8003010:	1d1a      	adds	r2, r3, #4
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	9203      	str	r2, [sp, #12]
 8003016:	2b00      	cmp	r3, #0
 8003018:	bfb8      	it	lt
 800301a:	f04f 33ff 	movlt.w	r3, #4294967295
 800301e:	9305      	str	r3, [sp, #20]
 8003020:	4d31      	ldr	r5, [pc, #196]	; (80030e8 <_vfiprintf_r+0x21c>)
 8003022:	2203      	movs	r2, #3
 8003024:	f898 1000 	ldrb.w	r1, [r8]
 8003028:	4628      	mov	r0, r5
 800302a:	f000 fc91 	bl	8003950 <memchr>
 800302e:	b140      	cbz	r0, 8003042 <_vfiprintf_r+0x176>
 8003030:	2340      	movs	r3, #64	; 0x40
 8003032:	1b40      	subs	r0, r0, r5
 8003034:	fa03 f000 	lsl.w	r0, r3, r0
 8003038:	9b04      	ldr	r3, [sp, #16]
 800303a:	f108 0801 	add.w	r8, r8, #1
 800303e:	4303      	orrs	r3, r0
 8003040:	9304      	str	r3, [sp, #16]
 8003042:	f898 1000 	ldrb.w	r1, [r8]
 8003046:	2206      	movs	r2, #6
 8003048:	4828      	ldr	r0, [pc, #160]	; (80030ec <_vfiprintf_r+0x220>)
 800304a:	f108 0701 	add.w	r7, r8, #1
 800304e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003052:	f000 fc7d 	bl	8003950 <memchr>
 8003056:	2800      	cmp	r0, #0
 8003058:	d034      	beq.n	80030c4 <_vfiprintf_r+0x1f8>
 800305a:	4b25      	ldr	r3, [pc, #148]	; (80030f0 <_vfiprintf_r+0x224>)
 800305c:	bb03      	cbnz	r3, 80030a0 <_vfiprintf_r+0x1d4>
 800305e:	9b03      	ldr	r3, [sp, #12]
 8003060:	3307      	adds	r3, #7
 8003062:	f023 0307 	bic.w	r3, r3, #7
 8003066:	3308      	adds	r3, #8
 8003068:	9303      	str	r3, [sp, #12]
 800306a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800306c:	444b      	add	r3, r9
 800306e:	9309      	str	r3, [sp, #36]	; 0x24
 8003070:	e74c      	b.n	8002f0c <_vfiprintf_r+0x40>
 8003072:	fb00 3202 	mla	r2, r0, r2, r3
 8003076:	2101      	movs	r1, #1
 8003078:	e786      	b.n	8002f88 <_vfiprintf_r+0xbc>
 800307a:	2300      	movs	r3, #0
 800307c:	250a      	movs	r5, #10
 800307e:	4618      	mov	r0, r3
 8003080:	9305      	str	r3, [sp, #20]
 8003082:	4688      	mov	r8, r1
 8003084:	f898 2000 	ldrb.w	r2, [r8]
 8003088:	3101      	adds	r1, #1
 800308a:	3a30      	subs	r2, #48	; 0x30
 800308c:	2a09      	cmp	r2, #9
 800308e:	d903      	bls.n	8003098 <_vfiprintf_r+0x1cc>
 8003090:	2b00      	cmp	r3, #0
 8003092:	d0c5      	beq.n	8003020 <_vfiprintf_r+0x154>
 8003094:	9005      	str	r0, [sp, #20]
 8003096:	e7c3      	b.n	8003020 <_vfiprintf_r+0x154>
 8003098:	fb05 2000 	mla	r0, r5, r0, r2
 800309c:	2301      	movs	r3, #1
 800309e:	e7f0      	b.n	8003082 <_vfiprintf_r+0x1b6>
 80030a0:	ab03      	add	r3, sp, #12
 80030a2:	9300      	str	r3, [sp, #0]
 80030a4:	4622      	mov	r2, r4
 80030a6:	4b13      	ldr	r3, [pc, #76]	; (80030f4 <_vfiprintf_r+0x228>)
 80030a8:	a904      	add	r1, sp, #16
 80030aa:	4630      	mov	r0, r6
 80030ac:	f3af 8000 	nop.w
 80030b0:	f1b0 3fff 	cmp.w	r0, #4294967295
 80030b4:	4681      	mov	r9, r0
 80030b6:	d1d8      	bne.n	800306a <_vfiprintf_r+0x19e>
 80030b8:	89a3      	ldrh	r3, [r4, #12]
 80030ba:	065b      	lsls	r3, r3, #25
 80030bc:	f53f af7d 	bmi.w	8002fba <_vfiprintf_r+0xee>
 80030c0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80030c2:	e77c      	b.n	8002fbe <_vfiprintf_r+0xf2>
 80030c4:	ab03      	add	r3, sp, #12
 80030c6:	9300      	str	r3, [sp, #0]
 80030c8:	4622      	mov	r2, r4
 80030ca:	4b0a      	ldr	r3, [pc, #40]	; (80030f4 <_vfiprintf_r+0x228>)
 80030cc:	a904      	add	r1, sp, #16
 80030ce:	4630      	mov	r0, r6
 80030d0:	f000 f88a 	bl	80031e8 <_printf_i>
 80030d4:	e7ec      	b.n	80030b0 <_vfiprintf_r+0x1e4>
 80030d6:	bf00      	nop
 80030d8:	08003b48 	.word	0x08003b48
 80030dc:	08003b88 	.word	0x08003b88
 80030e0:	08003b68 	.word	0x08003b68
 80030e4:	08003b28 	.word	0x08003b28
 80030e8:	08003b8e 	.word	0x08003b8e
 80030ec:	08003b92 	.word	0x08003b92
 80030f0:	00000000 	.word	0x00000000
 80030f4:	08002ea9 	.word	0x08002ea9

080030f8 <_printf_common>:
 80030f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80030fc:	4691      	mov	r9, r2
 80030fe:	461f      	mov	r7, r3
 8003100:	688a      	ldr	r2, [r1, #8]
 8003102:	690b      	ldr	r3, [r1, #16]
 8003104:	4606      	mov	r6, r0
 8003106:	4293      	cmp	r3, r2
 8003108:	bfb8      	it	lt
 800310a:	4613      	movlt	r3, r2
 800310c:	f8c9 3000 	str.w	r3, [r9]
 8003110:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003114:	460c      	mov	r4, r1
 8003116:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800311a:	b112      	cbz	r2, 8003122 <_printf_common+0x2a>
 800311c:	3301      	adds	r3, #1
 800311e:	f8c9 3000 	str.w	r3, [r9]
 8003122:	6823      	ldr	r3, [r4, #0]
 8003124:	0699      	lsls	r1, r3, #26
 8003126:	bf42      	ittt	mi
 8003128:	f8d9 3000 	ldrmi.w	r3, [r9]
 800312c:	3302      	addmi	r3, #2
 800312e:	f8c9 3000 	strmi.w	r3, [r9]
 8003132:	6825      	ldr	r5, [r4, #0]
 8003134:	f015 0506 	ands.w	r5, r5, #6
 8003138:	d107      	bne.n	800314a <_printf_common+0x52>
 800313a:	f104 0a19 	add.w	sl, r4, #25
 800313e:	68e3      	ldr	r3, [r4, #12]
 8003140:	f8d9 2000 	ldr.w	r2, [r9]
 8003144:	1a9b      	subs	r3, r3, r2
 8003146:	429d      	cmp	r5, r3
 8003148:	db2a      	blt.n	80031a0 <_printf_common+0xa8>
 800314a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800314e:	6822      	ldr	r2, [r4, #0]
 8003150:	3300      	adds	r3, #0
 8003152:	bf18      	it	ne
 8003154:	2301      	movne	r3, #1
 8003156:	0692      	lsls	r2, r2, #26
 8003158:	d42f      	bmi.n	80031ba <_printf_common+0xc2>
 800315a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800315e:	4639      	mov	r1, r7
 8003160:	4630      	mov	r0, r6
 8003162:	47c0      	blx	r8
 8003164:	3001      	adds	r0, #1
 8003166:	d022      	beq.n	80031ae <_printf_common+0xb6>
 8003168:	6823      	ldr	r3, [r4, #0]
 800316a:	68e5      	ldr	r5, [r4, #12]
 800316c:	f003 0306 	and.w	r3, r3, #6
 8003170:	2b04      	cmp	r3, #4
 8003172:	bf18      	it	ne
 8003174:	2500      	movne	r5, #0
 8003176:	f8d9 2000 	ldr.w	r2, [r9]
 800317a:	f04f 0900 	mov.w	r9, #0
 800317e:	bf08      	it	eq
 8003180:	1aad      	subeq	r5, r5, r2
 8003182:	68a3      	ldr	r3, [r4, #8]
 8003184:	6922      	ldr	r2, [r4, #16]
 8003186:	bf08      	it	eq
 8003188:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800318c:	4293      	cmp	r3, r2
 800318e:	bfc4      	itt	gt
 8003190:	1a9b      	subgt	r3, r3, r2
 8003192:	18ed      	addgt	r5, r5, r3
 8003194:	341a      	adds	r4, #26
 8003196:	454d      	cmp	r5, r9
 8003198:	d11b      	bne.n	80031d2 <_printf_common+0xda>
 800319a:	2000      	movs	r0, #0
 800319c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80031a0:	2301      	movs	r3, #1
 80031a2:	4652      	mov	r2, sl
 80031a4:	4639      	mov	r1, r7
 80031a6:	4630      	mov	r0, r6
 80031a8:	47c0      	blx	r8
 80031aa:	3001      	adds	r0, #1
 80031ac:	d103      	bne.n	80031b6 <_printf_common+0xbe>
 80031ae:	f04f 30ff 	mov.w	r0, #4294967295
 80031b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80031b6:	3501      	adds	r5, #1
 80031b8:	e7c1      	b.n	800313e <_printf_common+0x46>
 80031ba:	2030      	movs	r0, #48	; 0x30
 80031bc:	18e1      	adds	r1, r4, r3
 80031be:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80031c2:	1c5a      	adds	r2, r3, #1
 80031c4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80031c8:	4422      	add	r2, r4
 80031ca:	3302      	adds	r3, #2
 80031cc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80031d0:	e7c3      	b.n	800315a <_printf_common+0x62>
 80031d2:	2301      	movs	r3, #1
 80031d4:	4622      	mov	r2, r4
 80031d6:	4639      	mov	r1, r7
 80031d8:	4630      	mov	r0, r6
 80031da:	47c0      	blx	r8
 80031dc:	3001      	adds	r0, #1
 80031de:	d0e6      	beq.n	80031ae <_printf_common+0xb6>
 80031e0:	f109 0901 	add.w	r9, r9, #1
 80031e4:	e7d7      	b.n	8003196 <_printf_common+0x9e>
	...

080031e8 <_printf_i>:
 80031e8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80031ec:	4617      	mov	r7, r2
 80031ee:	7e0a      	ldrb	r2, [r1, #24]
 80031f0:	b085      	sub	sp, #20
 80031f2:	2a6e      	cmp	r2, #110	; 0x6e
 80031f4:	4698      	mov	r8, r3
 80031f6:	4606      	mov	r6, r0
 80031f8:	460c      	mov	r4, r1
 80031fa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80031fc:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 8003200:	f000 80bc 	beq.w	800337c <_printf_i+0x194>
 8003204:	d81a      	bhi.n	800323c <_printf_i+0x54>
 8003206:	2a63      	cmp	r2, #99	; 0x63
 8003208:	d02e      	beq.n	8003268 <_printf_i+0x80>
 800320a:	d80a      	bhi.n	8003222 <_printf_i+0x3a>
 800320c:	2a00      	cmp	r2, #0
 800320e:	f000 80c8 	beq.w	80033a2 <_printf_i+0x1ba>
 8003212:	2a58      	cmp	r2, #88	; 0x58
 8003214:	f000 808a 	beq.w	800332c <_printf_i+0x144>
 8003218:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800321c:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 8003220:	e02a      	b.n	8003278 <_printf_i+0x90>
 8003222:	2a64      	cmp	r2, #100	; 0x64
 8003224:	d001      	beq.n	800322a <_printf_i+0x42>
 8003226:	2a69      	cmp	r2, #105	; 0x69
 8003228:	d1f6      	bne.n	8003218 <_printf_i+0x30>
 800322a:	6821      	ldr	r1, [r4, #0]
 800322c:	681a      	ldr	r2, [r3, #0]
 800322e:	f011 0f80 	tst.w	r1, #128	; 0x80
 8003232:	d023      	beq.n	800327c <_printf_i+0x94>
 8003234:	1d11      	adds	r1, r2, #4
 8003236:	6019      	str	r1, [r3, #0]
 8003238:	6813      	ldr	r3, [r2, #0]
 800323a:	e027      	b.n	800328c <_printf_i+0xa4>
 800323c:	2a73      	cmp	r2, #115	; 0x73
 800323e:	f000 80b4 	beq.w	80033aa <_printf_i+0x1c2>
 8003242:	d808      	bhi.n	8003256 <_printf_i+0x6e>
 8003244:	2a6f      	cmp	r2, #111	; 0x6f
 8003246:	d02a      	beq.n	800329e <_printf_i+0xb6>
 8003248:	2a70      	cmp	r2, #112	; 0x70
 800324a:	d1e5      	bne.n	8003218 <_printf_i+0x30>
 800324c:	680a      	ldr	r2, [r1, #0]
 800324e:	f042 0220 	orr.w	r2, r2, #32
 8003252:	600a      	str	r2, [r1, #0]
 8003254:	e003      	b.n	800325e <_printf_i+0x76>
 8003256:	2a75      	cmp	r2, #117	; 0x75
 8003258:	d021      	beq.n	800329e <_printf_i+0xb6>
 800325a:	2a78      	cmp	r2, #120	; 0x78
 800325c:	d1dc      	bne.n	8003218 <_printf_i+0x30>
 800325e:	2278      	movs	r2, #120	; 0x78
 8003260:	496f      	ldr	r1, [pc, #444]	; (8003420 <_printf_i+0x238>)
 8003262:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 8003266:	e064      	b.n	8003332 <_printf_i+0x14a>
 8003268:	681a      	ldr	r2, [r3, #0]
 800326a:	f101 0542 	add.w	r5, r1, #66	; 0x42
 800326e:	1d11      	adds	r1, r2, #4
 8003270:	6019      	str	r1, [r3, #0]
 8003272:	6813      	ldr	r3, [r2, #0]
 8003274:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003278:	2301      	movs	r3, #1
 800327a:	e0a3      	b.n	80033c4 <_printf_i+0x1dc>
 800327c:	f011 0f40 	tst.w	r1, #64	; 0x40
 8003280:	f102 0104 	add.w	r1, r2, #4
 8003284:	6019      	str	r1, [r3, #0]
 8003286:	d0d7      	beq.n	8003238 <_printf_i+0x50>
 8003288:	f9b2 3000 	ldrsh.w	r3, [r2]
 800328c:	2b00      	cmp	r3, #0
 800328e:	da03      	bge.n	8003298 <_printf_i+0xb0>
 8003290:	222d      	movs	r2, #45	; 0x2d
 8003292:	425b      	negs	r3, r3
 8003294:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8003298:	4962      	ldr	r1, [pc, #392]	; (8003424 <_printf_i+0x23c>)
 800329a:	220a      	movs	r2, #10
 800329c:	e017      	b.n	80032ce <_printf_i+0xe6>
 800329e:	6820      	ldr	r0, [r4, #0]
 80032a0:	6819      	ldr	r1, [r3, #0]
 80032a2:	f010 0f80 	tst.w	r0, #128	; 0x80
 80032a6:	d003      	beq.n	80032b0 <_printf_i+0xc8>
 80032a8:	1d08      	adds	r0, r1, #4
 80032aa:	6018      	str	r0, [r3, #0]
 80032ac:	680b      	ldr	r3, [r1, #0]
 80032ae:	e006      	b.n	80032be <_printf_i+0xd6>
 80032b0:	f010 0f40 	tst.w	r0, #64	; 0x40
 80032b4:	f101 0004 	add.w	r0, r1, #4
 80032b8:	6018      	str	r0, [r3, #0]
 80032ba:	d0f7      	beq.n	80032ac <_printf_i+0xc4>
 80032bc:	880b      	ldrh	r3, [r1, #0]
 80032be:	2a6f      	cmp	r2, #111	; 0x6f
 80032c0:	bf14      	ite	ne
 80032c2:	220a      	movne	r2, #10
 80032c4:	2208      	moveq	r2, #8
 80032c6:	4957      	ldr	r1, [pc, #348]	; (8003424 <_printf_i+0x23c>)
 80032c8:	2000      	movs	r0, #0
 80032ca:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 80032ce:	6865      	ldr	r5, [r4, #4]
 80032d0:	2d00      	cmp	r5, #0
 80032d2:	60a5      	str	r5, [r4, #8]
 80032d4:	f2c0 809c 	blt.w	8003410 <_printf_i+0x228>
 80032d8:	6820      	ldr	r0, [r4, #0]
 80032da:	f020 0004 	bic.w	r0, r0, #4
 80032de:	6020      	str	r0, [r4, #0]
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d13f      	bne.n	8003364 <_printf_i+0x17c>
 80032e4:	2d00      	cmp	r5, #0
 80032e6:	f040 8095 	bne.w	8003414 <_printf_i+0x22c>
 80032ea:	4675      	mov	r5, lr
 80032ec:	2a08      	cmp	r2, #8
 80032ee:	d10b      	bne.n	8003308 <_printf_i+0x120>
 80032f0:	6823      	ldr	r3, [r4, #0]
 80032f2:	07da      	lsls	r2, r3, #31
 80032f4:	d508      	bpl.n	8003308 <_printf_i+0x120>
 80032f6:	6923      	ldr	r3, [r4, #16]
 80032f8:	6862      	ldr	r2, [r4, #4]
 80032fa:	429a      	cmp	r2, r3
 80032fc:	bfde      	ittt	le
 80032fe:	2330      	movle	r3, #48	; 0x30
 8003300:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003304:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003308:	ebae 0305 	sub.w	r3, lr, r5
 800330c:	6123      	str	r3, [r4, #16]
 800330e:	f8cd 8000 	str.w	r8, [sp]
 8003312:	463b      	mov	r3, r7
 8003314:	aa03      	add	r2, sp, #12
 8003316:	4621      	mov	r1, r4
 8003318:	4630      	mov	r0, r6
 800331a:	f7ff feed 	bl	80030f8 <_printf_common>
 800331e:	3001      	adds	r0, #1
 8003320:	d155      	bne.n	80033ce <_printf_i+0x1e6>
 8003322:	f04f 30ff 	mov.w	r0, #4294967295
 8003326:	b005      	add	sp, #20
 8003328:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800332c:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 8003330:	493c      	ldr	r1, [pc, #240]	; (8003424 <_printf_i+0x23c>)
 8003332:	6822      	ldr	r2, [r4, #0]
 8003334:	6818      	ldr	r0, [r3, #0]
 8003336:	f012 0f80 	tst.w	r2, #128	; 0x80
 800333a:	f100 0504 	add.w	r5, r0, #4
 800333e:	601d      	str	r5, [r3, #0]
 8003340:	d001      	beq.n	8003346 <_printf_i+0x15e>
 8003342:	6803      	ldr	r3, [r0, #0]
 8003344:	e002      	b.n	800334c <_printf_i+0x164>
 8003346:	0655      	lsls	r5, r2, #25
 8003348:	d5fb      	bpl.n	8003342 <_printf_i+0x15a>
 800334a:	8803      	ldrh	r3, [r0, #0]
 800334c:	07d0      	lsls	r0, r2, #31
 800334e:	bf44      	itt	mi
 8003350:	f042 0220 	orrmi.w	r2, r2, #32
 8003354:	6022      	strmi	r2, [r4, #0]
 8003356:	b91b      	cbnz	r3, 8003360 <_printf_i+0x178>
 8003358:	6822      	ldr	r2, [r4, #0]
 800335a:	f022 0220 	bic.w	r2, r2, #32
 800335e:	6022      	str	r2, [r4, #0]
 8003360:	2210      	movs	r2, #16
 8003362:	e7b1      	b.n	80032c8 <_printf_i+0xe0>
 8003364:	4675      	mov	r5, lr
 8003366:	fbb3 f0f2 	udiv	r0, r3, r2
 800336a:	fb02 3310 	mls	r3, r2, r0, r3
 800336e:	5ccb      	ldrb	r3, [r1, r3]
 8003370:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8003374:	4603      	mov	r3, r0
 8003376:	2800      	cmp	r0, #0
 8003378:	d1f5      	bne.n	8003366 <_printf_i+0x17e>
 800337a:	e7b7      	b.n	80032ec <_printf_i+0x104>
 800337c:	6808      	ldr	r0, [r1, #0]
 800337e:	681a      	ldr	r2, [r3, #0]
 8003380:	f010 0f80 	tst.w	r0, #128	; 0x80
 8003384:	6949      	ldr	r1, [r1, #20]
 8003386:	d004      	beq.n	8003392 <_printf_i+0x1aa>
 8003388:	1d10      	adds	r0, r2, #4
 800338a:	6018      	str	r0, [r3, #0]
 800338c:	6813      	ldr	r3, [r2, #0]
 800338e:	6019      	str	r1, [r3, #0]
 8003390:	e007      	b.n	80033a2 <_printf_i+0x1ba>
 8003392:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003396:	f102 0004 	add.w	r0, r2, #4
 800339a:	6018      	str	r0, [r3, #0]
 800339c:	6813      	ldr	r3, [r2, #0]
 800339e:	d0f6      	beq.n	800338e <_printf_i+0x1a6>
 80033a0:	8019      	strh	r1, [r3, #0]
 80033a2:	2300      	movs	r3, #0
 80033a4:	4675      	mov	r5, lr
 80033a6:	6123      	str	r3, [r4, #16]
 80033a8:	e7b1      	b.n	800330e <_printf_i+0x126>
 80033aa:	681a      	ldr	r2, [r3, #0]
 80033ac:	1d11      	adds	r1, r2, #4
 80033ae:	6019      	str	r1, [r3, #0]
 80033b0:	6815      	ldr	r5, [r2, #0]
 80033b2:	2100      	movs	r1, #0
 80033b4:	6862      	ldr	r2, [r4, #4]
 80033b6:	4628      	mov	r0, r5
 80033b8:	f000 faca 	bl	8003950 <memchr>
 80033bc:	b108      	cbz	r0, 80033c2 <_printf_i+0x1da>
 80033be:	1b40      	subs	r0, r0, r5
 80033c0:	6060      	str	r0, [r4, #4]
 80033c2:	6863      	ldr	r3, [r4, #4]
 80033c4:	6123      	str	r3, [r4, #16]
 80033c6:	2300      	movs	r3, #0
 80033c8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80033cc:	e79f      	b.n	800330e <_printf_i+0x126>
 80033ce:	6923      	ldr	r3, [r4, #16]
 80033d0:	462a      	mov	r2, r5
 80033d2:	4639      	mov	r1, r7
 80033d4:	4630      	mov	r0, r6
 80033d6:	47c0      	blx	r8
 80033d8:	3001      	adds	r0, #1
 80033da:	d0a2      	beq.n	8003322 <_printf_i+0x13a>
 80033dc:	6823      	ldr	r3, [r4, #0]
 80033de:	079b      	lsls	r3, r3, #30
 80033e0:	d507      	bpl.n	80033f2 <_printf_i+0x20a>
 80033e2:	2500      	movs	r5, #0
 80033e4:	f104 0919 	add.w	r9, r4, #25
 80033e8:	68e3      	ldr	r3, [r4, #12]
 80033ea:	9a03      	ldr	r2, [sp, #12]
 80033ec:	1a9b      	subs	r3, r3, r2
 80033ee:	429d      	cmp	r5, r3
 80033f0:	db05      	blt.n	80033fe <_printf_i+0x216>
 80033f2:	68e0      	ldr	r0, [r4, #12]
 80033f4:	9b03      	ldr	r3, [sp, #12]
 80033f6:	4298      	cmp	r0, r3
 80033f8:	bfb8      	it	lt
 80033fa:	4618      	movlt	r0, r3
 80033fc:	e793      	b.n	8003326 <_printf_i+0x13e>
 80033fe:	2301      	movs	r3, #1
 8003400:	464a      	mov	r2, r9
 8003402:	4639      	mov	r1, r7
 8003404:	4630      	mov	r0, r6
 8003406:	47c0      	blx	r8
 8003408:	3001      	adds	r0, #1
 800340a:	d08a      	beq.n	8003322 <_printf_i+0x13a>
 800340c:	3501      	adds	r5, #1
 800340e:	e7eb      	b.n	80033e8 <_printf_i+0x200>
 8003410:	2b00      	cmp	r3, #0
 8003412:	d1a7      	bne.n	8003364 <_printf_i+0x17c>
 8003414:	780b      	ldrb	r3, [r1, #0]
 8003416:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800341a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800341e:	e765      	b.n	80032ec <_printf_i+0x104>
 8003420:	08003baa 	.word	0x08003baa
 8003424:	08003b99 	.word	0x08003b99

08003428 <_putc_r>:
 8003428:	b570      	push	{r4, r5, r6, lr}
 800342a:	460d      	mov	r5, r1
 800342c:	4614      	mov	r4, r2
 800342e:	4606      	mov	r6, r0
 8003430:	b118      	cbz	r0, 800343a <_putc_r+0x12>
 8003432:	6983      	ldr	r3, [r0, #24]
 8003434:	b90b      	cbnz	r3, 800343a <_putc_r+0x12>
 8003436:	f7ff fc39 	bl	8002cac <__sinit>
 800343a:	4b13      	ldr	r3, [pc, #76]	; (8003488 <_putc_r+0x60>)
 800343c:	429c      	cmp	r4, r3
 800343e:	d112      	bne.n	8003466 <_putc_r+0x3e>
 8003440:	6874      	ldr	r4, [r6, #4]
 8003442:	68a3      	ldr	r3, [r4, #8]
 8003444:	3b01      	subs	r3, #1
 8003446:	2b00      	cmp	r3, #0
 8003448:	60a3      	str	r3, [r4, #8]
 800344a:	da16      	bge.n	800347a <_putc_r+0x52>
 800344c:	69a2      	ldr	r2, [r4, #24]
 800344e:	4293      	cmp	r3, r2
 8003450:	db02      	blt.n	8003458 <_putc_r+0x30>
 8003452:	b2eb      	uxtb	r3, r5
 8003454:	2b0a      	cmp	r3, #10
 8003456:	d110      	bne.n	800347a <_putc_r+0x52>
 8003458:	4622      	mov	r2, r4
 800345a:	4629      	mov	r1, r5
 800345c:	4630      	mov	r0, r6
 800345e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8003462:	f000 b86b 	b.w	800353c <__swbuf_r>
 8003466:	4b09      	ldr	r3, [pc, #36]	; (800348c <_putc_r+0x64>)
 8003468:	429c      	cmp	r4, r3
 800346a:	d101      	bne.n	8003470 <_putc_r+0x48>
 800346c:	68b4      	ldr	r4, [r6, #8]
 800346e:	e7e8      	b.n	8003442 <_putc_r+0x1a>
 8003470:	4b07      	ldr	r3, [pc, #28]	; (8003490 <_putc_r+0x68>)
 8003472:	429c      	cmp	r4, r3
 8003474:	bf08      	it	eq
 8003476:	68f4      	ldreq	r4, [r6, #12]
 8003478:	e7e3      	b.n	8003442 <_putc_r+0x1a>
 800347a:	6823      	ldr	r3, [r4, #0]
 800347c:	b2e8      	uxtb	r0, r5
 800347e:	1c5a      	adds	r2, r3, #1
 8003480:	6022      	str	r2, [r4, #0]
 8003482:	701d      	strb	r5, [r3, #0]
 8003484:	bd70      	pop	{r4, r5, r6, pc}
 8003486:	bf00      	nop
 8003488:	08003b48 	.word	0x08003b48
 800348c:	08003b68 	.word	0x08003b68
 8003490:	08003b28 	.word	0x08003b28

08003494 <_sbrk_r>:
 8003494:	b538      	push	{r3, r4, r5, lr}
 8003496:	2300      	movs	r3, #0
 8003498:	4c05      	ldr	r4, [pc, #20]	; (80034b0 <_sbrk_r+0x1c>)
 800349a:	4605      	mov	r5, r0
 800349c:	4608      	mov	r0, r1
 800349e:	6023      	str	r3, [r4, #0]
 80034a0:	f7ff f904 	bl	80026ac <_sbrk>
 80034a4:	1c43      	adds	r3, r0, #1
 80034a6:	d102      	bne.n	80034ae <_sbrk_r+0x1a>
 80034a8:	6823      	ldr	r3, [r4, #0]
 80034aa:	b103      	cbz	r3, 80034ae <_sbrk_r+0x1a>
 80034ac:	602b      	str	r3, [r5, #0]
 80034ae:	bd38      	pop	{r3, r4, r5, pc}
 80034b0:	20001330 	.word	0x20001330

080034b4 <__sread>:
 80034b4:	b510      	push	{r4, lr}
 80034b6:	460c      	mov	r4, r1
 80034b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80034bc:	f000 faa4 	bl	8003a08 <_read_r>
 80034c0:	2800      	cmp	r0, #0
 80034c2:	bfab      	itete	ge
 80034c4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80034c6:	89a3      	ldrhlt	r3, [r4, #12]
 80034c8:	181b      	addge	r3, r3, r0
 80034ca:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80034ce:	bfac      	ite	ge
 80034d0:	6563      	strge	r3, [r4, #84]	; 0x54
 80034d2:	81a3      	strhlt	r3, [r4, #12]
 80034d4:	bd10      	pop	{r4, pc}

080034d6 <__swrite>:
 80034d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80034da:	461f      	mov	r7, r3
 80034dc:	898b      	ldrh	r3, [r1, #12]
 80034de:	4605      	mov	r5, r0
 80034e0:	05db      	lsls	r3, r3, #23
 80034e2:	460c      	mov	r4, r1
 80034e4:	4616      	mov	r6, r2
 80034e6:	d505      	bpl.n	80034f4 <__swrite+0x1e>
 80034e8:	2302      	movs	r3, #2
 80034ea:	2200      	movs	r2, #0
 80034ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80034f0:	f000 f9b8 	bl	8003864 <_lseek_r>
 80034f4:	89a3      	ldrh	r3, [r4, #12]
 80034f6:	4632      	mov	r2, r6
 80034f8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80034fc:	81a3      	strh	r3, [r4, #12]
 80034fe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003502:	463b      	mov	r3, r7
 8003504:	4628      	mov	r0, r5
 8003506:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800350a:	f000 b869 	b.w	80035e0 <_write_r>

0800350e <__sseek>:
 800350e:	b510      	push	{r4, lr}
 8003510:	460c      	mov	r4, r1
 8003512:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003516:	f000 f9a5 	bl	8003864 <_lseek_r>
 800351a:	1c43      	adds	r3, r0, #1
 800351c:	89a3      	ldrh	r3, [r4, #12]
 800351e:	bf15      	itete	ne
 8003520:	6560      	strne	r0, [r4, #84]	; 0x54
 8003522:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003526:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800352a:	81a3      	strheq	r3, [r4, #12]
 800352c:	bf18      	it	ne
 800352e:	81a3      	strhne	r3, [r4, #12]
 8003530:	bd10      	pop	{r4, pc}

08003532 <__sclose>:
 8003532:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003536:	f000 b8d3 	b.w	80036e0 <_close_r>
	...

0800353c <__swbuf_r>:
 800353c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800353e:	460e      	mov	r6, r1
 8003540:	4614      	mov	r4, r2
 8003542:	4605      	mov	r5, r0
 8003544:	b118      	cbz	r0, 800354e <__swbuf_r+0x12>
 8003546:	6983      	ldr	r3, [r0, #24]
 8003548:	b90b      	cbnz	r3, 800354e <__swbuf_r+0x12>
 800354a:	f7ff fbaf 	bl	8002cac <__sinit>
 800354e:	4b21      	ldr	r3, [pc, #132]	; (80035d4 <__swbuf_r+0x98>)
 8003550:	429c      	cmp	r4, r3
 8003552:	d12a      	bne.n	80035aa <__swbuf_r+0x6e>
 8003554:	686c      	ldr	r4, [r5, #4]
 8003556:	69a3      	ldr	r3, [r4, #24]
 8003558:	60a3      	str	r3, [r4, #8]
 800355a:	89a3      	ldrh	r3, [r4, #12]
 800355c:	071a      	lsls	r2, r3, #28
 800355e:	d52e      	bpl.n	80035be <__swbuf_r+0x82>
 8003560:	6923      	ldr	r3, [r4, #16]
 8003562:	b363      	cbz	r3, 80035be <__swbuf_r+0x82>
 8003564:	6923      	ldr	r3, [r4, #16]
 8003566:	6820      	ldr	r0, [r4, #0]
 8003568:	b2f6      	uxtb	r6, r6
 800356a:	1ac0      	subs	r0, r0, r3
 800356c:	6963      	ldr	r3, [r4, #20]
 800356e:	4637      	mov	r7, r6
 8003570:	4298      	cmp	r0, r3
 8003572:	db04      	blt.n	800357e <__swbuf_r+0x42>
 8003574:	4621      	mov	r1, r4
 8003576:	4628      	mov	r0, r5
 8003578:	f000 f94a 	bl	8003810 <_fflush_r>
 800357c:	bb28      	cbnz	r0, 80035ca <__swbuf_r+0x8e>
 800357e:	68a3      	ldr	r3, [r4, #8]
 8003580:	3001      	adds	r0, #1
 8003582:	3b01      	subs	r3, #1
 8003584:	60a3      	str	r3, [r4, #8]
 8003586:	6823      	ldr	r3, [r4, #0]
 8003588:	1c5a      	adds	r2, r3, #1
 800358a:	6022      	str	r2, [r4, #0]
 800358c:	701e      	strb	r6, [r3, #0]
 800358e:	6963      	ldr	r3, [r4, #20]
 8003590:	4298      	cmp	r0, r3
 8003592:	d004      	beq.n	800359e <__swbuf_r+0x62>
 8003594:	89a3      	ldrh	r3, [r4, #12]
 8003596:	07db      	lsls	r3, r3, #31
 8003598:	d519      	bpl.n	80035ce <__swbuf_r+0x92>
 800359a:	2e0a      	cmp	r6, #10
 800359c:	d117      	bne.n	80035ce <__swbuf_r+0x92>
 800359e:	4621      	mov	r1, r4
 80035a0:	4628      	mov	r0, r5
 80035a2:	f000 f935 	bl	8003810 <_fflush_r>
 80035a6:	b190      	cbz	r0, 80035ce <__swbuf_r+0x92>
 80035a8:	e00f      	b.n	80035ca <__swbuf_r+0x8e>
 80035aa:	4b0b      	ldr	r3, [pc, #44]	; (80035d8 <__swbuf_r+0x9c>)
 80035ac:	429c      	cmp	r4, r3
 80035ae:	d101      	bne.n	80035b4 <__swbuf_r+0x78>
 80035b0:	68ac      	ldr	r4, [r5, #8]
 80035b2:	e7d0      	b.n	8003556 <__swbuf_r+0x1a>
 80035b4:	4b09      	ldr	r3, [pc, #36]	; (80035dc <__swbuf_r+0xa0>)
 80035b6:	429c      	cmp	r4, r3
 80035b8:	bf08      	it	eq
 80035ba:	68ec      	ldreq	r4, [r5, #12]
 80035bc:	e7cb      	b.n	8003556 <__swbuf_r+0x1a>
 80035be:	4621      	mov	r1, r4
 80035c0:	4628      	mov	r0, r5
 80035c2:	f000 f81f 	bl	8003604 <__swsetup_r>
 80035c6:	2800      	cmp	r0, #0
 80035c8:	d0cc      	beq.n	8003564 <__swbuf_r+0x28>
 80035ca:	f04f 37ff 	mov.w	r7, #4294967295
 80035ce:	4638      	mov	r0, r7
 80035d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80035d2:	bf00      	nop
 80035d4:	08003b48 	.word	0x08003b48
 80035d8:	08003b68 	.word	0x08003b68
 80035dc:	08003b28 	.word	0x08003b28

080035e0 <_write_r>:
 80035e0:	b538      	push	{r3, r4, r5, lr}
 80035e2:	4605      	mov	r5, r0
 80035e4:	4608      	mov	r0, r1
 80035e6:	4611      	mov	r1, r2
 80035e8:	2200      	movs	r2, #0
 80035ea:	4c05      	ldr	r4, [pc, #20]	; (8003600 <_write_r+0x20>)
 80035ec:	6022      	str	r2, [r4, #0]
 80035ee:	461a      	mov	r2, r3
 80035f0:	f7ff f84e 	bl	8002690 <_write>
 80035f4:	1c43      	adds	r3, r0, #1
 80035f6:	d102      	bne.n	80035fe <_write_r+0x1e>
 80035f8:	6823      	ldr	r3, [r4, #0]
 80035fa:	b103      	cbz	r3, 80035fe <_write_r+0x1e>
 80035fc:	602b      	str	r3, [r5, #0]
 80035fe:	bd38      	pop	{r3, r4, r5, pc}
 8003600:	20001330 	.word	0x20001330

08003604 <__swsetup_r>:
 8003604:	4b32      	ldr	r3, [pc, #200]	; (80036d0 <__swsetup_r+0xcc>)
 8003606:	b570      	push	{r4, r5, r6, lr}
 8003608:	681d      	ldr	r5, [r3, #0]
 800360a:	4606      	mov	r6, r0
 800360c:	460c      	mov	r4, r1
 800360e:	b125      	cbz	r5, 800361a <__swsetup_r+0x16>
 8003610:	69ab      	ldr	r3, [r5, #24]
 8003612:	b913      	cbnz	r3, 800361a <__swsetup_r+0x16>
 8003614:	4628      	mov	r0, r5
 8003616:	f7ff fb49 	bl	8002cac <__sinit>
 800361a:	4b2e      	ldr	r3, [pc, #184]	; (80036d4 <__swsetup_r+0xd0>)
 800361c:	429c      	cmp	r4, r3
 800361e:	d10f      	bne.n	8003640 <__swsetup_r+0x3c>
 8003620:	686c      	ldr	r4, [r5, #4]
 8003622:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003626:	b29a      	uxth	r2, r3
 8003628:	0715      	lsls	r5, r2, #28
 800362a:	d42c      	bmi.n	8003686 <__swsetup_r+0x82>
 800362c:	06d0      	lsls	r0, r2, #27
 800362e:	d411      	bmi.n	8003654 <__swsetup_r+0x50>
 8003630:	2209      	movs	r2, #9
 8003632:	6032      	str	r2, [r6, #0]
 8003634:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003638:	81a3      	strh	r3, [r4, #12]
 800363a:	f04f 30ff 	mov.w	r0, #4294967295
 800363e:	bd70      	pop	{r4, r5, r6, pc}
 8003640:	4b25      	ldr	r3, [pc, #148]	; (80036d8 <__swsetup_r+0xd4>)
 8003642:	429c      	cmp	r4, r3
 8003644:	d101      	bne.n	800364a <__swsetup_r+0x46>
 8003646:	68ac      	ldr	r4, [r5, #8]
 8003648:	e7eb      	b.n	8003622 <__swsetup_r+0x1e>
 800364a:	4b24      	ldr	r3, [pc, #144]	; (80036dc <__swsetup_r+0xd8>)
 800364c:	429c      	cmp	r4, r3
 800364e:	bf08      	it	eq
 8003650:	68ec      	ldreq	r4, [r5, #12]
 8003652:	e7e6      	b.n	8003622 <__swsetup_r+0x1e>
 8003654:	0751      	lsls	r1, r2, #29
 8003656:	d512      	bpl.n	800367e <__swsetup_r+0x7a>
 8003658:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800365a:	b141      	cbz	r1, 800366e <__swsetup_r+0x6a>
 800365c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003660:	4299      	cmp	r1, r3
 8003662:	d002      	beq.n	800366a <__swsetup_r+0x66>
 8003664:	4630      	mov	r0, r6
 8003666:	f000 f983 	bl	8003970 <_free_r>
 800366a:	2300      	movs	r3, #0
 800366c:	6363      	str	r3, [r4, #52]	; 0x34
 800366e:	89a3      	ldrh	r3, [r4, #12]
 8003670:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003674:	81a3      	strh	r3, [r4, #12]
 8003676:	2300      	movs	r3, #0
 8003678:	6063      	str	r3, [r4, #4]
 800367a:	6923      	ldr	r3, [r4, #16]
 800367c:	6023      	str	r3, [r4, #0]
 800367e:	89a3      	ldrh	r3, [r4, #12]
 8003680:	f043 0308 	orr.w	r3, r3, #8
 8003684:	81a3      	strh	r3, [r4, #12]
 8003686:	6923      	ldr	r3, [r4, #16]
 8003688:	b94b      	cbnz	r3, 800369e <__swsetup_r+0x9a>
 800368a:	89a3      	ldrh	r3, [r4, #12]
 800368c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003690:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003694:	d003      	beq.n	800369e <__swsetup_r+0x9a>
 8003696:	4621      	mov	r1, r4
 8003698:	4630      	mov	r0, r6
 800369a:	f000 f919 	bl	80038d0 <__smakebuf_r>
 800369e:	89a2      	ldrh	r2, [r4, #12]
 80036a0:	f012 0301 	ands.w	r3, r2, #1
 80036a4:	d00c      	beq.n	80036c0 <__swsetup_r+0xbc>
 80036a6:	2300      	movs	r3, #0
 80036a8:	60a3      	str	r3, [r4, #8]
 80036aa:	6963      	ldr	r3, [r4, #20]
 80036ac:	425b      	negs	r3, r3
 80036ae:	61a3      	str	r3, [r4, #24]
 80036b0:	6923      	ldr	r3, [r4, #16]
 80036b2:	b953      	cbnz	r3, 80036ca <__swsetup_r+0xc6>
 80036b4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80036b8:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 80036bc:	d1ba      	bne.n	8003634 <__swsetup_r+0x30>
 80036be:	bd70      	pop	{r4, r5, r6, pc}
 80036c0:	0792      	lsls	r2, r2, #30
 80036c2:	bf58      	it	pl
 80036c4:	6963      	ldrpl	r3, [r4, #20]
 80036c6:	60a3      	str	r3, [r4, #8]
 80036c8:	e7f2      	b.n	80036b0 <__swsetup_r+0xac>
 80036ca:	2000      	movs	r0, #0
 80036cc:	e7f7      	b.n	80036be <__swsetup_r+0xba>
 80036ce:	bf00      	nop
 80036d0:	2000017c 	.word	0x2000017c
 80036d4:	08003b48 	.word	0x08003b48
 80036d8:	08003b68 	.word	0x08003b68
 80036dc:	08003b28 	.word	0x08003b28

080036e0 <_close_r>:
 80036e0:	b538      	push	{r3, r4, r5, lr}
 80036e2:	2300      	movs	r3, #0
 80036e4:	4c05      	ldr	r4, [pc, #20]	; (80036fc <_close_r+0x1c>)
 80036e6:	4605      	mov	r5, r0
 80036e8:	4608      	mov	r0, r1
 80036ea:	6023      	str	r3, [r4, #0]
 80036ec:	f7fe fff8 	bl	80026e0 <_close>
 80036f0:	1c43      	adds	r3, r0, #1
 80036f2:	d102      	bne.n	80036fa <_close_r+0x1a>
 80036f4:	6823      	ldr	r3, [r4, #0]
 80036f6:	b103      	cbz	r3, 80036fa <_close_r+0x1a>
 80036f8:	602b      	str	r3, [r5, #0]
 80036fa:	bd38      	pop	{r3, r4, r5, pc}
 80036fc:	20001330 	.word	0x20001330

08003700 <__sflush_r>:
 8003700:	898a      	ldrh	r2, [r1, #12]
 8003702:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003706:	4605      	mov	r5, r0
 8003708:	0710      	lsls	r0, r2, #28
 800370a:	460c      	mov	r4, r1
 800370c:	d45a      	bmi.n	80037c4 <__sflush_r+0xc4>
 800370e:	684b      	ldr	r3, [r1, #4]
 8003710:	2b00      	cmp	r3, #0
 8003712:	dc05      	bgt.n	8003720 <__sflush_r+0x20>
 8003714:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8003716:	2b00      	cmp	r3, #0
 8003718:	dc02      	bgt.n	8003720 <__sflush_r+0x20>
 800371a:	2000      	movs	r0, #0
 800371c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003720:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003722:	2e00      	cmp	r6, #0
 8003724:	d0f9      	beq.n	800371a <__sflush_r+0x1a>
 8003726:	2300      	movs	r3, #0
 8003728:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800372c:	682f      	ldr	r7, [r5, #0]
 800372e:	602b      	str	r3, [r5, #0]
 8003730:	d033      	beq.n	800379a <__sflush_r+0x9a>
 8003732:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003734:	89a3      	ldrh	r3, [r4, #12]
 8003736:	075a      	lsls	r2, r3, #29
 8003738:	d505      	bpl.n	8003746 <__sflush_r+0x46>
 800373a:	6863      	ldr	r3, [r4, #4]
 800373c:	1ac0      	subs	r0, r0, r3
 800373e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003740:	b10b      	cbz	r3, 8003746 <__sflush_r+0x46>
 8003742:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003744:	1ac0      	subs	r0, r0, r3
 8003746:	2300      	movs	r3, #0
 8003748:	4602      	mov	r2, r0
 800374a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800374c:	6a21      	ldr	r1, [r4, #32]
 800374e:	4628      	mov	r0, r5
 8003750:	47b0      	blx	r6
 8003752:	1c43      	adds	r3, r0, #1
 8003754:	89a3      	ldrh	r3, [r4, #12]
 8003756:	d106      	bne.n	8003766 <__sflush_r+0x66>
 8003758:	6829      	ldr	r1, [r5, #0]
 800375a:	291d      	cmp	r1, #29
 800375c:	d84b      	bhi.n	80037f6 <__sflush_r+0xf6>
 800375e:	4a2b      	ldr	r2, [pc, #172]	; (800380c <__sflush_r+0x10c>)
 8003760:	40ca      	lsrs	r2, r1
 8003762:	07d6      	lsls	r6, r2, #31
 8003764:	d547      	bpl.n	80037f6 <__sflush_r+0xf6>
 8003766:	2200      	movs	r2, #0
 8003768:	6062      	str	r2, [r4, #4]
 800376a:	6922      	ldr	r2, [r4, #16]
 800376c:	04d9      	lsls	r1, r3, #19
 800376e:	6022      	str	r2, [r4, #0]
 8003770:	d504      	bpl.n	800377c <__sflush_r+0x7c>
 8003772:	1c42      	adds	r2, r0, #1
 8003774:	d101      	bne.n	800377a <__sflush_r+0x7a>
 8003776:	682b      	ldr	r3, [r5, #0]
 8003778:	b903      	cbnz	r3, 800377c <__sflush_r+0x7c>
 800377a:	6560      	str	r0, [r4, #84]	; 0x54
 800377c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800377e:	602f      	str	r7, [r5, #0]
 8003780:	2900      	cmp	r1, #0
 8003782:	d0ca      	beq.n	800371a <__sflush_r+0x1a>
 8003784:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003788:	4299      	cmp	r1, r3
 800378a:	d002      	beq.n	8003792 <__sflush_r+0x92>
 800378c:	4628      	mov	r0, r5
 800378e:	f000 f8ef 	bl	8003970 <_free_r>
 8003792:	2000      	movs	r0, #0
 8003794:	6360      	str	r0, [r4, #52]	; 0x34
 8003796:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800379a:	6a21      	ldr	r1, [r4, #32]
 800379c:	2301      	movs	r3, #1
 800379e:	4628      	mov	r0, r5
 80037a0:	47b0      	blx	r6
 80037a2:	1c41      	adds	r1, r0, #1
 80037a4:	d1c6      	bne.n	8003734 <__sflush_r+0x34>
 80037a6:	682b      	ldr	r3, [r5, #0]
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d0c3      	beq.n	8003734 <__sflush_r+0x34>
 80037ac:	2b1d      	cmp	r3, #29
 80037ae:	d001      	beq.n	80037b4 <__sflush_r+0xb4>
 80037b0:	2b16      	cmp	r3, #22
 80037b2:	d101      	bne.n	80037b8 <__sflush_r+0xb8>
 80037b4:	602f      	str	r7, [r5, #0]
 80037b6:	e7b0      	b.n	800371a <__sflush_r+0x1a>
 80037b8:	89a3      	ldrh	r3, [r4, #12]
 80037ba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80037be:	81a3      	strh	r3, [r4, #12]
 80037c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80037c4:	690f      	ldr	r7, [r1, #16]
 80037c6:	2f00      	cmp	r7, #0
 80037c8:	d0a7      	beq.n	800371a <__sflush_r+0x1a>
 80037ca:	0793      	lsls	r3, r2, #30
 80037cc:	bf18      	it	ne
 80037ce:	2300      	movne	r3, #0
 80037d0:	680e      	ldr	r6, [r1, #0]
 80037d2:	bf08      	it	eq
 80037d4:	694b      	ldreq	r3, [r1, #20]
 80037d6:	eba6 0807 	sub.w	r8, r6, r7
 80037da:	600f      	str	r7, [r1, #0]
 80037dc:	608b      	str	r3, [r1, #8]
 80037de:	f1b8 0f00 	cmp.w	r8, #0
 80037e2:	dd9a      	ble.n	800371a <__sflush_r+0x1a>
 80037e4:	4643      	mov	r3, r8
 80037e6:	463a      	mov	r2, r7
 80037e8:	6a21      	ldr	r1, [r4, #32]
 80037ea:	4628      	mov	r0, r5
 80037ec:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80037ee:	47b0      	blx	r6
 80037f0:	2800      	cmp	r0, #0
 80037f2:	dc07      	bgt.n	8003804 <__sflush_r+0x104>
 80037f4:	89a3      	ldrh	r3, [r4, #12]
 80037f6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80037fa:	81a3      	strh	r3, [r4, #12]
 80037fc:	f04f 30ff 	mov.w	r0, #4294967295
 8003800:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003804:	4407      	add	r7, r0
 8003806:	eba8 0800 	sub.w	r8, r8, r0
 800380a:	e7e8      	b.n	80037de <__sflush_r+0xde>
 800380c:	20400001 	.word	0x20400001

08003810 <_fflush_r>:
 8003810:	b538      	push	{r3, r4, r5, lr}
 8003812:	690b      	ldr	r3, [r1, #16]
 8003814:	4605      	mov	r5, r0
 8003816:	460c      	mov	r4, r1
 8003818:	b1db      	cbz	r3, 8003852 <_fflush_r+0x42>
 800381a:	b118      	cbz	r0, 8003824 <_fflush_r+0x14>
 800381c:	6983      	ldr	r3, [r0, #24]
 800381e:	b90b      	cbnz	r3, 8003824 <_fflush_r+0x14>
 8003820:	f7ff fa44 	bl	8002cac <__sinit>
 8003824:	4b0c      	ldr	r3, [pc, #48]	; (8003858 <_fflush_r+0x48>)
 8003826:	429c      	cmp	r4, r3
 8003828:	d109      	bne.n	800383e <_fflush_r+0x2e>
 800382a:	686c      	ldr	r4, [r5, #4]
 800382c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003830:	b17b      	cbz	r3, 8003852 <_fflush_r+0x42>
 8003832:	4621      	mov	r1, r4
 8003834:	4628      	mov	r0, r5
 8003836:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800383a:	f7ff bf61 	b.w	8003700 <__sflush_r>
 800383e:	4b07      	ldr	r3, [pc, #28]	; (800385c <_fflush_r+0x4c>)
 8003840:	429c      	cmp	r4, r3
 8003842:	d101      	bne.n	8003848 <_fflush_r+0x38>
 8003844:	68ac      	ldr	r4, [r5, #8]
 8003846:	e7f1      	b.n	800382c <_fflush_r+0x1c>
 8003848:	4b05      	ldr	r3, [pc, #20]	; (8003860 <_fflush_r+0x50>)
 800384a:	429c      	cmp	r4, r3
 800384c:	bf08      	it	eq
 800384e:	68ec      	ldreq	r4, [r5, #12]
 8003850:	e7ec      	b.n	800382c <_fflush_r+0x1c>
 8003852:	2000      	movs	r0, #0
 8003854:	bd38      	pop	{r3, r4, r5, pc}
 8003856:	bf00      	nop
 8003858:	08003b48 	.word	0x08003b48
 800385c:	08003b68 	.word	0x08003b68
 8003860:	08003b28 	.word	0x08003b28

08003864 <_lseek_r>:
 8003864:	b538      	push	{r3, r4, r5, lr}
 8003866:	4605      	mov	r5, r0
 8003868:	4608      	mov	r0, r1
 800386a:	4611      	mov	r1, r2
 800386c:	2200      	movs	r2, #0
 800386e:	4c05      	ldr	r4, [pc, #20]	; (8003884 <_lseek_r+0x20>)
 8003870:	6022      	str	r2, [r4, #0]
 8003872:	461a      	mov	r2, r3
 8003874:	f7fe ff3e 	bl	80026f4 <_lseek>
 8003878:	1c43      	adds	r3, r0, #1
 800387a:	d102      	bne.n	8003882 <_lseek_r+0x1e>
 800387c:	6823      	ldr	r3, [r4, #0]
 800387e:	b103      	cbz	r3, 8003882 <_lseek_r+0x1e>
 8003880:	602b      	str	r3, [r5, #0]
 8003882:	bd38      	pop	{r3, r4, r5, pc}
 8003884:	20001330 	.word	0x20001330

08003888 <__swhatbuf_r>:
 8003888:	b570      	push	{r4, r5, r6, lr}
 800388a:	460e      	mov	r6, r1
 800388c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003890:	b090      	sub	sp, #64	; 0x40
 8003892:	2900      	cmp	r1, #0
 8003894:	4614      	mov	r4, r2
 8003896:	461d      	mov	r5, r3
 8003898:	da07      	bge.n	80038aa <__swhatbuf_r+0x22>
 800389a:	2300      	movs	r3, #0
 800389c:	602b      	str	r3, [r5, #0]
 800389e:	89b3      	ldrh	r3, [r6, #12]
 80038a0:	061a      	lsls	r2, r3, #24
 80038a2:	d410      	bmi.n	80038c6 <__swhatbuf_r+0x3e>
 80038a4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80038a8:	e00e      	b.n	80038c8 <__swhatbuf_r+0x40>
 80038aa:	aa01      	add	r2, sp, #4
 80038ac:	f000 f8be 	bl	8003a2c <_fstat_r>
 80038b0:	2800      	cmp	r0, #0
 80038b2:	dbf2      	blt.n	800389a <__swhatbuf_r+0x12>
 80038b4:	9a02      	ldr	r2, [sp, #8]
 80038b6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80038ba:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80038be:	425a      	negs	r2, r3
 80038c0:	415a      	adcs	r2, r3
 80038c2:	602a      	str	r2, [r5, #0]
 80038c4:	e7ee      	b.n	80038a4 <__swhatbuf_r+0x1c>
 80038c6:	2340      	movs	r3, #64	; 0x40
 80038c8:	2000      	movs	r0, #0
 80038ca:	6023      	str	r3, [r4, #0]
 80038cc:	b010      	add	sp, #64	; 0x40
 80038ce:	bd70      	pop	{r4, r5, r6, pc}

080038d0 <__smakebuf_r>:
 80038d0:	898b      	ldrh	r3, [r1, #12]
 80038d2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80038d4:	079d      	lsls	r5, r3, #30
 80038d6:	4606      	mov	r6, r0
 80038d8:	460c      	mov	r4, r1
 80038da:	d507      	bpl.n	80038ec <__smakebuf_r+0x1c>
 80038dc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80038e0:	6023      	str	r3, [r4, #0]
 80038e2:	6123      	str	r3, [r4, #16]
 80038e4:	2301      	movs	r3, #1
 80038e6:	6163      	str	r3, [r4, #20]
 80038e8:	b002      	add	sp, #8
 80038ea:	bd70      	pop	{r4, r5, r6, pc}
 80038ec:	ab01      	add	r3, sp, #4
 80038ee:	466a      	mov	r2, sp
 80038f0:	f7ff ffca 	bl	8003888 <__swhatbuf_r>
 80038f4:	9900      	ldr	r1, [sp, #0]
 80038f6:	4605      	mov	r5, r0
 80038f8:	4630      	mov	r0, r6
 80038fa:	f7ff fa61 	bl	8002dc0 <_malloc_r>
 80038fe:	b948      	cbnz	r0, 8003914 <__smakebuf_r+0x44>
 8003900:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003904:	059a      	lsls	r2, r3, #22
 8003906:	d4ef      	bmi.n	80038e8 <__smakebuf_r+0x18>
 8003908:	f023 0303 	bic.w	r3, r3, #3
 800390c:	f043 0302 	orr.w	r3, r3, #2
 8003910:	81a3      	strh	r3, [r4, #12]
 8003912:	e7e3      	b.n	80038dc <__smakebuf_r+0xc>
 8003914:	4b0d      	ldr	r3, [pc, #52]	; (800394c <__smakebuf_r+0x7c>)
 8003916:	62b3      	str	r3, [r6, #40]	; 0x28
 8003918:	89a3      	ldrh	r3, [r4, #12]
 800391a:	6020      	str	r0, [r4, #0]
 800391c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003920:	81a3      	strh	r3, [r4, #12]
 8003922:	9b00      	ldr	r3, [sp, #0]
 8003924:	6120      	str	r0, [r4, #16]
 8003926:	6163      	str	r3, [r4, #20]
 8003928:	9b01      	ldr	r3, [sp, #4]
 800392a:	b15b      	cbz	r3, 8003944 <__smakebuf_r+0x74>
 800392c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003930:	4630      	mov	r0, r6
 8003932:	f000 f88d 	bl	8003a50 <_isatty_r>
 8003936:	b128      	cbz	r0, 8003944 <__smakebuf_r+0x74>
 8003938:	89a3      	ldrh	r3, [r4, #12]
 800393a:	f023 0303 	bic.w	r3, r3, #3
 800393e:	f043 0301 	orr.w	r3, r3, #1
 8003942:	81a3      	strh	r3, [r4, #12]
 8003944:	89a3      	ldrh	r3, [r4, #12]
 8003946:	431d      	orrs	r5, r3
 8003948:	81a5      	strh	r5, [r4, #12]
 800394a:	e7cd      	b.n	80038e8 <__smakebuf_r+0x18>
 800394c:	08002c2d 	.word	0x08002c2d

08003950 <memchr>:
 8003950:	b510      	push	{r4, lr}
 8003952:	b2c9      	uxtb	r1, r1
 8003954:	4402      	add	r2, r0
 8003956:	4290      	cmp	r0, r2
 8003958:	4603      	mov	r3, r0
 800395a:	d101      	bne.n	8003960 <memchr+0x10>
 800395c:	2000      	movs	r0, #0
 800395e:	bd10      	pop	{r4, pc}
 8003960:	781c      	ldrb	r4, [r3, #0]
 8003962:	3001      	adds	r0, #1
 8003964:	428c      	cmp	r4, r1
 8003966:	d1f6      	bne.n	8003956 <memchr+0x6>
 8003968:	4618      	mov	r0, r3
 800396a:	bd10      	pop	{r4, pc}

0800396c <__malloc_lock>:
 800396c:	4770      	bx	lr

0800396e <__malloc_unlock>:
 800396e:	4770      	bx	lr

08003970 <_free_r>:
 8003970:	b538      	push	{r3, r4, r5, lr}
 8003972:	4605      	mov	r5, r0
 8003974:	2900      	cmp	r1, #0
 8003976:	d043      	beq.n	8003a00 <_free_r+0x90>
 8003978:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800397c:	1f0c      	subs	r4, r1, #4
 800397e:	2b00      	cmp	r3, #0
 8003980:	bfb8      	it	lt
 8003982:	18e4      	addlt	r4, r4, r3
 8003984:	f7ff fff2 	bl	800396c <__malloc_lock>
 8003988:	4a1e      	ldr	r2, [pc, #120]	; (8003a04 <_free_r+0x94>)
 800398a:	6813      	ldr	r3, [r2, #0]
 800398c:	4610      	mov	r0, r2
 800398e:	b933      	cbnz	r3, 800399e <_free_r+0x2e>
 8003990:	6063      	str	r3, [r4, #4]
 8003992:	6014      	str	r4, [r2, #0]
 8003994:	4628      	mov	r0, r5
 8003996:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800399a:	f7ff bfe8 	b.w	800396e <__malloc_unlock>
 800399e:	42a3      	cmp	r3, r4
 80039a0:	d90b      	bls.n	80039ba <_free_r+0x4a>
 80039a2:	6821      	ldr	r1, [r4, #0]
 80039a4:	1862      	adds	r2, r4, r1
 80039a6:	4293      	cmp	r3, r2
 80039a8:	bf01      	itttt	eq
 80039aa:	681a      	ldreq	r2, [r3, #0]
 80039ac:	685b      	ldreq	r3, [r3, #4]
 80039ae:	1852      	addeq	r2, r2, r1
 80039b0:	6022      	streq	r2, [r4, #0]
 80039b2:	6063      	str	r3, [r4, #4]
 80039b4:	6004      	str	r4, [r0, #0]
 80039b6:	e7ed      	b.n	8003994 <_free_r+0x24>
 80039b8:	4613      	mov	r3, r2
 80039ba:	685a      	ldr	r2, [r3, #4]
 80039bc:	b10a      	cbz	r2, 80039c2 <_free_r+0x52>
 80039be:	42a2      	cmp	r2, r4
 80039c0:	d9fa      	bls.n	80039b8 <_free_r+0x48>
 80039c2:	6819      	ldr	r1, [r3, #0]
 80039c4:	1858      	adds	r0, r3, r1
 80039c6:	42a0      	cmp	r0, r4
 80039c8:	d10b      	bne.n	80039e2 <_free_r+0x72>
 80039ca:	6820      	ldr	r0, [r4, #0]
 80039cc:	4401      	add	r1, r0
 80039ce:	1858      	adds	r0, r3, r1
 80039d0:	4282      	cmp	r2, r0
 80039d2:	6019      	str	r1, [r3, #0]
 80039d4:	d1de      	bne.n	8003994 <_free_r+0x24>
 80039d6:	6810      	ldr	r0, [r2, #0]
 80039d8:	6852      	ldr	r2, [r2, #4]
 80039da:	4401      	add	r1, r0
 80039dc:	6019      	str	r1, [r3, #0]
 80039de:	605a      	str	r2, [r3, #4]
 80039e0:	e7d8      	b.n	8003994 <_free_r+0x24>
 80039e2:	d902      	bls.n	80039ea <_free_r+0x7a>
 80039e4:	230c      	movs	r3, #12
 80039e6:	602b      	str	r3, [r5, #0]
 80039e8:	e7d4      	b.n	8003994 <_free_r+0x24>
 80039ea:	6820      	ldr	r0, [r4, #0]
 80039ec:	1821      	adds	r1, r4, r0
 80039ee:	428a      	cmp	r2, r1
 80039f0:	bf01      	itttt	eq
 80039f2:	6811      	ldreq	r1, [r2, #0]
 80039f4:	6852      	ldreq	r2, [r2, #4]
 80039f6:	1809      	addeq	r1, r1, r0
 80039f8:	6021      	streq	r1, [r4, #0]
 80039fa:	6062      	str	r2, [r4, #4]
 80039fc:	605c      	str	r4, [r3, #4]
 80039fe:	e7c9      	b.n	8003994 <_free_r+0x24>
 8003a00:	bd38      	pop	{r3, r4, r5, pc}
 8003a02:	bf00      	nop
 8003a04:	20000424 	.word	0x20000424

08003a08 <_read_r>:
 8003a08:	b538      	push	{r3, r4, r5, lr}
 8003a0a:	4605      	mov	r5, r0
 8003a0c:	4608      	mov	r0, r1
 8003a0e:	4611      	mov	r1, r2
 8003a10:	2200      	movs	r2, #0
 8003a12:	4c05      	ldr	r4, [pc, #20]	; (8003a28 <_read_r+0x20>)
 8003a14:	6022      	str	r2, [r4, #0]
 8003a16:	461a      	mov	r2, r3
 8003a18:	f7fe fe2c 	bl	8002674 <_read>
 8003a1c:	1c43      	adds	r3, r0, #1
 8003a1e:	d102      	bne.n	8003a26 <_read_r+0x1e>
 8003a20:	6823      	ldr	r3, [r4, #0]
 8003a22:	b103      	cbz	r3, 8003a26 <_read_r+0x1e>
 8003a24:	602b      	str	r3, [r5, #0]
 8003a26:	bd38      	pop	{r3, r4, r5, pc}
 8003a28:	20001330 	.word	0x20001330

08003a2c <_fstat_r>:
 8003a2c:	b538      	push	{r3, r4, r5, lr}
 8003a2e:	2300      	movs	r3, #0
 8003a30:	4c06      	ldr	r4, [pc, #24]	; (8003a4c <_fstat_r+0x20>)
 8003a32:	4605      	mov	r5, r0
 8003a34:	4608      	mov	r0, r1
 8003a36:	4611      	mov	r1, r2
 8003a38:	6023      	str	r3, [r4, #0]
 8003a3a:	f7fe fe54 	bl	80026e6 <_fstat>
 8003a3e:	1c43      	adds	r3, r0, #1
 8003a40:	d102      	bne.n	8003a48 <_fstat_r+0x1c>
 8003a42:	6823      	ldr	r3, [r4, #0]
 8003a44:	b103      	cbz	r3, 8003a48 <_fstat_r+0x1c>
 8003a46:	602b      	str	r3, [r5, #0]
 8003a48:	bd38      	pop	{r3, r4, r5, pc}
 8003a4a:	bf00      	nop
 8003a4c:	20001330 	.word	0x20001330

08003a50 <_isatty_r>:
 8003a50:	b538      	push	{r3, r4, r5, lr}
 8003a52:	2300      	movs	r3, #0
 8003a54:	4c05      	ldr	r4, [pc, #20]	; (8003a6c <_isatty_r+0x1c>)
 8003a56:	4605      	mov	r5, r0
 8003a58:	4608      	mov	r0, r1
 8003a5a:	6023      	str	r3, [r4, #0]
 8003a5c:	f7fe fe48 	bl	80026f0 <_isatty>
 8003a60:	1c43      	adds	r3, r0, #1
 8003a62:	d102      	bne.n	8003a6a <_isatty_r+0x1a>
 8003a64:	6823      	ldr	r3, [r4, #0]
 8003a66:	b103      	cbz	r3, 8003a6a <_isatty_r+0x1a>
 8003a68:	602b      	str	r3, [r5, #0]
 8003a6a:	bd38      	pop	{r3, r4, r5, pc}
 8003a6c:	20001330 	.word	0x20001330

08003a70 <_init>:
 8003a70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a72:	bf00      	nop
 8003a74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003a76:	bc08      	pop	{r3}
 8003a78:	469e      	mov	lr, r3
 8003a7a:	4770      	bx	lr

08003a7c <_fini>:
 8003a7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a7e:	bf00      	nop
 8003a80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003a82:	bc08      	pop	{r3}
 8003a84:	469e      	mov	lr, r3
 8003a86:	4770      	bx	lr
