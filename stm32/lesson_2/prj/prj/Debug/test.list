
test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003f38  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000134  08004044  08004044  00014044  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08004178  08004178  00014178  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0800417c  0800417c  0001417c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         000001e0  20000000  08004180  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000011a8  200001e0  08004360  000201e0  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  20001388  08004360  00021388  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
  9 .debug_info   000189aa  00000000  00000000  00020209  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00003ab8  00000000  00000000  00038bb3  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00008fd8  00000000  00000000  0003c66b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000d20  00000000  00000000  00045648  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00001188  00000000  00000000  00046368  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00007134  00000000  00000000  000474f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000048dd  00000000  00000000  0004e624  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  00052f01  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00002b80  00000000  00000000  00052f80  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200001e0 	.word	0x200001e0
 8000128:	00000000 	.word	0x00000000
 800012c:	0800402c 	.word	0x0800402c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200001e4 	.word	0x200001e4
 8000148:	0800402c 	.word	0x0800402c

0800014c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800014c:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800014e:	4b0e      	ldr	r3, [pc, #56]	; (8000188 <HAL_InitTick+0x3c>)
{
 8000150:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000152:	7818      	ldrb	r0, [r3, #0]
 8000154:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000158:	fbb3 f3f0 	udiv	r3, r3, r0
 800015c:	4a0b      	ldr	r2, [pc, #44]	; (800018c <HAL_InitTick+0x40>)
 800015e:	6810      	ldr	r0, [r2, #0]
 8000160:	fbb0 f0f3 	udiv	r0, r0, r3
 8000164:	f000 f88e 	bl	8000284 <HAL_SYSTICK_Config>
 8000168:	4604      	mov	r4, r0
 800016a:	b958      	cbnz	r0, 8000184 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800016c:	2d0f      	cmp	r5, #15
 800016e:	d809      	bhi.n	8000184 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000170:	4602      	mov	r2, r0
 8000172:	4629      	mov	r1, r5
 8000174:	f04f 30ff 	mov.w	r0, #4294967295
 8000178:	f000 f842 	bl	8000200 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800017c:	4b04      	ldr	r3, [pc, #16]	; (8000190 <HAL_InitTick+0x44>)
 800017e:	4620      	mov	r0, r4
 8000180:	601d      	str	r5, [r3, #0]
 8000182:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8000184:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8000186:	bd38      	pop	{r3, r4, r5, pc}
 8000188:	20000000 	.word	0x20000000
 800018c:	20000118 	.word	0x20000118
 8000190:	20000004 	.word	0x20000004

08000194 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000194:	4a07      	ldr	r2, [pc, #28]	; (80001b4 <HAL_Init+0x20>)
{
 8000196:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000198:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800019a:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800019c:	f043 0310 	orr.w	r3, r3, #16
 80001a0:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80001a2:	f000 f81b 	bl	80001dc <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80001a6:	2000      	movs	r0, #0
 80001a8:	f7ff ffd0 	bl	800014c <HAL_InitTick>
  HAL_MspInit();
 80001ac:	f002 fc14 	bl	80029d8 <HAL_MspInit>
}
 80001b0:	2000      	movs	r0, #0
 80001b2:	bd08      	pop	{r3, pc}
 80001b4:	40022000 	.word	0x40022000

080001b8 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80001b8:	4a03      	ldr	r2, [pc, #12]	; (80001c8 <HAL_IncTick+0x10>)
 80001ba:	4b04      	ldr	r3, [pc, #16]	; (80001cc <HAL_IncTick+0x14>)
 80001bc:	6811      	ldr	r1, [r2, #0]
 80001be:	781b      	ldrb	r3, [r3, #0]
 80001c0:	440b      	add	r3, r1
 80001c2:	6013      	str	r3, [r2, #0]
 80001c4:	4770      	bx	lr
 80001c6:	bf00      	nop
 80001c8:	20000440 	.word	0x20000440
 80001cc:	20000000 	.word	0x20000000

080001d0 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80001d0:	4b01      	ldr	r3, [pc, #4]	; (80001d8 <HAL_GetTick+0x8>)
 80001d2:	6818      	ldr	r0, [r3, #0]
}
 80001d4:	4770      	bx	lr
 80001d6:	bf00      	nop
 80001d8:	20000440 	.word	0x20000440

080001dc <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80001dc:	4a07      	ldr	r2, [pc, #28]	; (80001fc <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80001de:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80001e0:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80001e2:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80001e6:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80001ea:	041b      	lsls	r3, r3, #16
 80001ec:	0c1b      	lsrs	r3, r3, #16
 80001ee:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80001f2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 80001f6:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 80001f8:	60d3      	str	r3, [r2, #12]
 80001fa:	4770      	bx	lr
 80001fc:	e000ed00 	.word	0xe000ed00

08000200 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000200:	4b17      	ldr	r3, [pc, #92]	; (8000260 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000202:	b530      	push	{r4, r5, lr}
 8000204:	68dc      	ldr	r4, [r3, #12]
 8000206:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800020a:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800020e:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000210:	2b04      	cmp	r3, #4
 8000212:	bf28      	it	cs
 8000214:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000216:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000218:	f04f 0501 	mov.w	r5, #1
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800021c:	bf98      	it	ls
 800021e:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000220:	fa05 f303 	lsl.w	r3, r5, r3
 8000224:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000228:	bf88      	it	hi
 800022a:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800022c:	4019      	ands	r1, r3
 800022e:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000230:	fa05 f404 	lsl.w	r4, r5, r4
 8000234:	3c01      	subs	r4, #1
 8000236:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) >= 0)
 8000238:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800023a:	ea42 0201 	orr.w	r2, r2, r1
 800023e:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000242:	bfa9      	itett	ge
 8000244:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000248:	4b06      	ldrlt	r3, [pc, #24]	; (8000264 <HAL_NVIC_SetPriority+0x64>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800024a:	b2d2      	uxtbge	r2, r2
 800024c:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000250:	bfbb      	ittet	lt
 8000252:	f000 000f 	andlt.w	r0, r0, #15
 8000256:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000258:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800025c:	541a      	strblt	r2, [r3, r0]
 800025e:	bd30      	pop	{r4, r5, pc}
 8000260:	e000ed00 	.word	0xe000ed00
 8000264:	e000ed14 	.word	0xe000ed14

08000268 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8000268:	2800      	cmp	r0, #0
 800026a:	db08      	blt.n	800027e <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800026c:	2301      	movs	r3, #1
 800026e:	0942      	lsrs	r2, r0, #5
 8000270:	f000 001f 	and.w	r0, r0, #31
 8000274:	fa03 f000 	lsl.w	r0, r3, r0
 8000278:	4b01      	ldr	r3, [pc, #4]	; (8000280 <HAL_NVIC_EnableIRQ+0x18>)
 800027a:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800027e:	4770      	bx	lr
 8000280:	e000e100 	.word	0xe000e100

08000284 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000284:	3801      	subs	r0, #1
 8000286:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800028a:	d20a      	bcs.n	80002a2 <HAL_SYSTICK_Config+0x1e>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800028c:	21f0      	movs	r1, #240	; 0xf0
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800028e:	4b06      	ldr	r3, [pc, #24]	; (80002a8 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000290:	4a06      	ldr	r2, [pc, #24]	; (80002ac <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000292:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000294:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000298:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800029a:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800029c:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800029e:	601a      	str	r2, [r3, #0]
 80002a0:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80002a2:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80002a4:	4770      	bx	lr
 80002a6:	bf00      	nop
 80002a8:	e000e010 	.word	0xe000e010
 80002ac:	e000ed00 	.word	0xe000ed00

080002b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80002b0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00u;
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80002b4:	2400      	movs	r4, #0
  uint32_t position = 0x00u;
 80002b6:	4626      	mov	r6, r4
 80002b8:	4b66      	ldr	r3, [pc, #408]	; (8000454 <HAL_GPIO_Init+0x1a4>)
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80002ba:	f8df e1a8 	ldr.w	lr, [pc, #424]	; 8000464 <HAL_GPIO_Init+0x1b4>
 80002be:	f8df c1a8 	ldr.w	ip, [pc, #424]	; 8000468 <HAL_GPIO_Init+0x1b8>
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80002c2:	680a      	ldr	r2, [r1, #0]
 80002c4:	fa32 f506 	lsrs.w	r5, r2, r6
 80002c8:	d102      	bne.n	80002d0 <HAL_GPIO_Init+0x20>
      }
    }

	position++;
  }
}
 80002ca:	b003      	add	sp, #12
 80002cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ioposition = (0x01uL << position);
 80002d0:	f04f 0801 	mov.w	r8, #1
 80002d4:	fa08 f806 	lsl.w	r8, r8, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80002d8:	ea02 0208 	and.w	r2, r2, r8
    if (iocurrent == ioposition)
 80002dc:	4590      	cmp	r8, r2
 80002de:	d17f      	bne.n	80003e0 <HAL_GPIO_Init+0x130>
      switch (GPIO_Init->Mode)
 80002e0:	684d      	ldr	r5, [r1, #4]
 80002e2:	2d12      	cmp	r5, #18
 80002e4:	f000 80aa 	beq.w	800043c <HAL_GPIO_Init+0x18c>
 80002e8:	f200 8083 	bhi.w	80003f2 <HAL_GPIO_Init+0x142>
 80002ec:	2d02      	cmp	r5, #2
 80002ee:	f000 80a2 	beq.w	8000436 <HAL_GPIO_Init+0x186>
 80002f2:	d877      	bhi.n	80003e4 <HAL_GPIO_Init+0x134>
 80002f4:	2d00      	cmp	r5, #0
 80002f6:	f000 8089 	beq.w	800040c <HAL_GPIO_Init+0x15c>
 80002fa:	2d01      	cmp	r5, #1
 80002fc:	f000 8099 	beq.w	8000432 <HAL_GPIO_Init+0x182>
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000300:	f04f 090f 	mov.w	r9, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000304:	2aff      	cmp	r2, #255	; 0xff
 8000306:	bf93      	iteet	ls
 8000308:	4682      	movls	sl, r0
 800030a:	f106 4580 	addhi.w	r5, r6, #1073741824	; 0x40000000
 800030e:	3d08      	subhi	r5, #8
 8000310:	f8d0 b000 	ldrls.w	fp, [r0]
 8000314:	bf92      	itee	ls
 8000316:	00b5      	lslls	r5, r6, #2
 8000318:	f8d0 b004 	ldrhi.w	fp, [r0, #4]
 800031c:	00ad      	lslhi	r5, r5, #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800031e:	fa09 f805 	lsl.w	r8, r9, r5
 8000322:	ea2b 0808 	bic.w	r8, fp, r8
 8000326:	fa04 f505 	lsl.w	r5, r4, r5
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800032a:	bf88      	it	hi
 800032c:	f100 0a04 	addhi.w	sl, r0, #4
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000330:	ea48 0505 	orr.w	r5, r8, r5
 8000334:	f8ca 5000 	str.w	r5, [sl]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000338:	f8d1 a004 	ldr.w	sl, [r1, #4]
 800033c:	f01a 5f80 	tst.w	sl, #268435456	; 0x10000000
 8000340:	d04e      	beq.n	80003e0 <HAL_GPIO_Init+0x130>
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000342:	4d45      	ldr	r5, [pc, #276]	; (8000458 <HAL_GPIO_Init+0x1a8>)
 8000344:	4f44      	ldr	r7, [pc, #272]	; (8000458 <HAL_GPIO_Init+0x1a8>)
 8000346:	69ad      	ldr	r5, [r5, #24]
 8000348:	f026 0803 	bic.w	r8, r6, #3
 800034c:	f045 0501 	orr.w	r5, r5, #1
 8000350:	61bd      	str	r5, [r7, #24]
 8000352:	69bd      	ldr	r5, [r7, #24]
 8000354:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
 8000358:	f005 0501 	and.w	r5, r5, #1
 800035c:	9501      	str	r5, [sp, #4]
 800035e:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000362:	f006 0b03 	and.w	fp, r6, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000366:	9d01      	ldr	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000368:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = AFIO->EXTICR[position >> 2u];
 800036c:	f8d8 5008 	ldr.w	r5, [r8, #8]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000370:	fa09 f90b 	lsl.w	r9, r9, fp
 8000374:	ea25 0909 	bic.w	r9, r5, r9
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000378:	4d38      	ldr	r5, [pc, #224]	; (800045c <HAL_GPIO_Init+0x1ac>)
 800037a:	42a8      	cmp	r0, r5
 800037c:	d063      	beq.n	8000446 <HAL_GPIO_Init+0x196>
 800037e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000382:	42a8      	cmp	r0, r5
 8000384:	d061      	beq.n	800044a <HAL_GPIO_Init+0x19a>
 8000386:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800038a:	42a8      	cmp	r0, r5
 800038c:	d05f      	beq.n	800044e <HAL_GPIO_Init+0x19e>
 800038e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000392:	42a8      	cmp	r0, r5
 8000394:	bf0c      	ite	eq
 8000396:	2503      	moveq	r5, #3
 8000398:	2504      	movne	r5, #4
 800039a:	fa05 f50b 	lsl.w	r5, r5, fp
 800039e:	ea45 0509 	orr.w	r5, r5, r9
        AFIO->EXTICR[position >> 2u] = temp;
 80003a2:	f8c8 5008 	str.w	r5, [r8, #8]
          SET_BIT(EXTI->IMR, iocurrent);
 80003a6:	681d      	ldr	r5, [r3, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80003a8:	f41a 3f80 	tst.w	sl, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 80003ac:	bf14      	ite	ne
 80003ae:	4315      	orrne	r5, r2
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80003b0:	4395      	biceq	r5, r2
 80003b2:	601d      	str	r5, [r3, #0]
          SET_BIT(EXTI->EMR, iocurrent);
 80003b4:	685d      	ldr	r5, [r3, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80003b6:	f41a 3f00 	tst.w	sl, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 80003ba:	bf14      	ite	ne
 80003bc:	4315      	orrne	r5, r2
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80003be:	4395      	biceq	r5, r2
 80003c0:	605d      	str	r5, [r3, #4]
          SET_BIT(EXTI->RTSR, iocurrent);
 80003c2:	689d      	ldr	r5, [r3, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80003c4:	f41a 1f80 	tst.w	sl, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 80003c8:	bf14      	ite	ne
 80003ca:	4315      	orrne	r5, r2
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80003cc:	4395      	biceq	r5, r2
 80003ce:	609d      	str	r5, [r3, #8]
          SET_BIT(EXTI->FTSR, iocurrent);
 80003d0:	68dd      	ldr	r5, [r3, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80003d2:	f41a 1f00 	tst.w	sl, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 80003d6:	bf14      	ite	ne
 80003d8:	432a      	orrne	r2, r5
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80003da:	ea25 0202 	biceq.w	r2, r5, r2
 80003de:	60da      	str	r2, [r3, #12]
	position++;
 80003e0:	3601      	adds	r6, #1
 80003e2:	e76e      	b.n	80002c2 <HAL_GPIO_Init+0x12>
      switch (GPIO_Init->Mode)
 80003e4:	2d03      	cmp	r5, #3
 80003e6:	d022      	beq.n	800042e <HAL_GPIO_Init+0x17e>
 80003e8:	2d11      	cmp	r5, #17
 80003ea:	d189      	bne.n	8000300 <HAL_GPIO_Init+0x50>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80003ec:	68cc      	ldr	r4, [r1, #12]
 80003ee:	3404      	adds	r4, #4
          break;
 80003f0:	e786      	b.n	8000300 <HAL_GPIO_Init+0x50>
      switch (GPIO_Init->Mode)
 80003f2:	4f1b      	ldr	r7, [pc, #108]	; (8000460 <HAL_GPIO_Init+0x1b0>)
 80003f4:	42bd      	cmp	r5, r7
 80003f6:	d009      	beq.n	800040c <HAL_GPIO_Init+0x15c>
 80003f8:	d812      	bhi.n	8000420 <HAL_GPIO_Init+0x170>
 80003fa:	f8df 9070 	ldr.w	r9, [pc, #112]	; 800046c <HAL_GPIO_Init+0x1bc>
 80003fe:	454d      	cmp	r5, r9
 8000400:	d004      	beq.n	800040c <HAL_GPIO_Init+0x15c>
 8000402:	f509 3980 	add.w	r9, r9, #65536	; 0x10000
 8000406:	454d      	cmp	r5, r9
 8000408:	f47f af7a 	bne.w	8000300 <HAL_GPIO_Init+0x50>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800040c:	688c      	ldr	r4, [r1, #8]
 800040e:	b1c4      	cbz	r4, 8000442 <HAL_GPIO_Init+0x192>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000410:	2c01      	cmp	r4, #1
            GPIOx->BSRR = ioposition;
 8000412:	bf0c      	ite	eq
 8000414:	f8c0 8010 	streq.w	r8, [r0, #16]
            GPIOx->BRR = ioposition;
 8000418:	f8c0 8014 	strne.w	r8, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800041c:	2408      	movs	r4, #8
 800041e:	e76f      	b.n	8000300 <HAL_GPIO_Init+0x50>
      switch (GPIO_Init->Mode)
 8000420:	4575      	cmp	r5, lr
 8000422:	d0f3      	beq.n	800040c <HAL_GPIO_Init+0x15c>
 8000424:	4565      	cmp	r5, ip
 8000426:	d0f1      	beq.n	800040c <HAL_GPIO_Init+0x15c>
 8000428:	f8df 9044 	ldr.w	r9, [pc, #68]	; 8000470 <HAL_GPIO_Init+0x1c0>
 800042c:	e7eb      	b.n	8000406 <HAL_GPIO_Init+0x156>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800042e:	2400      	movs	r4, #0
 8000430:	e766      	b.n	8000300 <HAL_GPIO_Init+0x50>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000432:	68cc      	ldr	r4, [r1, #12]
          break;
 8000434:	e764      	b.n	8000300 <HAL_GPIO_Init+0x50>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000436:	68cc      	ldr	r4, [r1, #12]
 8000438:	3408      	adds	r4, #8
          break;
 800043a:	e761      	b.n	8000300 <HAL_GPIO_Init+0x50>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800043c:	68cc      	ldr	r4, [r1, #12]
 800043e:	340c      	adds	r4, #12
          break;
 8000440:	e75e      	b.n	8000300 <HAL_GPIO_Init+0x50>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000442:	2404      	movs	r4, #4
 8000444:	e75c      	b.n	8000300 <HAL_GPIO_Init+0x50>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000446:	2500      	movs	r5, #0
 8000448:	e7a7      	b.n	800039a <HAL_GPIO_Init+0xea>
 800044a:	2501      	movs	r5, #1
 800044c:	e7a5      	b.n	800039a <HAL_GPIO_Init+0xea>
 800044e:	2502      	movs	r5, #2
 8000450:	e7a3      	b.n	800039a <HAL_GPIO_Init+0xea>
 8000452:	bf00      	nop
 8000454:	40010400 	.word	0x40010400
 8000458:	40021000 	.word	0x40021000
 800045c:	40010800 	.word	0x40010800
 8000460:	10210000 	.word	0x10210000
 8000464:	10310000 	.word	0x10310000
 8000468:	10320000 	.word	0x10320000
 800046c:	10110000 	.word	0x10110000
 8000470:	10220000 	.word	0x10220000

08000474 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000474:	b10a      	cbz	r2, 800047a <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000476:	6101      	str	r1, [r0, #16]
 8000478:	4770      	bx	lr
 800047a:	0409      	lsls	r1, r1, #16
 800047c:	e7fb      	b.n	8000476 <HAL_GPIO_WritePin+0x2>

0800047e <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 800047e:	68c3      	ldr	r3, [r0, #12]
 8000480:	420b      	tst	r3, r1
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000482:	bf14      	ite	ne
 8000484:	6141      	strne	r1, [r0, #20]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000486:	6101      	streq	r1, [r0, #16]
 8000488:	4770      	bx	lr
	...

0800048c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800048c:	b508      	push	{r3, lr}
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800048e:	4b04      	ldr	r3, [pc, #16]	; (80004a0 <HAL_GPIO_EXTI_IRQHandler+0x14>)
 8000490:	6959      	ldr	r1, [r3, #20]
 8000492:	4201      	tst	r1, r0
 8000494:	d002      	beq.n	800049c <HAL_GPIO_EXTI_IRQHandler+0x10>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000496:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000498:	f002 fb2a 	bl	8002af0 <HAL_GPIO_EXTI_Callback>
 800049c:	bd08      	pop	{r3, pc}
 800049e:	bf00      	nop
 80004a0:	40010400 	.word	0x40010400

080004a4 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80004a4:	b5f0      	push	{r4, r5, r6, r7, lr}
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80004a6:	4604      	mov	r4, r0
{
 80004a8:	b087      	sub	sp, #28
  if (hpcd == NULL)
 80004aa:	b310      	cbz	r0, 80004f2 <HAL_PCD_Init+0x4e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80004ac:	f890 3229 	ldrb.w	r3, [r0, #553]	; 0x229
 80004b0:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80004b4:	b91b      	cbnz	r3, 80004be <HAL_PCD_Init+0x1a>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80004b6:	f880 2228 	strb.w	r2, [r0, #552]	; 0x228

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80004ba:	f002 fc6f 	bl	8002d9c <HAL_PCD_MspInit>
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80004be:	4625      	mov	r5, r4
  hpcd->State = HAL_PCD_STATE_BUSY;
 80004c0:	2303      	movs	r3, #3

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80004c2:	466e      	mov	r6, sp
  __HAL_PCD_DISABLE(hpcd);
 80004c4:	f855 0b10 	ldr.w	r0, [r5], #16
  hpcd->State = HAL_PCD_STATE_BUSY;
 80004c8:	f884 3229 	strb.w	r3, [r4, #553]	; 0x229
  __HAL_PCD_DISABLE(hpcd);
 80004cc:	f001 f878 	bl	80015c0 <USB_DisableGlobalInt>
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80004d0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80004d2:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80004d4:	682b      	ldr	r3, [r5, #0]
 80004d6:	4625      	mov	r5, r4
 80004d8:	6033      	str	r3, [r6, #0]
 80004da:	1d27      	adds	r7, r4, #4
 80004dc:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 80004e0:	f855 0b10 	ldr.w	r0, [r5], #16
 80004e4:	f001 f85c 	bl	80015a0 <USB_CoreInit>
 80004e8:	4606      	mov	r6, r0
 80004ea:	b120      	cbz	r0, 80004f6 <HAL_PCD_Init+0x52>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80004ec:	2302      	movs	r3, #2
 80004ee:	f884 3229 	strb.w	r3, [r4, #553]	; 0x229
    return HAL_ERROR;
 80004f2:	2501      	movs	r5, #1
 80004f4:	e048      	b.n	8000588 <HAL_PCD_Init+0xe4>
    return HAL_ERROR;
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80004f6:	4601      	mov	r1, r0
 80004f8:	6820      	ldr	r0, [r4, #0]
 80004fa:	f001 f86b 	bl	80015d4 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80004fe:	4630      	mov	r0, r6
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8000500:	f04f 0e01 	mov.w	lr, #1
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000504:	6861      	ldr	r1, [r4, #4]
 8000506:	b2c3      	uxtb	r3, r0
 8000508:	4299      	cmp	r1, r3
 800050a:	f100 0001 	add.w	r0, r0, #1
 800050e:	d817      	bhi.n	8000540 <HAL_PCD_Init+0x9c>
 8000510:	2200      	movs	r2, #0
    hpcd->IN_ep[i].xfer_len = 0U;
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8000512:	4610      	mov	r0, r2
 8000514:	b2d3      	uxtb	r3, r2
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000516:	4299      	cmp	r1, r3
 8000518:	f102 0201 	add.w	r2, r2, #1
 800051c:	d81d      	bhi.n	800055a <HAL_PCD_Init+0xb6>
    hpcd->OUT_ep[i].xfer_buff = 0U;
    hpcd->OUT_ep[i].xfer_len = 0U;
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800051e:	466e      	mov	r6, sp
 8000520:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000522:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8000524:	682b      	ldr	r3, [r5, #0]
 8000526:	6033      	str	r3, [r6, #0]
 8000528:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 800052c:	6820      	ldr	r0, [r4, #0]
 800052e:	f001 f853 	bl	80015d8 <USB_DevInit>
 8000532:	2301      	movs	r3, #1
 8000534:	4605      	mov	r5, r0
 8000536:	b300      	cbz	r0, 800057a <HAL_PCD_Init+0xd6>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000538:	2202      	movs	r2, #2
 800053a:	f884 2229 	strb.w	r2, [r4, #553]	; 0x229
 800053e:	e7d8      	b.n	80004f2 <HAL_PCD_Init+0x4e>
    hpcd->IN_ep[i].is_in = 1U;
 8000540:	eb04 1243 	add.w	r2, r4, r3, lsl #5
 8000544:	f882 e029 	strb.w	lr, [r2, #41]	; 0x29
    hpcd->IN_ep[i].num = i;
 8000548:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
    hpcd->IN_ep[i].tx_fifo_num = i;
 800054c:	86d3      	strh	r3, [r2, #54]	; 0x36
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800054e:	f882 602b 	strb.w	r6, [r2, #43]	; 0x2b
    hpcd->IN_ep[i].maxpacket = 0U;
 8000552:	6396      	str	r6, [r2, #56]	; 0x38
    hpcd->IN_ep[i].xfer_buff = 0U;
 8000554:	63d6      	str	r6, [r2, #60]	; 0x3c
    hpcd->IN_ep[i].xfer_len = 0U;
 8000556:	6416      	str	r6, [r2, #64]	; 0x40
 8000558:	e7d5      	b.n	8000506 <HAL_PCD_Init+0x62>
    hpcd->OUT_ep[i].is_in = 0U;
 800055a:	eb04 1643 	add.w	r6, r4, r3, lsl #5
    hpcd->OUT_ep[i].num = i;
 800055e:	f886 3128 	strb.w	r3, [r6, #296]	; 0x128
    hpcd->OUT_ep[i].xfer_len = 0U;
 8000562:	330a      	adds	r3, #10
 8000564:	015b      	lsls	r3, r3, #5
    hpcd->OUT_ep[i].is_in = 0U;
 8000566:	f886 0129 	strb.w	r0, [r6, #297]	; 0x129
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800056a:	f886 012b 	strb.w	r0, [r6, #299]	; 0x12b
    hpcd->OUT_ep[i].maxpacket = 0U;
 800056e:	f8c6 0138 	str.w	r0, [r6, #312]	; 0x138
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8000572:	f8c6 013c 	str.w	r0, [r6, #316]	; 0x13c
    hpcd->OUT_ep[i].xfer_len = 0U;
 8000576:	50e0      	str	r0, [r4, r3]
 8000578:	e7cc      	b.n	8000514 <HAL_PCD_Init+0x70>
    return HAL_ERROR;
  }

  hpcd->USB_Address = 0U;
 800057a:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 800057e:	f884 3229 	strb.w	r3, [r4, #553]	; 0x229
  (void)USB_DevDisconnect(hpcd->Instance);
 8000582:	6820      	ldr	r0, [r4, #0]
 8000584:	f001 fb0e 	bl	8001ba4 <USB_DevDisconnect>

  return HAL_OK;
}
 8000588:	4628      	mov	r0, r5
 800058a:	b007      	add	sp, #28
 800058c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800058e <HAL_PCD_Start>:
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
  __HAL_LOCK(hpcd);
 800058e:	f890 3228 	ldrb.w	r3, [r0, #552]	; 0x228
{
 8000592:	b510      	push	{r4, lr}
  __HAL_LOCK(hpcd);
 8000594:	2b01      	cmp	r3, #1
{
 8000596:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 8000598:	d00e      	beq.n	80005b8 <HAL_PCD_Start+0x2a>
 800059a:	2101      	movs	r1, #1
 800059c:	f880 1228 	strb.w	r1, [r0, #552]	; 0x228
#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 80005a0:	f002 fd25 	bl	8002fee <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */
  (void)USB_DevConnect(hpcd->Instance);
 80005a4:	6820      	ldr	r0, [r4, #0]
 80005a6:	f001 fafb 	bl	8001ba0 <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 80005aa:	6820      	ldr	r0, [r4, #0]
 80005ac:	f000 ffff 	bl	80015ae <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 80005b0:	2000      	movs	r0, #0
 80005b2:	f884 0228 	strb.w	r0, [r4, #552]	; 0x228
  return HAL_OK;
 80005b6:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 80005b8:	2002      	movs	r0, #2
}
 80005ba:	bd10      	pop	{r4, pc}

080005bc <HAL_PCD_SetAddress>:
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
  __HAL_LOCK(hpcd);
 80005bc:	f890 2228 	ldrb.w	r2, [r0, #552]	; 0x228
{
 80005c0:	b510      	push	{r4, lr}
  __HAL_LOCK(hpcd);
 80005c2:	2a01      	cmp	r2, #1
{
 80005c4:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 80005c6:	d00b      	beq.n	80005e0 <HAL_PCD_SetAddress+0x24>
 80005c8:	2201      	movs	r2, #1
 80005ca:	f880 2228 	strb.w	r2, [r0, #552]	; 0x228
  hpcd->USB_Address = address;
 80005ce:	f884 1024 	strb.w	r1, [r4, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80005d2:	6800      	ldr	r0, [r0, #0]
 80005d4:	f001 fade 	bl	8001b94 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80005d8:	2000      	movs	r0, #0
 80005da:	f884 0228 	strb.w	r0, [r4, #552]	; 0x228
 80005de:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 80005e0:	2002      	movs	r0, #2
  return HAL_OK;
}
 80005e2:	bd10      	pop	{r4, pc}

080005e4 <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 80005e4:	b570      	push	{r4, r5, r6, lr}
  HAL_StatusTypeDef  ret = HAL_OK;
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80005e6:	f011 0f80 	tst.w	r1, #128	; 0x80
{
 80005ea:	4604      	mov	r4, r0
 80005ec:	f001 0007 	and.w	r0, r1, #7
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80005f0:	ea4f 1540 	mov.w	r5, r0, lsl #5
  if ((ep_addr & 0x80U) == 0x80U)
 80005f4:	d01f      	beq.n	8000636 <HAL_PCD_EP_Open+0x52>
    ep->is_in = 1U;
 80005f6:	2601      	movs	r6, #1
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80005f8:	f105 0128 	add.w	r1, r5, #40	; 0x28
    ep->is_in = 1U;
 80005fc:	4425      	add	r5, r4
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80005fe:	4421      	add	r1, r4
    ep->is_in = 1U;
 8000600:	f885 6029 	strb.w	r6, [r5, #41]	; 0x29
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
    ep->is_in = 0U;
  }

  ep->num = ep_addr & EP_ADDR_MSK;
  ep->maxpacket = ep_mps;
 8000604:	610a      	str	r2, [r1, #16]
  ep->type = ep_type;

  if (ep->is_in != 0U)
 8000606:	784a      	ldrb	r2, [r1, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8000608:	b2c0      	uxtb	r0, r0
 800060a:	7008      	strb	r0, [r1, #0]
  ep->type = ep_type;
 800060c:	70cb      	strb	r3, [r1, #3]
  if (ep->is_in != 0U)
 800060e:	b102      	cbz	r2, 8000612 <HAL_PCD_EP_Open+0x2e>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8000610:	81c8      	strh	r0, [r1, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8000612:	2b02      	cmp	r3, #2
  {
    ep->data_pid_start = 0U;
 8000614:	bf04      	itt	eq
 8000616:	2300      	moveq	r3, #0
 8000618:	710b      	strbeq	r3, [r1, #4]
  }

  __HAL_LOCK(hpcd);
 800061a:	f894 3228 	ldrb.w	r3, [r4, #552]	; 0x228
 800061e:	2b01      	cmp	r3, #1
 8000620:	d011      	beq.n	8000646 <HAL_PCD_EP_Open+0x62>
 8000622:	2301      	movs	r3, #1
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8000624:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 8000626:	f884 3228 	strb.w	r3, [r4, #552]	; 0x228
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800062a:	f000 fff1 	bl	8001610 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800062e:	2000      	movs	r0, #0
 8000630:	f884 0228 	strb.w	r0, [r4, #552]	; 0x228

  return ret;
 8000634:	bd70      	pop	{r4, r5, r6, pc}
    ep->is_in = 0U;
 8000636:	2600      	movs	r6, #0
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8000638:	f505 7194 	add.w	r1, r5, #296	; 0x128
    ep->is_in = 0U;
 800063c:	4425      	add	r5, r4
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800063e:	4421      	add	r1, r4
    ep->is_in = 0U;
 8000640:	f885 6129 	strb.w	r6, [r5, #297]	; 0x129
 8000644:	e7de      	b.n	8000604 <HAL_PCD_EP_Open+0x20>
  __HAL_LOCK(hpcd);
 8000646:	2002      	movs	r0, #2
}
 8000648:	bd70      	pop	{r4, r5, r6, pc}

0800064a <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800064a:	f001 0307 	and.w	r3, r1, #7
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800064e:	f011 0f80 	tst.w	r1, #128	; 0x80
{
 8000652:	b510      	push	{r4, lr}
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8000654:	ea4f 1243 	mov.w	r2, r3, lsl #5
{
 8000658:	4604      	mov	r4, r0
  if ((ep_addr & 0x80U) == 0x80U)
 800065a:	d015      	beq.n	8000688 <HAL_PCD_EP_Close+0x3e>
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800065c:	f102 0128 	add.w	r1, r2, #40	; 0x28
 8000660:	4401      	add	r1, r0
    ep->is_in = 1U;
 8000662:	4402      	add	r2, r0
 8000664:	2001      	movs	r0, #1
 8000666:	f882 0029 	strb.w	r0, [r2, #41]	; 0x29
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
    ep->is_in = 0U;
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800066a:	700b      	strb	r3, [r1, #0]

  __HAL_LOCK(hpcd);
 800066c:	f894 3228 	ldrb.w	r3, [r4, #552]	; 0x228
 8000670:	2b01      	cmp	r3, #1
 8000672:	d011      	beq.n	8000698 <HAL_PCD_EP_Close+0x4e>
 8000674:	2301      	movs	r3, #1
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8000676:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 8000678:	f884 3228 	strb.w	r3, [r4, #552]	; 0x228
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800067c:	f001 f940 	bl	8001900 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8000680:	2000      	movs	r0, #0
 8000682:	f884 0228 	strb.w	r0, [r4, #552]	; 0x228
  return HAL_OK;
 8000686:	bd10      	pop	{r4, pc}
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8000688:	f502 7194 	add.w	r1, r2, #296	; 0x128
 800068c:	4401      	add	r1, r0
    ep->is_in = 0U;
 800068e:	4402      	add	r2, r0
 8000690:	2000      	movs	r0, #0
 8000692:	f882 0129 	strb.w	r0, [r2, #297]	; 0x129
 8000696:	e7e8      	b.n	800066a <HAL_PCD_EP_Close+0x20>
  __HAL_LOCK(hpcd);
 8000698:	2002      	movs	r0, #2
}
 800069a:	bd10      	pop	{r4, pc}

0800069c <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800069c:	b570      	push	{r4, r5, r6, lr}
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
  ep->xfer_len = len;
  ep->xfer_count = 0U;
 800069e:	2600      	movs	r6, #0
 80006a0:	f001 0107 	and.w	r1, r1, #7
 80006a4:	014d      	lsls	r5, r1, #5
  ep->xfer_buff = pBuf;
 80006a6:	1944      	adds	r4, r0, r5
  ep->is_in = 0U;
  ep->num = ep_addr & EP_ADDR_MSK;
 80006a8:	f884 1128 	strb.w	r1, [r4, #296]	; 0x128
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80006ac:	f505 7194 	add.w	r1, r5, #296	; 0x128
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80006b0:	4401      	add	r1, r0
  ep->xfer_buff = pBuf;
 80006b2:	f8c4 213c 	str.w	r2, [r4, #316]	; 0x13c
  ep->xfer_len = len;
 80006b6:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
  ep->xfer_count = 0U;
 80006ba:	f8c4 6144 	str.w	r6, [r4, #324]	; 0x144
  ep->is_in = 0U;
 80006be:	f884 6129 	strb.w	r6, [r4, #297]	; 0x129
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80006c2:	6800      	ldr	r0, [r0, #0]
 80006c4:	f001 fa86 	bl	8001bd4 <USB_EPStartXfer>
  }

  return HAL_OK;
}
 80006c8:	4630      	mov	r0, r6
 80006ca:	bd70      	pop	{r4, r5, r6, pc}

080006cc <HAL_PCD_EP_GetRxCount>:
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80006cc:	f001 0107 	and.w	r1, r1, #7
 80006d0:	eb00 1141 	add.w	r1, r0, r1, lsl #5
}
 80006d4:	f8d1 0144 	ldr.w	r0, [r1, #324]	; 0x144
 80006d8:	4770      	bx	lr

080006da <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80006da:	f001 0107 	and.w	r1, r1, #7
 80006de:	b570      	push	{r4, r5, r6, lr}
 80006e0:	014d      	lsls	r5, r1, #5
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80006e2:	1944      	adds	r4, r0, r5
  ep->xfer_len = len;
 80006e4:	6423      	str	r3, [r4, #64]	; 0x40
  ep->xfer_count = 0U;
 80006e6:	2600      	movs	r6, #0
  ep->is_in = 1U;
 80006e8:	2301      	movs	r3, #1
  ep->num = ep_addr & EP_ADDR_MSK;
 80006ea:	f884 1028 	strb.w	r1, [r4, #40]	; 0x28
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80006ee:	f105 0128 	add.w	r1, r5, #40	; 0x28
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80006f2:	4401      	add	r1, r0
  ep->xfer_buff = pBuf;
 80006f4:	63e2      	str	r2, [r4, #60]	; 0x3c
  ep->xfer_count = 0U;
 80006f6:	6466      	str	r6, [r4, #68]	; 0x44
  ep->is_in = 1U;
 80006f8:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80006fc:	6800      	ldr	r0, [r0, #0]
 80006fe:	f001 fa69 	bl	8001bd4 <USB_EPStartXfer>
  }

  return HAL_OK;
}
 8000702:	4630      	mov	r0, r6
 8000704:	bd70      	pop	{r4, r5, r6, pc}
	...

08000708 <HAL_PCD_IRQHandler>:
{
 8000708:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800070c:	4604      	mov	r4, r0
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 800070e:	6800      	ldr	r0, [r0, #0]
 8000710:	f001 fa4a 	bl	8001ba8 <USB_ReadInterrupts>
 8000714:	0402      	lsls	r2, r0, #16
 8000716:	f100 8210 	bmi.w	8000b3a <HAL_PCD_IRQHandler+0x432>
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 800071a:	6820      	ldr	r0, [r4, #0]
 800071c:	f001 fa44 	bl	8001ba8 <USB_ReadInterrupts>
 8000720:	0543      	lsls	r3, r0, #21
 8000722:	d50f      	bpl.n	8000744 <HAL_PCD_IRQHandler+0x3c>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8000724:	6822      	ldr	r2, [r4, #0]
    HAL_PCD_ResetCallback(hpcd);
 8000726:	4620      	mov	r0, r4
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8000728:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 800072c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000730:	041b      	lsls	r3, r3, #16
 8000732:	0c1b      	lsrs	r3, r3, #16
 8000734:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    HAL_PCD_ResetCallback(hpcd);
 8000738:	f002 fb67 	bl	8002e0a <HAL_PCD_ResetCallback>
    (void)HAL_PCD_SetAddress(hpcd, 0U);
 800073c:	2100      	movs	r1, #0
 800073e:	4620      	mov	r0, r4
 8000740:	f7ff ff3c 	bl	80005bc <HAL_PCD_SetAddress>
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8000744:	6820      	ldr	r0, [r4, #0]
 8000746:	f001 fa2f 	bl	8001ba8 <USB_ReadInterrupts>
 800074a:	0447      	lsls	r7, r0, #17
 800074c:	d508      	bpl.n	8000760 <HAL_PCD_IRQHandler+0x58>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 800074e:	6822      	ldr	r2, [r4, #0]
 8000750:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8000754:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000758:	041b      	lsls	r3, r3, #16
 800075a:	0c1b      	lsrs	r3, r3, #16
 800075c:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8000760:	6820      	ldr	r0, [r4, #0]
 8000762:	f001 fa21 	bl	8001ba8 <USB_ReadInterrupts>
 8000766:	0486      	lsls	r6, r0, #18
 8000768:	d508      	bpl.n	800077c <HAL_PCD_IRQHandler+0x74>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 800076a:	6822      	ldr	r2, [r4, #0]
 800076c:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8000770:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8000774:	041b      	lsls	r3, r3, #16
 8000776:	0c1b      	lsrs	r3, r3, #16
 8000778:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 800077c:	6820      	ldr	r0, [r4, #0]
 800077e:	f001 fa13 	bl	8001ba8 <USB_ReadInterrupts>
 8000782:	04c5      	lsls	r5, r0, #19
 8000784:	d51c      	bpl.n	80007c0 <HAL_PCD_IRQHandler+0xb8>
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8000786:	6822      	ldr	r2, [r4, #0]
    HAL_PCD_ResumeCallback(hpcd);
 8000788:	4620      	mov	r0, r4
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 800078a:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 800078e:	f023 0304 	bic.w	r3, r3, #4
 8000792:	041b      	lsls	r3, r3, #16
 8000794:	0c1b      	lsrs	r3, r3, #16
 8000796:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 800079a:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 800079e:	f023 0308 	bic.w	r3, r3, #8
 80007a2:	041b      	lsls	r3, r3, #16
 80007a4:	0c1b      	lsrs	r3, r3, #16
 80007a6:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    HAL_PCD_ResumeCallback(hpcd);
 80007aa:	f002 fb51 	bl	8002e50 <HAL_PCD_ResumeCallback>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80007ae:	6822      	ldr	r2, [r4, #0]
 80007b0:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 80007b4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80007b8:	041b      	lsls	r3, r3, #16
 80007ba:	0c1b      	lsrs	r3, r3, #16
 80007bc:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 80007c0:	6820      	ldr	r0, [r4, #0]
 80007c2:	f001 f9f1 	bl	8001ba8 <USB_ReadInterrupts>
 80007c6:	0500      	lsls	r0, r0, #20
 80007c8:	d526      	bpl.n	8000818 <HAL_PCD_IRQHandler+0x110>
    hpcd->Instance->CNTR |= USB_CNTR_FSUSP;
 80007ca:	6820      	ldr	r0, [r4, #0]
 80007cc:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 80007d0:	b29b      	uxth	r3, r3
 80007d2:	f043 0308 	orr.w	r3, r3, #8
 80007d6:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80007da:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
 80007de:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80007e2:	041b      	lsls	r3, r3, #16
 80007e4:	0c1b      	lsrs	r3, r3, #16
 80007e6:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
    hpcd->Instance->CNTR |= USB_CNTR_LP_MODE;
 80007ea:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 80007ee:	b29b      	uxth	r3, r3
 80007f0:	f043 0304 	orr.w	r3, r3, #4
 80007f4:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
    if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 80007f8:	f001 f9d6 	bl	8001ba8 <USB_ReadInterrupts>
 80007fc:	04c1      	lsls	r1, r0, #19
 80007fe:	d508      	bpl.n	8000812 <HAL_PCD_IRQHandler+0x10a>
       __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8000800:	6822      	ldr	r2, [r4, #0]
 8000802:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8000806:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800080a:	041b      	lsls	r3, r3, #16
 800080c:	0c1b      	lsrs	r3, r3, #16
 800080e:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    HAL_PCD_SuspendCallback(hpcd);
 8000812:	4620      	mov	r0, r4
 8000814:	f002 fb0c 	bl	8002e30 <HAL_PCD_SuspendCallback>
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8000818:	6820      	ldr	r0, [r4, #0]
 800081a:	f001 f9c5 	bl	8001ba8 <USB_ReadInterrupts>
 800081e:	0582      	lsls	r2, r0, #22
 8000820:	d50b      	bpl.n	800083a <HAL_PCD_IRQHandler+0x132>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8000822:	6822      	ldr	r2, [r4, #0]
    HAL_PCD_SOFCallback(hpcd);
 8000824:	4620      	mov	r0, r4
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8000826:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 800082a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800082e:	041b      	lsls	r3, r3, #16
 8000830:	0c1b      	lsrs	r3, r3, #16
 8000832:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    HAL_PCD_SOFCallback(hpcd);
 8000836:	f002 fae4 	bl	8002e02 <HAL_PCD_SOFCallback>
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 800083a:	6820      	ldr	r0, [r4, #0]
 800083c:	f001 f9b4 	bl	8001ba8 <USB_ReadInterrupts>
 8000840:	05c3      	lsls	r3, r0, #23
 8000842:	d508      	bpl.n	8000856 <HAL_PCD_IRQHandler+0x14e>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8000844:	6822      	ldr	r2, [r4, #0]
 8000846:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 800084a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800084e:	041b      	lsls	r3, r3, #16
 8000850:	0c1b      	lsrs	r3, r3, #16
 8000852:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
 8000856:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
  {
    wIstr = hpcd->Instance->ISTR;
 800085a:	f8b0 1044 	ldrh.w	r1, [r0, #68]	; 0x44
 800085e:	b289      	uxth	r1, r1
    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);

    if (epindex == 0U)
 8000860:	f011 060f 	ands.w	r6, r1, #15
 8000864:	f040 80b7 	bne.w	80009d6 <HAL_PCD_IRQHandler+0x2ce>
      {
        /* DIR = 0 */

        /* DIR = 0      => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always  */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8000868:	8803      	ldrh	r3, [r0, #0]
      if ((wIstr & USB_ISTR_DIR) == 0U)
 800086a:	f011 0110 	ands.w	r1, r1, #16
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800086e:	b29b      	uxth	r3, r3
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8000870:	d12c      	bne.n	80008cc <HAL_PCD_IRQHandler+0x1c4>
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8000872:	ea03 0309 	and.w	r3, r3, r9
 8000876:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800087a:	8003      	strh	r3, [r0, #0]
        ep = &hpcd->IN_ep[0];

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800087c:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8000880:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
 8000884:	b29b      	uxth	r3, r3
 8000886:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800088a:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 800088e:	f8b0 3404 	ldrh.w	r3, [r0, #1028]	; 0x404
        ep->xfer_buff += ep->xfer_count;
 8000892:	6be2      	ldr	r2, [r4, #60]	; 0x3c
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8000894:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000898:	6463      	str	r3, [r4, #68]	; 0x44
        ep->xfer_buff += ep->xfer_count;
 800089a:	4413      	add	r3, r2
 800089c:	63e3      	str	r3, [r4, #60]	; 0x3c

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 800089e:	4620      	mov	r0, r4
 80008a0:	f002 faa8 	bl	8002df4 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80008a4:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 80008a8:	b153      	cbz	r3, 80008c0 <HAL_PCD_IRQHandler+0x1b8>
 80008aa:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80008ac:	b942      	cbnz	r2, 80008c0 <HAL_PCD_IRQHandler+0x1b8>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80008ae:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 80008b2:	6821      	ldr	r1, [r4, #0]
 80008b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008b8:	f8a1 304c 	strh.w	r3, [r1, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 80008bc:	f884 2024 	strb.w	r2, [r4, #36]	; 0x24
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80008c0:	6820      	ldr	r0, [r4, #0]
 80008c2:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
 80008c6:	041b      	lsls	r3, r3, #16
 80008c8:	d4c7      	bmi.n	800085a <HAL_PCD_IRQHandler+0x152>
 80008ca:	e726      	b.n	800071a <HAL_PCD_IRQHandler+0x12>
        /* DIR = 1 & CTR_RX       => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80008cc:	f413 6500 	ands.w	r5, r3, #2048	; 0x800
 80008d0:	d021      	beq.n	8000916 <HAL_PCD_IRQHandler+0x20e>
        {
          /* Get SETUP Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80008d2:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 80008d6:	f894 2128 	ldrb.w	r2, [r4, #296]	; 0x128
 80008da:	b29b      	uxth	r3, r3
 80008dc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80008e0:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 80008e4:	f8b3 340c 	ldrh.w	r3, [r3, #1036]	; 0x40c

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80008e8:	f8b4 212e 	ldrh.w	r2, [r4, #302]	; 0x12e
 80008ec:	f3c3 0309 	ubfx	r3, r3, #0, #10
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80008f0:	f8c4 3144 	str.w	r3, [r4, #324]	; 0x144
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80008f4:	f504 710c 	add.w	r1, r4, #560	; 0x230
 80008f8:	f001 fa54 	bl	8001da4 <USB_ReadPMA>
                      ep->pmaadress, (uint16_t)ep->xfer_count);

          /* SETUP bit kept frozen while CTR_RX = 1*/
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80008fc:	6822      	ldr	r2, [r4, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 80008fe:	4620      	mov	r0, r4
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8000900:	8813      	ldrh	r3, [r2, #0]
 8000902:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000906:	051b      	lsls	r3, r3, #20
 8000908:	0d1b      	lsrs	r3, r3, #20
 800090a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800090e:	8013      	strh	r3, [r2, #0]
          HAL_PCD_SetupStageCallback(hpcd);
 8000910:	f002 fa62 	bl	8002dd8 <HAL_PCD_SetupStageCallback>
 8000914:	e7d4      	b.n	80008c0 <HAL_PCD_IRQHandler+0x1b8>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }

        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8000916:	041f      	lsls	r7, r3, #16
 8000918:	d5d2      	bpl.n	80008c0 <HAL_PCD_IRQHandler+0x1b8>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800091a:	8803      	ldrh	r3, [r0, #0]
 800091c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000920:	051b      	lsls	r3, r3, #20
 8000922:	0d1b      	lsrs	r3, r3, #20
 8000924:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000928:	8003      	strh	r3, [r0, #0]

          /* Get Control Data OUT Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800092a:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 800092e:	f894 2128 	ldrb.w	r2, [r4, #296]	; 0x128
 8000932:	b29b      	uxth	r3, r3
 8000934:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8000938:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 800093c:	f8b3 340c 	ldrh.w	r3, [r3, #1036]	; 0x40c
 8000940:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000944:	f8c4 3144 	str.w	r3, [r4, #324]	; 0x144

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8000948:	b18b      	cbz	r3, 800096e <HAL_PCD_IRQHandler+0x266>
 800094a:	f8d4 113c 	ldr.w	r1, [r4, #316]	; 0x13c
 800094e:	b171      	cbz	r1, 800096e <HAL_PCD_IRQHandler+0x266>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8000950:	f8b4 212e 	ldrh.w	r2, [r4, #302]	; 0x12e
 8000954:	f001 fa26 	bl	8001da4 <USB_ReadPMA>
                        ep->pmaadress, (uint16_t)ep->xfer_count);

            ep->xfer_buff += ep->xfer_count;
 8000958:	f8d4 313c 	ldr.w	r3, [r4, #316]	; 0x13c
 800095c:	f8d4 2144 	ldr.w	r2, [r4, #324]	; 0x144

            /* Process Control Data OUT Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8000960:	4629      	mov	r1, r5
            ep->xfer_buff += ep->xfer_count;
 8000962:	4413      	add	r3, r2
 8000964:	f8c4 313c 	str.w	r3, [r4, #316]	; 0x13c
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8000968:	4620      	mov	r0, r4
 800096a:	f002 fa3b 	bl	8002de4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 800096e:	6821      	ldr	r1, [r4, #0]
 8000970:	f8d4 5138 	ldr.w	r5, [r4, #312]	; 0x138
 8000974:	f8b1 3050 	ldrh.w	r3, [r1, #80]	; 0x50
 8000978:	f201 400c 	addw	r0, r1, #1036	; 0x40c
 800097c:	b29b      	uxth	r3, r3
 800097e:	b9cd      	cbnz	r5, 80009b4 <HAL_PCD_IRQHandler+0x2ac>
 8000980:	5ac2      	ldrh	r2, [r0, r3]
 8000982:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 8000986:	0412      	lsls	r2, r2, #16
 8000988:	0c12      	lsrs	r2, r2, #16
 800098a:	52c2      	strh	r2, [r0, r3]
 800098c:	5ac2      	ldrh	r2, [r0, r3]
 800098e:	b292      	uxth	r2, r2
 8000990:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000994:	52c2      	strh	r2, [r0, r3]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8000996:	880b      	ldrh	r3, [r1, #0]
 8000998:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800099c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80009a0:	041b      	lsls	r3, r3, #16
 80009a2:	0c1b      	lsrs	r3, r3, #16
 80009a4:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 80009a8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80009ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80009b0:	800b      	strh	r3, [r1, #0]
 80009b2:	e785      	b.n	80008c0 <HAL_PCD_IRQHandler+0x1b8>
          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80009b4:	2d3e      	cmp	r5, #62	; 0x3e
 80009b6:	d806      	bhi.n	80009c6 <HAL_PCD_IRQHandler+0x2be>
 80009b8:	086a      	lsrs	r2, r5, #1
 80009ba:	07ee      	lsls	r6, r5, #31
 80009bc:	bf48      	it	mi
 80009be:	3201      	addmi	r2, #1
 80009c0:	0292      	lsls	r2, r2, #10
 80009c2:	b292      	uxth	r2, r2
 80009c4:	e7e6      	b.n	8000994 <HAL_PCD_IRQHandler+0x28c>
 80009c6:	096a      	lsrs	r2, r5, #5
 80009c8:	06ed      	lsls	r5, r5, #27
 80009ca:	bf08      	it	eq
 80009cc:	f102 32ff 	addeq.w	r2, r2, #4294967295
 80009d0:	ea4a 2282 	orr.w	r2, sl, r2, lsl #10
 80009d4:	e7f5      	b.n	80009c2 <HAL_PCD_IRQHandler+0x2ba>
    else
    {
      /* Decode and service non control endpoints interrupt  */

      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80009d6:	f830 8026 	ldrh.w	r8, [r0, r6, lsl #2]
 80009da:	fa1f f888 	uxth.w	r8, r8
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80009de:	f418 4f00 	tst.w	r8, #32768	; 0x8000
 80009e2:	d03d      	beq.n	8000a60 <HAL_PCD_IRQHandler+0x358>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80009e4:	f830 3026 	ldrh.w	r3, [r0, r6, lsl #2]
        ep = &hpcd->OUT_ep[epindex];

        /* OUT double Buffering*/
        if (ep->doublebuffer == 0U)
 80009e8:	0177      	lsls	r7, r6, #5
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80009ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80009ee:	051b      	lsls	r3, r3, #20
 80009f0:	0d1b      	lsrs	r3, r3, #20
 80009f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80009f6:	f820 3026 	strh.w	r3, [r0, r6, lsl #2]
        if (ep->doublebuffer == 0U)
 80009fa:	19e1      	adds	r1, r4, r7
 80009fc:	f891 3134 	ldrb.w	r3, [r1, #308]	; 0x134
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d158      	bne.n	8000ab6 <HAL_PCD_IRQHandler+0x3ae>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8000a04:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8000a08:	f891 2128 	ldrb.w	r2, [r1, #296]	; 0x128
 8000a0c:	b29b      	uxth	r3, r3
 8000a0e:	3306      	adds	r3, #6
 8000a10:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8000a14:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8000a18:	f8b3 5400 	ldrh.w	r5, [r3, #1024]	; 0x400
 8000a1c:	f3c5 0509 	ubfx	r5, r5, #0, #10
          if (count != 0U)
 8000a20:	b135      	cbz	r5, 8000a30 <HAL_PCD_IRQHandler+0x328>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8000a22:	f8b1 212e 	ldrh.w	r2, [r1, #302]	; 0x12e
 8000a26:	462b      	mov	r3, r5
 8000a28:	f8d1 113c 	ldr.w	r1, [r1, #316]	; 0x13c
 8000a2c:	f001 f9ba 	bl	8001da4 <USB_ReadPMA>
 8000a30:	19e1      	adds	r1, r4, r7
          }
          /* free EP OUT Buffer */
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
        }
        /*multi-packet on the NON control OUT endpoint*/
        ep->xfer_count += count;
 8000a32:	f8d1 3144 	ldr.w	r3, [r1, #324]	; 0x144
        ep->xfer_buff += count;
 8000a36:	f8d1 213c 	ldr.w	r2, [r1, #316]	; 0x13c
        ep->xfer_count += count;
 8000a3a:	442b      	add	r3, r5
 8000a3c:	f8c1 3144 	str.w	r3, [r1, #324]	; 0x144

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8000a40:	f8d1 3140 	ldr.w	r3, [r1, #320]	; 0x140
        ep->xfer_buff += count;
 8000a44:	442a      	add	r2, r5
 8000a46:	f8c1 213c 	str.w	r2, [r1, #316]	; 0x13c
        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8000a4a:	b11b      	cbz	r3, 8000a54 <HAL_PCD_IRQHandler+0x34c>
 8000a4c:	f8d1 0138 	ldr.w	r0, [r1, #312]	; 0x138
 8000a50:	4285      	cmp	r5, r0
 8000a52:	d269      	bcs.n	8000b28 <HAL_PCD_IRQHandler+0x420>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8000a54:	4427      	add	r7, r4
 8000a56:	f897 1128 	ldrb.w	r1, [r7, #296]	; 0x128
 8000a5a:	4620      	mov	r0, r4
 8000a5c:	f002 f9c2 	bl	8002de4 <HAL_PCD_DataOutStageCallback>
          (void)HAL_PCD_EP_Receive(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
        }

      } /* if((wEPVal & EP_CTR_RX) */

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8000a60:	f018 0f80 	tst.w	r8, #128	; 0x80
 8000a64:	f43f af2c 	beq.w	80008c0 <HAL_PCD_IRQHandler+0x1b8>
      {
        ep = &hpcd->IN_ep[epindex];

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8000a68:	6821      	ldr	r1, [r4, #0]
        {
          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8000a6a:	4620      	mov	r0, r4
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8000a6c:	f831 2026 	ldrh.w	r2, [r1, r6, lsl #2]
 8000a70:	b292      	uxth	r2, r2
 8000a72:	ea02 0209 	and.w	r2, r2, r9
 8000a76:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000a7a:	f821 2026 	strh.w	r2, [r1, r6, lsl #2]
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8000a7e:	f8b1 3050 	ldrh.w	r3, [r1, #80]	; 0x50
 8000a82:	eb04 1646 	add.w	r6, r4, r6, lsl #5
 8000a86:	f896 2028 	ldrb.w	r2, [r6, #40]	; 0x28
 8000a8a:	b29b      	uxth	r3, r3
 8000a8c:	3302      	adds	r3, #2
 8000a8e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8000a92:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 8000a96:	f8b3 2400 	ldrh.w	r2, [r3, #1024]	; 0x400
        ep->xfer_buff += ep->xfer_count;
 8000a9a:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8000a9c:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8000aa0:	6472      	str	r2, [r6, #68]	; 0x44
        ep->xfer_buff += ep->xfer_count;
 8000aa2:	441a      	add	r2, r3
        if (ep->xfer_len == 0U)
 8000aa4:	6c33      	ldr	r3, [r6, #64]	; 0x40
        ep->xfer_buff += ep->xfer_count;
 8000aa6:	63f2      	str	r2, [r6, #60]	; 0x3c
 8000aa8:	f896 1028 	ldrb.w	r1, [r6, #40]	; 0x28
        if (ep->xfer_len == 0U)
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	d141      	bne.n	8000b34 <HAL_PCD_IRQHandler+0x42c>
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8000ab0:	f002 f9a0 	bl	8002df4 <HAL_PCD_DataInStageCallback>
 8000ab4:	e704      	b.n	80008c0 <HAL_PCD_IRQHandler+0x1b8>
          if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8000ab6:	f891 3128 	ldrb.w	r3, [r1, #296]	; 0x128
 8000aba:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8000abe:	00db      	lsls	r3, r3, #3
 8000ac0:	f412 4f80 	tst.w	r2, #16384	; 0x4000
            count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8000ac4:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8000ac8:	b292      	uxth	r2, r2
          if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8000aca:	d01f      	beq.n	8000b0c <HAL_PCD_IRQHandler+0x404>
            count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8000acc:	3202      	adds	r2, #2
 8000ace:	4413      	add	r3, r2
 8000ad0:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8000ad4:	f8b3 5400 	ldrh.w	r5, [r3, #1024]	; 0x400
 8000ad8:	f3c5 0509 	ubfx	r5, r5, #0, #10
            if (count != 0U)
 8000adc:	b135      	cbz	r5, 8000aec <HAL_PCD_IRQHandler+0x3e4>
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8000ade:	462b      	mov	r3, r5
 8000ae0:	f8b1 2130 	ldrh.w	r2, [r1, #304]	; 0x130
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8000ae4:	f8d1 113c 	ldr.w	r1, [r1, #316]	; 0x13c
 8000ae8:	f001 f95c 	bl	8001da4 <USB_ReadPMA>
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8000aec:	19e3      	adds	r3, r4, r7
 8000aee:	f893 1128 	ldrb.w	r1, [r3, #296]	; 0x128
 8000af2:	6822      	ldr	r2, [r4, #0]
 8000af4:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 8000af8:	b29b      	uxth	r3, r3
 8000afa:	ea03 030b 	and.w	r3, r3, fp
 8000afe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000b02:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8000b06:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
 8000b0a:	e791      	b.n	8000a30 <HAL_PCD_IRQHandler+0x328>
            count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8000b0c:	3206      	adds	r2, #6
 8000b0e:	4413      	add	r3, r2
 8000b10:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8000b14:	f8b3 5400 	ldrh.w	r5, [r3, #1024]	; 0x400
 8000b18:	f3c5 0509 	ubfx	r5, r5, #0, #10
            if (count != 0U)
 8000b1c:	2d00      	cmp	r5, #0
 8000b1e:	d0e5      	beq.n	8000aec <HAL_PCD_IRQHandler+0x3e4>
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8000b20:	462b      	mov	r3, r5
 8000b22:	f8b1 2132 	ldrh.w	r2, [r1, #306]	; 0x132
 8000b26:	e7dd      	b.n	8000ae4 <HAL_PCD_IRQHandler+0x3dc>
          (void)HAL_PCD_EP_Receive(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 8000b28:	f891 1128 	ldrb.w	r1, [r1, #296]	; 0x128
 8000b2c:	4620      	mov	r0, r4
 8000b2e:	f7ff fdb5 	bl	800069c <HAL_PCD_EP_Receive>
 8000b32:	e795      	b.n	8000a60 <HAL_PCD_IRQHandler+0x358>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)HAL_PCD_EP_Transmit(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 8000b34:	f7ff fdd1 	bl	80006da <HAL_PCD_EP_Transmit>
 8000b38:	e6c2      	b.n	80008c0 <HAL_PCD_IRQHandler+0x1b8>
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8000b3a:	f8df 900c 	ldr.w	r9, [pc, #12]	; 8000b48 <HAL_PCD_IRQHandler+0x440>
 8000b3e:	f8df a00c 	ldr.w	sl, [pc, #12]	; 8000b4c <HAL_PCD_IRQHandler+0x444>
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8000b42:	f8df b00c 	ldr.w	fp, [pc, #12]	; 8000b50 <HAL_PCD_IRQHandler+0x448>
 8000b46:	e6bb      	b.n	80008c0 <HAL_PCD_IRQHandler+0x1b8>
 8000b48:	ffff8f0f 	.word	0xffff8f0f
 8000b4c:	ffff8000 	.word	0xffff8000
 8000b50:	ffff8f8f 	.word	0xffff8f8f

08000b54 <HAL_PCD_EP_SetStall>:
{
 8000b54:	b538      	push	{r3, r4, r5, lr}
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8000b56:	6843      	ldr	r3, [r0, #4]
 8000b58:	f001 0507 	and.w	r5, r1, #7
 8000b5c:	429d      	cmp	r5, r3
{
 8000b5e:	4604      	mov	r4, r0
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8000b60:	d828      	bhi.n	8000bb4 <HAL_PCD_EP_SetStall+0x60>
  if ((0x80U & ep_addr) == 0x80U)
 8000b62:	060b      	lsls	r3, r1, #24
 8000b64:	d51d      	bpl.n	8000ba2 <HAL_PCD_EP_SetStall+0x4e>
    ep->is_in = 1U;
 8000b66:	2201      	movs	r2, #1
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8000b68:	016b      	lsls	r3, r5, #5
 8000b6a:	f103 0128 	add.w	r1, r3, #40	; 0x28
    ep->is_in = 1U;
 8000b6e:	4403      	add	r3, r0
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8000b70:	4401      	add	r1, r0
    ep->is_in = 1U;
 8000b72:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  ep->is_stall = 1U;
 8000b76:	2301      	movs	r3, #1
  ep->num = ep_addr & EP_ADDR_MSK;
 8000b78:	700d      	strb	r5, [r1, #0]
  ep->is_stall = 1U;
 8000b7a:	708b      	strb	r3, [r1, #2]
  __HAL_LOCK(hpcd);
 8000b7c:	f894 2228 	ldrb.w	r2, [r4, #552]	; 0x228
 8000b80:	429a      	cmp	r2, r3
 8000b82:	d019      	beq.n	8000bb8 <HAL_PCD_EP_SetStall+0x64>
 8000b84:	f884 3228 	strb.w	r3, [r4, #552]	; 0x228
  (void)USB_EPSetStall(hpcd->Instance, ep);
 8000b88:	6820      	ldr	r0, [r4, #0]
 8000b8a:	f000 ff98 	bl	8001abe <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8000b8e:	b925      	cbnz	r5, 8000b9a <HAL_PCD_EP_SetStall+0x46>
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8000b90:	f504 710c 	add.w	r1, r4, #560	; 0x230
 8000b94:	6820      	ldr	r0, [r4, #0]
 8000b96:	f001 f80b 	bl	8001bb0 <USB_EP0_OutStart>
  __HAL_UNLOCK(hpcd);
 8000b9a:	2000      	movs	r0, #0
 8000b9c:	f884 0228 	strb.w	r0, [r4, #552]	; 0x228
  return HAL_OK;
 8000ba0:	bd38      	pop	{r3, r4, r5, pc}
    ep->is_in = 0U;
 8000ba2:	2200      	movs	r2, #0
    ep = &hpcd->OUT_ep[ep_addr];
 8000ba4:	014b      	lsls	r3, r1, #5
 8000ba6:	f503 7194 	add.w	r1, r3, #296	; 0x128
    ep->is_in = 0U;
 8000baa:	4403      	add	r3, r0
    ep = &hpcd->OUT_ep[ep_addr];
 8000bac:	4401      	add	r1, r0
    ep->is_in = 0U;
 8000bae:	f883 2129 	strb.w	r2, [r3, #297]	; 0x129
 8000bb2:	e7e0      	b.n	8000b76 <HAL_PCD_EP_SetStall+0x22>
    return HAL_ERROR;
 8000bb4:	2001      	movs	r0, #1
 8000bb6:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hpcd);
 8000bb8:	2002      	movs	r0, #2
}
 8000bba:	bd38      	pop	{r3, r4, r5, pc}

08000bbc <HAL_PCD_EP_ClrStall>:
{
 8000bbc:	b538      	push	{r3, r4, r5, lr}
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8000bbe:	6843      	ldr	r3, [r0, #4]
 8000bc0:	f001 020f 	and.w	r2, r1, #15
 8000bc4:	429a      	cmp	r2, r3
{
 8000bc6:	4604      	mov	r4, r0
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8000bc8:	d826      	bhi.n	8000c18 <HAL_PCD_EP_ClrStall+0x5c>
 8000bca:	f001 0307 	and.w	r3, r1, #7
  if ((0x80U & ep_addr) == 0x80U)
 8000bce:	f011 0f80 	tst.w	r1, #128	; 0x80
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8000bd2:	ea4f 1243 	mov.w	r2, r3, lsl #5
  if ((0x80U & ep_addr) == 0x80U)
 8000bd6:	d017      	beq.n	8000c08 <HAL_PCD_EP_ClrStall+0x4c>
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8000bd8:	f102 0128 	add.w	r1, r2, #40	; 0x28
 8000bdc:	4401      	add	r1, r0
    ep->is_in = 1U;
 8000bde:	4402      	add	r2, r0
 8000be0:	2001      	movs	r0, #1
 8000be2:	f882 0029 	strb.w	r0, [r2, #41]	; 0x29
  ep->is_stall = 0U;
 8000be6:	2500      	movs	r5, #0
  ep->num = ep_addr & EP_ADDR_MSK;
 8000be8:	700b      	strb	r3, [r1, #0]
  ep->is_stall = 0U;
 8000bea:	708d      	strb	r5, [r1, #2]
  __HAL_LOCK(hpcd);
 8000bec:	f894 3228 	ldrb.w	r3, [r4, #552]	; 0x228
 8000bf0:	2b01      	cmp	r3, #1
 8000bf2:	d013      	beq.n	8000c1c <HAL_PCD_EP_ClrStall+0x60>
 8000bf4:	2301      	movs	r3, #1
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8000bf6:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 8000bf8:	f884 3228 	strb.w	r3, [r4, #552]	; 0x228
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8000bfc:	f000 ff7f 	bl	8001afe <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8000c00:	f884 5228 	strb.w	r5, [r4, #552]	; 0x228
  return HAL_OK;
 8000c04:	4628      	mov	r0, r5
 8000c06:	bd38      	pop	{r3, r4, r5, pc}
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8000c08:	f502 7194 	add.w	r1, r2, #296	; 0x128
 8000c0c:	4401      	add	r1, r0
    ep->is_in = 0U;
 8000c0e:	4402      	add	r2, r0
 8000c10:	2000      	movs	r0, #0
 8000c12:	f882 0129 	strb.w	r0, [r2, #297]	; 0x129
 8000c16:	e7e6      	b.n	8000be6 <HAL_PCD_EP_ClrStall+0x2a>
    return HAL_ERROR;
 8000c18:	2001      	movs	r0, #1
 8000c1a:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hpcd);
 8000c1c:	2002      	movs	r0, #2
}
 8000c1e:	bd38      	pop	{r3, r4, r5, pc}

08000c20 <HAL_PCDEx_PMAConfig>:
                                       uint32_t pmaadress)
{
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8000c20:	f011 0f80 	tst.w	r1, #128	; 0x80
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8000c24:	bf1b      	ittet	ne
 8000c26:	f001 0107 	andne.w	r1, r1, #7
 8000c2a:	eb00 1041 	addne.w	r0, r0, r1, lsl #5
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8000c2e:	eb00 1041 	addeq.w	r0, r0, r1, lsl #5
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8000c32:	3028      	addne	r0, #40	; 0x28
    ep = &hpcd->OUT_ep[ep_addr];
 8000c34:	bf08      	it	eq
 8000c36:	f500 7094 	addeq.w	r0, r0, #296	; 0x128
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8000c3a:	b91a      	cbnz	r2, 8000c44 <HAL_PCDEx_PMAConfig+0x24>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8000c3c:	7302      	strb	r2, [r0, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8000c3e:	80c3      	strh	r3, [r0, #6]
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
  }

  return HAL_OK;
}
 8000c40:	2000      	movs	r0, #0
 8000c42:	4770      	bx	lr
    ep->doublebuffer = 1U;
 8000c44:	2201      	movs	r2, #1
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8000c46:	8103      	strh	r3, [r0, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8000c48:	0c1b      	lsrs	r3, r3, #16
    ep->doublebuffer = 1U;
 8000c4a:	7302      	strb	r2, [r0, #12]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8000c4c:	8143      	strh	r3, [r0, #10]
 8000c4e:	e7f7      	b.n	8000c40 <HAL_PCDEx_PMAConfig+0x20>

08000c50 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000c50:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000c54:	4605      	mov	r5, r0
 8000c56:	b908      	cbnz	r0, 8000c5c <HAL_RCC_OscConfig+0xc>
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
      {
        return HAL_ERROR;
 8000c58:	2001      	movs	r0, #1
 8000c5a:	e03c      	b.n	8000cd6 <HAL_RCC_OscConfig+0x86>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000c5c:	6803      	ldr	r3, [r0, #0]
 8000c5e:	07db      	lsls	r3, r3, #31
 8000c60:	d410      	bmi.n	8000c84 <HAL_RCC_OscConfig+0x34>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000c62:	682b      	ldr	r3, [r5, #0]
 8000c64:	079f      	lsls	r7, r3, #30
 8000c66:	d45d      	bmi.n	8000d24 <HAL_RCC_OscConfig+0xd4>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000c68:	682b      	ldr	r3, [r5, #0]
 8000c6a:	0719      	lsls	r1, r3, #28
 8000c6c:	f100 8094 	bmi.w	8000d98 <HAL_RCC_OscConfig+0x148>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000c70:	682b      	ldr	r3, [r5, #0]
 8000c72:	075a      	lsls	r2, r3, #29
 8000c74:	f100 80be 	bmi.w	8000df4 <HAL_RCC_OscConfig+0x1a4>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000c78:	69e8      	ldr	r0, [r5, #28]
 8000c7a:	2800      	cmp	r0, #0
 8000c7c:	f040 812c 	bne.w	8000ed8 <HAL_RCC_OscConfig+0x288>
        }
      }
    }
  }

  return HAL_OK;
 8000c80:	2000      	movs	r0, #0
 8000c82:	e028      	b.n	8000cd6 <HAL_RCC_OscConfig+0x86>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000c84:	4c8f      	ldr	r4, [pc, #572]	; (8000ec4 <HAL_RCC_OscConfig+0x274>)
 8000c86:	6863      	ldr	r3, [r4, #4]
 8000c88:	f003 030c 	and.w	r3, r3, #12
 8000c8c:	2b04      	cmp	r3, #4
 8000c8e:	d007      	beq.n	8000ca0 <HAL_RCC_OscConfig+0x50>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000c90:	6863      	ldr	r3, [r4, #4]
 8000c92:	f003 030c 	and.w	r3, r3, #12
 8000c96:	2b08      	cmp	r3, #8
 8000c98:	d109      	bne.n	8000cae <HAL_RCC_OscConfig+0x5e>
 8000c9a:	6863      	ldr	r3, [r4, #4]
 8000c9c:	03de      	lsls	r6, r3, #15
 8000c9e:	d506      	bpl.n	8000cae <HAL_RCC_OscConfig+0x5e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000ca0:	6823      	ldr	r3, [r4, #0]
 8000ca2:	039c      	lsls	r4, r3, #14
 8000ca4:	d5dd      	bpl.n	8000c62 <HAL_RCC_OscConfig+0x12>
 8000ca6:	686b      	ldr	r3, [r5, #4]
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d1da      	bne.n	8000c62 <HAL_RCC_OscConfig+0x12>
 8000cac:	e7d4      	b.n	8000c58 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000cae:	686b      	ldr	r3, [r5, #4]
 8000cb0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000cb4:	d112      	bne.n	8000cdc <HAL_RCC_OscConfig+0x8c>
 8000cb6:	6823      	ldr	r3, [r4, #0]
 8000cb8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000cbc:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000cbe:	f7ff fa87 	bl	80001d0 <HAL_GetTick>
 8000cc2:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000cc4:	6823      	ldr	r3, [r4, #0]
 8000cc6:	0398      	lsls	r0, r3, #14
 8000cc8:	d4cb      	bmi.n	8000c62 <HAL_RCC_OscConfig+0x12>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000cca:	f7ff fa81 	bl	80001d0 <HAL_GetTick>
 8000cce:	1b80      	subs	r0, r0, r6
 8000cd0:	2864      	cmp	r0, #100	; 0x64
 8000cd2:	d9f7      	bls.n	8000cc4 <HAL_RCC_OscConfig+0x74>
            return HAL_TIMEOUT;
 8000cd4:	2003      	movs	r0, #3
}
 8000cd6:	b002      	add	sp, #8
 8000cd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000cdc:	b99b      	cbnz	r3, 8000d06 <HAL_RCC_OscConfig+0xb6>
 8000cde:	6823      	ldr	r3, [r4, #0]
 8000ce0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000ce4:	6023      	str	r3, [r4, #0]
 8000ce6:	6823      	ldr	r3, [r4, #0]
 8000ce8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000cec:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000cee:	f7ff fa6f 	bl	80001d0 <HAL_GetTick>
 8000cf2:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000cf4:	6823      	ldr	r3, [r4, #0]
 8000cf6:	0399      	lsls	r1, r3, #14
 8000cf8:	d5b3      	bpl.n	8000c62 <HAL_RCC_OscConfig+0x12>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000cfa:	f7ff fa69 	bl	80001d0 <HAL_GetTick>
 8000cfe:	1b80      	subs	r0, r0, r6
 8000d00:	2864      	cmp	r0, #100	; 0x64
 8000d02:	d9f7      	bls.n	8000cf4 <HAL_RCC_OscConfig+0xa4>
 8000d04:	e7e6      	b.n	8000cd4 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000d06:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000d0a:	6823      	ldr	r3, [r4, #0]
 8000d0c:	d103      	bne.n	8000d16 <HAL_RCC_OscConfig+0xc6>
 8000d0e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000d12:	6023      	str	r3, [r4, #0]
 8000d14:	e7cf      	b.n	8000cb6 <HAL_RCC_OscConfig+0x66>
 8000d16:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000d1a:	6023      	str	r3, [r4, #0]
 8000d1c:	6823      	ldr	r3, [r4, #0]
 8000d1e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000d22:	e7cb      	b.n	8000cbc <HAL_RCC_OscConfig+0x6c>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000d24:	4c67      	ldr	r4, [pc, #412]	; (8000ec4 <HAL_RCC_OscConfig+0x274>)
 8000d26:	6863      	ldr	r3, [r4, #4]
 8000d28:	f013 0f0c 	tst.w	r3, #12
 8000d2c:	d007      	beq.n	8000d3e <HAL_RCC_OscConfig+0xee>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000d2e:	6863      	ldr	r3, [r4, #4]
 8000d30:	f003 030c 	and.w	r3, r3, #12
 8000d34:	2b08      	cmp	r3, #8
 8000d36:	d110      	bne.n	8000d5a <HAL_RCC_OscConfig+0x10a>
 8000d38:	6863      	ldr	r3, [r4, #4]
 8000d3a:	03da      	lsls	r2, r3, #15
 8000d3c:	d40d      	bmi.n	8000d5a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000d3e:	6823      	ldr	r3, [r4, #0]
 8000d40:	079b      	lsls	r3, r3, #30
 8000d42:	d502      	bpl.n	8000d4a <HAL_RCC_OscConfig+0xfa>
 8000d44:	692b      	ldr	r3, [r5, #16]
 8000d46:	2b01      	cmp	r3, #1
 8000d48:	d186      	bne.n	8000c58 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000d4a:	6823      	ldr	r3, [r4, #0]
 8000d4c:	696a      	ldr	r2, [r5, #20]
 8000d4e:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8000d52:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8000d56:	6023      	str	r3, [r4, #0]
 8000d58:	e786      	b.n	8000c68 <HAL_RCC_OscConfig+0x18>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000d5a:	692a      	ldr	r2, [r5, #16]
 8000d5c:	4b5a      	ldr	r3, [pc, #360]	; (8000ec8 <HAL_RCC_OscConfig+0x278>)
 8000d5e:	b16a      	cbz	r2, 8000d7c <HAL_RCC_OscConfig+0x12c>
        __HAL_RCC_HSI_ENABLE();
 8000d60:	2201      	movs	r2, #1
 8000d62:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000d64:	f7ff fa34 	bl	80001d0 <HAL_GetTick>
 8000d68:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d6a:	6823      	ldr	r3, [r4, #0]
 8000d6c:	079f      	lsls	r7, r3, #30
 8000d6e:	d4ec      	bmi.n	8000d4a <HAL_RCC_OscConfig+0xfa>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000d70:	f7ff fa2e 	bl	80001d0 <HAL_GetTick>
 8000d74:	1b80      	subs	r0, r0, r6
 8000d76:	2802      	cmp	r0, #2
 8000d78:	d9f7      	bls.n	8000d6a <HAL_RCC_OscConfig+0x11a>
 8000d7a:	e7ab      	b.n	8000cd4 <HAL_RCC_OscConfig+0x84>
        __HAL_RCC_HSI_DISABLE();
 8000d7c:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000d7e:	f7ff fa27 	bl	80001d0 <HAL_GetTick>
 8000d82:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000d84:	6823      	ldr	r3, [r4, #0]
 8000d86:	0798      	lsls	r0, r3, #30
 8000d88:	f57f af6e 	bpl.w	8000c68 <HAL_RCC_OscConfig+0x18>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000d8c:	f7ff fa20 	bl	80001d0 <HAL_GetTick>
 8000d90:	1b80      	subs	r0, r0, r6
 8000d92:	2802      	cmp	r0, #2
 8000d94:	d9f6      	bls.n	8000d84 <HAL_RCC_OscConfig+0x134>
 8000d96:	e79d      	b.n	8000cd4 <HAL_RCC_OscConfig+0x84>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000d98:	69aa      	ldr	r2, [r5, #24]
 8000d9a:	4c4a      	ldr	r4, [pc, #296]	; (8000ec4 <HAL_RCC_OscConfig+0x274>)
 8000d9c:	4b4b      	ldr	r3, [pc, #300]	; (8000ecc <HAL_RCC_OscConfig+0x27c>)
 8000d9e:	b1da      	cbz	r2, 8000dd8 <HAL_RCC_OscConfig+0x188>
      __HAL_RCC_LSI_ENABLE();
 8000da0:	2201      	movs	r2, #1
 8000da2:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000da4:	f7ff fa14 	bl	80001d0 <HAL_GetTick>
 8000da8:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000daa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000dac:	079b      	lsls	r3, r3, #30
 8000dae:	d50d      	bpl.n	8000dcc <HAL_RCC_OscConfig+0x17c>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8000db0:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8000db4:	4b46      	ldr	r3, [pc, #280]	; (8000ed0 <HAL_RCC_OscConfig+0x280>)
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	fbb3 f3f2 	udiv	r3, r3, r2
 8000dbc:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 8000dbe:	bf00      	nop
  }
  while (Delay --);
 8000dc0:	9b01      	ldr	r3, [sp, #4]
 8000dc2:	1e5a      	subs	r2, r3, #1
 8000dc4:	9201      	str	r2, [sp, #4]
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d1f9      	bne.n	8000dbe <HAL_RCC_OscConfig+0x16e>
 8000dca:	e751      	b.n	8000c70 <HAL_RCC_OscConfig+0x20>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000dcc:	f7ff fa00 	bl	80001d0 <HAL_GetTick>
 8000dd0:	1b80      	subs	r0, r0, r6
 8000dd2:	2802      	cmp	r0, #2
 8000dd4:	d9e9      	bls.n	8000daa <HAL_RCC_OscConfig+0x15a>
 8000dd6:	e77d      	b.n	8000cd4 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_LSI_DISABLE();
 8000dd8:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000dda:	f7ff f9f9 	bl	80001d0 <HAL_GetTick>
 8000dde:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000de0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000de2:	079f      	lsls	r7, r3, #30
 8000de4:	f57f af44 	bpl.w	8000c70 <HAL_RCC_OscConfig+0x20>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000de8:	f7ff f9f2 	bl	80001d0 <HAL_GetTick>
 8000dec:	1b80      	subs	r0, r0, r6
 8000dee:	2802      	cmp	r0, #2
 8000df0:	d9f6      	bls.n	8000de0 <HAL_RCC_OscConfig+0x190>
 8000df2:	e76f      	b.n	8000cd4 <HAL_RCC_OscConfig+0x84>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000df4:	4c33      	ldr	r4, [pc, #204]	; (8000ec4 <HAL_RCC_OscConfig+0x274>)
 8000df6:	69e3      	ldr	r3, [r4, #28]
 8000df8:	00d8      	lsls	r0, r3, #3
 8000dfa:	d424      	bmi.n	8000e46 <HAL_RCC_OscConfig+0x1f6>
      pwrclkchanged = SET;
 8000dfc:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8000dfe:	69e3      	ldr	r3, [r4, #28]
 8000e00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e04:	61e3      	str	r3, [r4, #28]
 8000e06:	69e3      	ldr	r3, [r4, #28]
 8000e08:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e0c:	9300      	str	r3, [sp, #0]
 8000e0e:	9b00      	ldr	r3, [sp, #0]
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e10:	4e30      	ldr	r6, [pc, #192]	; (8000ed4 <HAL_RCC_OscConfig+0x284>)
 8000e12:	6833      	ldr	r3, [r6, #0]
 8000e14:	05d9      	lsls	r1, r3, #23
 8000e16:	d518      	bpl.n	8000e4a <HAL_RCC_OscConfig+0x1fa>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000e18:	68eb      	ldr	r3, [r5, #12]
 8000e1a:	2b01      	cmp	r3, #1
 8000e1c:	d126      	bne.n	8000e6c <HAL_RCC_OscConfig+0x21c>
 8000e1e:	6a23      	ldr	r3, [r4, #32]
 8000e20:	f043 0301 	orr.w	r3, r3, #1
 8000e24:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8000e26:	f7ff f9d3 	bl	80001d0 <HAL_GetTick>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000e2a:	f241 3688 	movw	r6, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8000e2e:	4680      	mov	r8, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000e30:	6a23      	ldr	r3, [r4, #32]
 8000e32:	079b      	lsls	r3, r3, #30
 8000e34:	d53f      	bpl.n	8000eb6 <HAL_RCC_OscConfig+0x266>
    if (pwrclkchanged == SET)
 8000e36:	2f00      	cmp	r7, #0
 8000e38:	f43f af1e 	beq.w	8000c78 <HAL_RCC_OscConfig+0x28>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000e3c:	69e3      	ldr	r3, [r4, #28]
 8000e3e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000e42:	61e3      	str	r3, [r4, #28]
 8000e44:	e718      	b.n	8000c78 <HAL_RCC_OscConfig+0x28>
    FlagStatus       pwrclkchanged = RESET;
 8000e46:	2700      	movs	r7, #0
 8000e48:	e7e2      	b.n	8000e10 <HAL_RCC_OscConfig+0x1c0>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000e4a:	6833      	ldr	r3, [r6, #0]
 8000e4c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e50:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8000e52:	f7ff f9bd 	bl	80001d0 <HAL_GetTick>
 8000e56:	4680      	mov	r8, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e58:	6833      	ldr	r3, [r6, #0]
 8000e5a:	05da      	lsls	r2, r3, #23
 8000e5c:	d4dc      	bmi.n	8000e18 <HAL_RCC_OscConfig+0x1c8>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000e5e:	f7ff f9b7 	bl	80001d0 <HAL_GetTick>
 8000e62:	eba0 0008 	sub.w	r0, r0, r8
 8000e66:	2864      	cmp	r0, #100	; 0x64
 8000e68:	d9f6      	bls.n	8000e58 <HAL_RCC_OscConfig+0x208>
 8000e6a:	e733      	b.n	8000cd4 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000e6c:	b9ab      	cbnz	r3, 8000e9a <HAL_RCC_OscConfig+0x24a>
 8000e6e:	6a23      	ldr	r3, [r4, #32]
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000e70:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000e74:	f023 0301 	bic.w	r3, r3, #1
 8000e78:	6223      	str	r3, [r4, #32]
 8000e7a:	6a23      	ldr	r3, [r4, #32]
 8000e7c:	f023 0304 	bic.w	r3, r3, #4
 8000e80:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8000e82:	f7ff f9a5 	bl	80001d0 <HAL_GetTick>
 8000e86:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000e88:	6a23      	ldr	r3, [r4, #32]
 8000e8a:	0798      	lsls	r0, r3, #30
 8000e8c:	d5d3      	bpl.n	8000e36 <HAL_RCC_OscConfig+0x1e6>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000e8e:	f7ff f99f 	bl	80001d0 <HAL_GetTick>
 8000e92:	1b80      	subs	r0, r0, r6
 8000e94:	4540      	cmp	r0, r8
 8000e96:	d9f7      	bls.n	8000e88 <HAL_RCC_OscConfig+0x238>
 8000e98:	e71c      	b.n	8000cd4 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000e9a:	2b05      	cmp	r3, #5
 8000e9c:	6a23      	ldr	r3, [r4, #32]
 8000e9e:	d103      	bne.n	8000ea8 <HAL_RCC_OscConfig+0x258>
 8000ea0:	f043 0304 	orr.w	r3, r3, #4
 8000ea4:	6223      	str	r3, [r4, #32]
 8000ea6:	e7ba      	b.n	8000e1e <HAL_RCC_OscConfig+0x1ce>
 8000ea8:	f023 0301 	bic.w	r3, r3, #1
 8000eac:	6223      	str	r3, [r4, #32]
 8000eae:	6a23      	ldr	r3, [r4, #32]
 8000eb0:	f023 0304 	bic.w	r3, r3, #4
 8000eb4:	e7b6      	b.n	8000e24 <HAL_RCC_OscConfig+0x1d4>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000eb6:	f7ff f98b 	bl	80001d0 <HAL_GetTick>
 8000eba:	eba0 0008 	sub.w	r0, r0, r8
 8000ebe:	42b0      	cmp	r0, r6
 8000ec0:	d9b6      	bls.n	8000e30 <HAL_RCC_OscConfig+0x1e0>
 8000ec2:	e707      	b.n	8000cd4 <HAL_RCC_OscConfig+0x84>
 8000ec4:	40021000 	.word	0x40021000
 8000ec8:	42420000 	.word	0x42420000
 8000ecc:	42420480 	.word	0x42420480
 8000ed0:	20000118 	.word	0x20000118
 8000ed4:	40007000 	.word	0x40007000
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000ed8:	4b2a      	ldr	r3, [pc, #168]	; (8000f84 <HAL_RCC_OscConfig+0x334>)
 8000eda:	685a      	ldr	r2, [r3, #4]
 8000edc:	461c      	mov	r4, r3
 8000ede:	f002 020c 	and.w	r2, r2, #12
 8000ee2:	2a08      	cmp	r2, #8
 8000ee4:	d03d      	beq.n	8000f62 <HAL_RCC_OscConfig+0x312>
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	4e27      	ldr	r6, [pc, #156]	; (8000f88 <HAL_RCC_OscConfig+0x338>)
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000eea:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8000eec:	6033      	str	r3, [r6, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000eee:	d12b      	bne.n	8000f48 <HAL_RCC_OscConfig+0x2f8>
        tickstart = HAL_GetTick();
 8000ef0:	f7ff f96e 	bl	80001d0 <HAL_GetTick>
 8000ef4:	4607      	mov	r7, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000ef6:	6823      	ldr	r3, [r4, #0]
 8000ef8:	0199      	lsls	r1, r3, #6
 8000efa:	d41f      	bmi.n	8000f3c <HAL_RCC_OscConfig+0x2ec>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8000efc:	6a2b      	ldr	r3, [r5, #32]
 8000efe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f02:	d105      	bne.n	8000f10 <HAL_RCC_OscConfig+0x2c0>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000f04:	6862      	ldr	r2, [r4, #4]
 8000f06:	68a9      	ldr	r1, [r5, #8]
 8000f08:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8000f0c:	430a      	orrs	r2, r1
 8000f0e:	6062      	str	r2, [r4, #4]
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000f10:	6a69      	ldr	r1, [r5, #36]	; 0x24
 8000f12:	6862      	ldr	r2, [r4, #4]
 8000f14:	430b      	orrs	r3, r1
 8000f16:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 8000f1a:	4313      	orrs	r3, r2
 8000f1c:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 8000f1e:	2301      	movs	r3, #1
 8000f20:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8000f22:	f7ff f955 	bl	80001d0 <HAL_GetTick>
 8000f26:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000f28:	6823      	ldr	r3, [r4, #0]
 8000f2a:	019a      	lsls	r2, r3, #6
 8000f2c:	f53f aea8 	bmi.w	8000c80 <HAL_RCC_OscConfig+0x30>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000f30:	f7ff f94e 	bl	80001d0 <HAL_GetTick>
 8000f34:	1b40      	subs	r0, r0, r5
 8000f36:	2802      	cmp	r0, #2
 8000f38:	d9f6      	bls.n	8000f28 <HAL_RCC_OscConfig+0x2d8>
 8000f3a:	e6cb      	b.n	8000cd4 <HAL_RCC_OscConfig+0x84>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000f3c:	f7ff f948 	bl	80001d0 <HAL_GetTick>
 8000f40:	1bc0      	subs	r0, r0, r7
 8000f42:	2802      	cmp	r0, #2
 8000f44:	d9d7      	bls.n	8000ef6 <HAL_RCC_OscConfig+0x2a6>
 8000f46:	e6c5      	b.n	8000cd4 <HAL_RCC_OscConfig+0x84>
        tickstart = HAL_GetTick();
 8000f48:	f7ff f942 	bl	80001d0 <HAL_GetTick>
 8000f4c:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000f4e:	6823      	ldr	r3, [r4, #0]
 8000f50:	019b      	lsls	r3, r3, #6
 8000f52:	f57f ae95 	bpl.w	8000c80 <HAL_RCC_OscConfig+0x30>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000f56:	f7ff f93b 	bl	80001d0 <HAL_GetTick>
 8000f5a:	1b40      	subs	r0, r0, r5
 8000f5c:	2802      	cmp	r0, #2
 8000f5e:	d9f6      	bls.n	8000f4e <HAL_RCC_OscConfig+0x2fe>
 8000f60:	e6b8      	b.n	8000cd4 <HAL_RCC_OscConfig+0x84>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8000f62:	2801      	cmp	r0, #1
 8000f64:	f43f aeb7 	beq.w	8000cd6 <HAL_RCC_OscConfig+0x86>
        pll_config = RCC->CFGR;
 8000f68:	6858      	ldr	r0, [r3, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000f6a:	6a2b      	ldr	r3, [r5, #32]
 8000f6c:	f400 3280 	and.w	r2, r0, #65536	; 0x10000
 8000f70:	429a      	cmp	r2, r3
 8000f72:	f47f ae71 	bne.w	8000c58 <HAL_RCC_OscConfig+0x8>
 8000f76:	6a6b      	ldr	r3, [r5, #36]	; 0x24
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8000f78:	f400 1070 	and.w	r0, r0, #3932160	; 0x3c0000
    return HAL_ERROR;
 8000f7c:	1ac0      	subs	r0, r0, r3
 8000f7e:	bf18      	it	ne
 8000f80:	2001      	movne	r0, #1
 8000f82:	e6a8      	b.n	8000cd6 <HAL_RCC_OscConfig+0x86>
 8000f84:	40021000 	.word	0x40021000
 8000f88:	42420060 	.word	0x42420060

08000f8c <HAL_RCC_GetSysClockFreq>:
{
 8000f8c:	b530      	push	{r4, r5, lr}
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8000f8e:	4b19      	ldr	r3, [pc, #100]	; (8000ff4 <HAL_RCC_GetSysClockFreq+0x68>)
{
 8000f90:	b087      	sub	sp, #28
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8000f92:	ac02      	add	r4, sp, #8
 8000f94:	f103 0510 	add.w	r5, r3, #16
 8000f98:	4622      	mov	r2, r4
 8000f9a:	6818      	ldr	r0, [r3, #0]
 8000f9c:	6859      	ldr	r1, [r3, #4]
 8000f9e:	3308      	adds	r3, #8
 8000fa0:	c203      	stmia	r2!, {r0, r1}
 8000fa2:	42ab      	cmp	r3, r5
 8000fa4:	4614      	mov	r4, r2
 8000fa6:	d1f7      	bne.n	8000f98 <HAL_RCC_GetSysClockFreq+0xc>
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8000fa8:	2301      	movs	r3, #1
 8000faa:	f88d 3004 	strb.w	r3, [sp, #4]
 8000fae:	2302      	movs	r3, #2
  tmpreg = RCC->CFGR;
 8000fb0:	4911      	ldr	r1, [pc, #68]	; (8000ff8 <HAL_RCC_GetSysClockFreq+0x6c>)
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8000fb2:	f88d 3005 	strb.w	r3, [sp, #5]
  tmpreg = RCC->CFGR;
 8000fb6:	684b      	ldr	r3, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8000fb8:	f003 020c 	and.w	r2, r3, #12
 8000fbc:	2a08      	cmp	r2, #8
 8000fbe:	d117      	bne.n	8000ff0 <HAL_RCC_GetSysClockFreq+0x64>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8000fc0:	f3c3 4283 	ubfx	r2, r3, #18, #4
 8000fc4:	a806      	add	r0, sp, #24
 8000fc6:	4402      	add	r2, r0
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8000fc8:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8000fca:	f812 2c10 	ldrb.w	r2, [r2, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8000fce:	d50c      	bpl.n	8000fea <HAL_RCC_GetSysClockFreq+0x5e>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8000fd0:	684b      	ldr	r3, [r1, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8000fd2:	480a      	ldr	r0, [pc, #40]	; (8000ffc <HAL_RCC_GetSysClockFreq+0x70>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8000fd4:	f3c3 4340 	ubfx	r3, r3, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8000fd8:	4350      	muls	r0, r2
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8000fda:	aa06      	add	r2, sp, #24
 8000fdc:	4413      	add	r3, r2
 8000fde:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8000fe2:	fbb0 f0f3 	udiv	r0, r0, r3
}
 8000fe6:	b007      	add	sp, #28
 8000fe8:	bd30      	pop	{r4, r5, pc}
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8000fea:	4805      	ldr	r0, [pc, #20]	; (8001000 <HAL_RCC_GetSysClockFreq+0x74>)
 8000fec:	4350      	muls	r0, r2
 8000fee:	e7fa      	b.n	8000fe6 <HAL_RCC_GetSysClockFreq+0x5a>
      sysclockfreq = HSE_VALUE;
 8000ff0:	4802      	ldr	r0, [pc, #8]	; (8000ffc <HAL_RCC_GetSysClockFreq+0x70>)
  return sysclockfreq;
 8000ff2:	e7f8      	b.n	8000fe6 <HAL_RCC_GetSysClockFreq+0x5a>
 8000ff4:	08004044 	.word	0x08004044
 8000ff8:	40021000 	.word	0x40021000
 8000ffc:	007a1200 	.word	0x007a1200
 8001000:	003d0900 	.word	0x003d0900

08001004 <HAL_RCC_ClockConfig>:
{
 8001004:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001008:	460d      	mov	r5, r1
  if (RCC_ClkInitStruct == NULL)
 800100a:	4604      	mov	r4, r0
 800100c:	b910      	cbnz	r0, 8001014 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 800100e:	2001      	movs	r0, #1
 8001010:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001014:	4a45      	ldr	r2, [pc, #276]	; (800112c <HAL_RCC_ClockConfig+0x128>)
 8001016:	6813      	ldr	r3, [r2, #0]
 8001018:	f003 0307 	and.w	r3, r3, #7
 800101c:	428b      	cmp	r3, r1
 800101e:	d329      	bcc.n	8001074 <HAL_RCC_ClockConfig+0x70>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001020:	6821      	ldr	r1, [r4, #0]
 8001022:	078e      	lsls	r6, r1, #30
 8001024:	d431      	bmi.n	800108a <HAL_RCC_ClockConfig+0x86>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001026:	07ca      	lsls	r2, r1, #31
 8001028:	d444      	bmi.n	80010b4 <HAL_RCC_ClockConfig+0xb0>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800102a:	4a40      	ldr	r2, [pc, #256]	; (800112c <HAL_RCC_ClockConfig+0x128>)
 800102c:	6813      	ldr	r3, [r2, #0]
 800102e:	f003 0307 	and.w	r3, r3, #7
 8001032:	429d      	cmp	r5, r3
 8001034:	d367      	bcc.n	8001106 <HAL_RCC_ClockConfig+0x102>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001036:	6822      	ldr	r2, [r4, #0]
 8001038:	4d3d      	ldr	r5, [pc, #244]	; (8001130 <HAL_RCC_ClockConfig+0x12c>)
 800103a:	f012 0f04 	tst.w	r2, #4
 800103e:	d16e      	bne.n	800111e <HAL_RCC_ClockConfig+0x11a>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001040:	0713      	lsls	r3, r2, #28
 8001042:	d506      	bpl.n	8001052 <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001044:	686b      	ldr	r3, [r5, #4]
 8001046:	6922      	ldr	r2, [r4, #16]
 8001048:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 800104c:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001050:	606b      	str	r3, [r5, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001052:	f7ff ff9b 	bl	8000f8c <HAL_RCC_GetSysClockFreq>
 8001056:	686b      	ldr	r3, [r5, #4]
 8001058:	4a36      	ldr	r2, [pc, #216]	; (8001134 <HAL_RCC_ClockConfig+0x130>)
 800105a:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800105e:	5cd3      	ldrb	r3, [r2, r3]
 8001060:	40d8      	lsrs	r0, r3
 8001062:	4b35      	ldr	r3, [pc, #212]	; (8001138 <HAL_RCC_ClockConfig+0x134>)
 8001064:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 8001066:	4b35      	ldr	r3, [pc, #212]	; (800113c <HAL_RCC_ClockConfig+0x138>)
 8001068:	6818      	ldr	r0, [r3, #0]
 800106a:	f7ff f86f 	bl	800014c <HAL_InitTick>
  return HAL_OK;
 800106e:	2000      	movs	r0, #0
 8001070:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001074:	6813      	ldr	r3, [r2, #0]
 8001076:	f023 0307 	bic.w	r3, r3, #7
 800107a:	430b      	orrs	r3, r1
 800107c:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800107e:	6813      	ldr	r3, [r2, #0]
 8001080:	f003 0307 	and.w	r3, r3, #7
 8001084:	4299      	cmp	r1, r3
 8001086:	d1c2      	bne.n	800100e <HAL_RCC_ClockConfig+0xa>
 8001088:	e7ca      	b.n	8001020 <HAL_RCC_ClockConfig+0x1c>
 800108a:	4b29      	ldr	r3, [pc, #164]	; (8001130 <HAL_RCC_ClockConfig+0x12c>)
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800108c:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001090:	bf1e      	ittt	ne
 8001092:	685a      	ldrne	r2, [r3, #4]
 8001094:	f442 62e0 	orrne.w	r2, r2, #1792	; 0x700
 8001098:	605a      	strne	r2, [r3, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800109a:	0708      	lsls	r0, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800109c:	bf42      	ittt	mi
 800109e:	685a      	ldrmi	r2, [r3, #4]
 80010a0:	f442 5260 	orrmi.w	r2, r2, #14336	; 0x3800
 80010a4:	605a      	strmi	r2, [r3, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80010a6:	685a      	ldr	r2, [r3, #4]
 80010a8:	68a0      	ldr	r0, [r4, #8]
 80010aa:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80010ae:	4302      	orrs	r2, r0
 80010b0:	605a      	str	r2, [r3, #4]
 80010b2:	e7b8      	b.n	8001026 <HAL_RCC_ClockConfig+0x22>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80010b4:	6862      	ldr	r2, [r4, #4]
 80010b6:	4e1e      	ldr	r6, [pc, #120]	; (8001130 <HAL_RCC_ClockConfig+0x12c>)
 80010b8:	2a01      	cmp	r2, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80010ba:	6833      	ldr	r3, [r6, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80010bc:	d11b      	bne.n	80010f6 <HAL_RCC_ClockConfig+0xf2>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80010be:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80010c2:	d0a4      	beq.n	800100e <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80010c4:	6873      	ldr	r3, [r6, #4]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80010c6:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80010ca:	f023 0303 	bic.w	r3, r3, #3
 80010ce:	4313      	orrs	r3, r2
 80010d0:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 80010d2:	f7ff f87d 	bl	80001d0 <HAL_GetTick>
 80010d6:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80010d8:	6873      	ldr	r3, [r6, #4]
 80010da:	6862      	ldr	r2, [r4, #4]
 80010dc:	f003 030c 	and.w	r3, r3, #12
 80010e0:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80010e4:	d0a1      	beq.n	800102a <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80010e6:	f7ff f873 	bl	80001d0 <HAL_GetTick>
 80010ea:	1bc0      	subs	r0, r0, r7
 80010ec:	4540      	cmp	r0, r8
 80010ee:	d9f3      	bls.n	80010d8 <HAL_RCC_ClockConfig+0xd4>
        return HAL_TIMEOUT;
 80010f0:	2003      	movs	r0, #3
}
 80010f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80010f6:	2a02      	cmp	r2, #2
 80010f8:	d102      	bne.n	8001100 <HAL_RCC_ClockConfig+0xfc>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80010fa:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80010fe:	e7e0      	b.n	80010c2 <HAL_RCC_ClockConfig+0xbe>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001100:	f013 0f02 	tst.w	r3, #2
 8001104:	e7dd      	b.n	80010c2 <HAL_RCC_ClockConfig+0xbe>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001106:	6813      	ldr	r3, [r2, #0]
 8001108:	f023 0307 	bic.w	r3, r3, #7
 800110c:	432b      	orrs	r3, r5
 800110e:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001110:	6813      	ldr	r3, [r2, #0]
 8001112:	f003 0307 	and.w	r3, r3, #7
 8001116:	429d      	cmp	r5, r3
 8001118:	f47f af79 	bne.w	800100e <HAL_RCC_ClockConfig+0xa>
 800111c:	e78b      	b.n	8001036 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800111e:	686b      	ldr	r3, [r5, #4]
 8001120:	68e1      	ldr	r1, [r4, #12]
 8001122:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001126:	430b      	orrs	r3, r1
 8001128:	606b      	str	r3, [r5, #4]
 800112a:	e789      	b.n	8001040 <HAL_RCC_ClockConfig+0x3c>
 800112c:	40022000 	.word	0x40022000
 8001130:	40021000 	.word	0x40021000
 8001134:	08004087 	.word	0x08004087
 8001138:	20000118 	.word	0x20000118
 800113c:	20000004 	.word	0x20000004

08001140 <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001140:	6803      	ldr	r3, [r0, #0]
{
 8001142:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001146:	07d9      	lsls	r1, r3, #31
{
 8001148:	4605      	mov	r5, r0
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800114a:	d520      	bpl.n	800118e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800114c:	4c35      	ldr	r4, [pc, #212]	; (8001224 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 800114e:	69e3      	ldr	r3, [r4, #28]
 8001150:	00da      	lsls	r2, r3, #3
 8001152:	d432      	bmi.n	80011ba <HAL_RCCEx_PeriphCLKConfig+0x7a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
 8001154:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8001156:	69e3      	ldr	r3, [r4, #28]
 8001158:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800115c:	61e3      	str	r3, [r4, #28]
 800115e:	69e3      	ldr	r3, [r4, #28]
 8001160:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001164:	9301      	str	r3, [sp, #4]
 8001166:	9b01      	ldr	r3, [sp, #4]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001168:	4e2f      	ldr	r6, [pc, #188]	; (8001228 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800116a:	6833      	ldr	r3, [r6, #0]
 800116c:	05db      	lsls	r3, r3, #23
 800116e:	d526      	bpl.n	80011be <HAL_RCCEx_PeriphCLKConfig+0x7e>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001170:	6a23      	ldr	r3, [r4, #32]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001172:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8001176:	d136      	bne.n	80011e6 <HAL_RCCEx_PeriphCLKConfig+0xa6>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001178:	6a23      	ldr	r3, [r4, #32]
 800117a:	686a      	ldr	r2, [r5, #4]
 800117c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001180:	4313      	orrs	r3, r2
 8001182:	6223      	str	r3, [r4, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001184:	b11f      	cbz	r7, 800118e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001186:	69e3      	ldr	r3, [r4, #28]
 8001188:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800118c:	61e3      	str	r3, [r4, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800118e:	6828      	ldr	r0, [r5, #0]
 8001190:	0783      	lsls	r3, r0, #30
 8001192:	d506      	bpl.n	80011a2 <HAL_RCCEx_PeriphCLKConfig+0x62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001194:	4a23      	ldr	r2, [pc, #140]	; (8001224 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 8001196:	68a9      	ldr	r1, [r5, #8]
 8001198:	6853      	ldr	r3, [r2, #4]
 800119a:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800119e:	430b      	orrs	r3, r1
 80011a0:	6053      	str	r3, [r2, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80011a2:	f010 0010 	ands.w	r0, r0, #16
 80011a6:	d01b      	beq.n	80011e0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80011a8:	4a1e      	ldr	r2, [pc, #120]	; (8001224 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 80011aa:	68e9      	ldr	r1, [r5, #12]
 80011ac:	6853      	ldr	r3, [r2, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80011ae:	2000      	movs	r0, #0
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80011b0:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80011b4:	430b      	orrs	r3, r1
 80011b6:	6053      	str	r3, [r2, #4]
 80011b8:	e012      	b.n	80011e0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    FlagStatus       pwrclkchanged = RESET;
 80011ba:	2700      	movs	r7, #0
 80011bc:	e7d4      	b.n	8001168 <HAL_RCCEx_PeriphCLKConfig+0x28>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80011be:	6833      	ldr	r3, [r6, #0]
 80011c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011c4:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 80011c6:	f7ff f803 	bl	80001d0 <HAL_GetTick>
 80011ca:	4680      	mov	r8, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80011cc:	6833      	ldr	r3, [r6, #0]
 80011ce:	05d8      	lsls	r0, r3, #23
 80011d0:	d4ce      	bmi.n	8001170 <HAL_RCCEx_PeriphCLKConfig+0x30>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80011d2:	f7fe fffd 	bl	80001d0 <HAL_GetTick>
 80011d6:	eba0 0008 	sub.w	r0, r0, r8
 80011da:	2864      	cmp	r0, #100	; 0x64
 80011dc:	d9f6      	bls.n	80011cc <HAL_RCCEx_PeriphCLKConfig+0x8c>
          return HAL_TIMEOUT;
 80011de:	2003      	movs	r0, #3
}
 80011e0:	b002      	add	sp, #8
 80011e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80011e6:	686a      	ldr	r2, [r5, #4]
 80011e8:	f402 7240 	and.w	r2, r2, #768	; 0x300
 80011ec:	4293      	cmp	r3, r2
 80011ee:	d0c3      	beq.n	8001178 <HAL_RCCEx_PeriphCLKConfig+0x38>
      __HAL_RCC_BACKUPRESET_FORCE();
 80011f0:	2001      	movs	r0, #1
 80011f2:	4a0e      	ldr	r2, [pc, #56]	; (800122c <HAL_RCCEx_PeriphCLKConfig+0xec>)
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80011f4:	6a23      	ldr	r3, [r4, #32]
      __HAL_RCC_BACKUPRESET_FORCE();
 80011f6:	6010      	str	r0, [r2, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80011f8:	2000      	movs	r0, #0
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80011fa:	f423 7140 	bic.w	r1, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_RELEASE();
 80011fe:	6010      	str	r0, [r2, #0]
      RCC->BDCR = temp_reg;
 8001200:	6221      	str	r1, [r4, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001202:	07d9      	lsls	r1, r3, #31
 8001204:	d5b8      	bpl.n	8001178 <HAL_RCCEx_PeriphCLKConfig+0x38>
        tickstart = HAL_GetTick();
 8001206:	f7fe ffe3 	bl	80001d0 <HAL_GetTick>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800120a:	f241 3888 	movw	r8, #5000	; 0x1388
        tickstart = HAL_GetTick();
 800120e:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001210:	6a23      	ldr	r3, [r4, #32]
 8001212:	079a      	lsls	r2, r3, #30
 8001214:	d4b0      	bmi.n	8001178 <HAL_RCCEx_PeriphCLKConfig+0x38>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001216:	f7fe ffdb 	bl	80001d0 <HAL_GetTick>
 800121a:	1b80      	subs	r0, r0, r6
 800121c:	4540      	cmp	r0, r8
 800121e:	d9f7      	bls.n	8001210 <HAL_RCCEx_PeriphCLKConfig+0xd0>
 8001220:	e7dd      	b.n	80011de <HAL_RCCEx_PeriphCLKConfig+0x9e>
 8001222:	bf00      	nop
 8001224:	40021000 	.word	0x40021000
 8001228:	40007000 	.word	0x40007000
 800122c:	42420440 	.word	0x42420440

08001230 <HAL_TIM_PeriodElapsedCallback>:
 8001230:	4770      	bx	lr

08001232 <HAL_TIM_OC_DelayElapsedCallback>:
 8001232:	4770      	bx	lr

08001234 <HAL_TIM_IC_CaptureCallback>:
 8001234:	4770      	bx	lr

08001236 <HAL_TIM_PWM_PulseFinishedCallback>:
 8001236:	4770      	bx	lr

08001238 <HAL_TIM_TriggerCallback>:
 8001238:	4770      	bx	lr

0800123a <HAL_TIM_IRQHandler>:
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800123a:	6803      	ldr	r3, [r0, #0]
{
 800123c:	b510      	push	{r4, lr}
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800123e:	691a      	ldr	r2, [r3, #16]
{
 8001240:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001242:	0791      	lsls	r1, r2, #30
 8001244:	d50e      	bpl.n	8001264 <HAL_TIM_IRQHandler+0x2a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001246:	68da      	ldr	r2, [r3, #12]
 8001248:	0792      	lsls	r2, r2, #30
 800124a:	d50b      	bpl.n	8001264 <HAL_TIM_IRQHandler+0x2a>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800124c:	f06f 0202 	mvn.w	r2, #2
 8001250:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001252:	2201      	movs	r2, #1

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001254:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001256:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001258:	079b      	lsls	r3, r3, #30
 800125a:	d077      	beq.n	800134c <HAL_TIM_IRQHandler+0x112>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800125c:	f7ff ffea 	bl	8001234 <HAL_TIM_IC_CaptureCallback>
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001260:	2300      	movs	r3, #0
 8001262:	7723      	strb	r3, [r4, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001264:	6823      	ldr	r3, [r4, #0]
 8001266:	691a      	ldr	r2, [r3, #16]
 8001268:	0750      	lsls	r0, r2, #29
 800126a:	d510      	bpl.n	800128e <HAL_TIM_IRQHandler+0x54>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800126c:	68da      	ldr	r2, [r3, #12]
 800126e:	0751      	lsls	r1, r2, #29
 8001270:	d50d      	bpl.n	800128e <HAL_TIM_IRQHandler+0x54>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001272:	f06f 0204 	mvn.w	r2, #4
 8001276:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001278:	2202      	movs	r2, #2
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800127a:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800127c:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800127e:	f413 7f40 	tst.w	r3, #768	; 0x300
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001282:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001284:	d068      	beq.n	8001358 <HAL_TIM_IRQHandler+0x11e>
        HAL_TIM_IC_CaptureCallback(htim);
 8001286:	f7ff ffd5 	bl	8001234 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800128a:	2300      	movs	r3, #0
 800128c:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800128e:	6823      	ldr	r3, [r4, #0]
 8001290:	691a      	ldr	r2, [r3, #16]
 8001292:	0712      	lsls	r2, r2, #28
 8001294:	d50f      	bpl.n	80012b6 <HAL_TIM_IRQHandler+0x7c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001296:	68da      	ldr	r2, [r3, #12]
 8001298:	0710      	lsls	r0, r2, #28
 800129a:	d50c      	bpl.n	80012b6 <HAL_TIM_IRQHandler+0x7c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800129c:	f06f 0208 	mvn.w	r2, #8
 80012a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80012a2:	2204      	movs	r2, #4
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80012a4:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80012a6:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80012a8:	0799      	lsls	r1, r3, #30
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80012aa:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80012ac:	d05a      	beq.n	8001364 <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 80012ae:	f7ff ffc1 	bl	8001234 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80012b2:	2300      	movs	r3, #0
 80012b4:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80012b6:	6823      	ldr	r3, [r4, #0]
 80012b8:	691a      	ldr	r2, [r3, #16]
 80012ba:	06d2      	lsls	r2, r2, #27
 80012bc:	d510      	bpl.n	80012e0 <HAL_TIM_IRQHandler+0xa6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80012be:	68da      	ldr	r2, [r3, #12]
 80012c0:	06d0      	lsls	r0, r2, #27
 80012c2:	d50d      	bpl.n	80012e0 <HAL_TIM_IRQHandler+0xa6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80012c4:	f06f 0210 	mvn.w	r2, #16
 80012c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80012ca:	2208      	movs	r2, #8
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80012cc:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80012ce:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80012d0:	f413 7f40 	tst.w	r3, #768	; 0x300
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80012d4:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80012d6:	d04b      	beq.n	8001370 <HAL_TIM_IRQHandler+0x136>
        HAL_TIM_IC_CaptureCallback(htim);
 80012d8:	f7ff ffac 	bl	8001234 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80012dc:	2300      	movs	r3, #0
 80012de:	7723      	strb	r3, [r4, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80012e0:	6823      	ldr	r3, [r4, #0]
 80012e2:	691a      	ldr	r2, [r3, #16]
 80012e4:	07d1      	lsls	r1, r2, #31
 80012e6:	d508      	bpl.n	80012fa <HAL_TIM_IRQHandler+0xc0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80012e8:	68da      	ldr	r2, [r3, #12]
 80012ea:	07d2      	lsls	r2, r2, #31
 80012ec:	d505      	bpl.n	80012fa <HAL_TIM_IRQHandler+0xc0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80012ee:	f06f 0201 	mvn.w	r2, #1
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80012f2:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80012f4:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 80012f6:	f7ff ff9b 	bl	8001230 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80012fa:	6823      	ldr	r3, [r4, #0]
 80012fc:	691a      	ldr	r2, [r3, #16]
 80012fe:	0610      	lsls	r0, r2, #24
 8001300:	d508      	bpl.n	8001314 <HAL_TIM_IRQHandler+0xda>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001302:	68da      	ldr	r2, [r3, #12]
 8001304:	0611      	lsls	r1, r2, #24
 8001306:	d505      	bpl.n	8001314 <HAL_TIM_IRQHandler+0xda>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001308:	f06f 0280 	mvn.w	r2, #128	; 0x80
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800130c:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800130e:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8001310:	f000 f945 	bl	800159e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001314:	6823      	ldr	r3, [r4, #0]
 8001316:	691a      	ldr	r2, [r3, #16]
 8001318:	0652      	lsls	r2, r2, #25
 800131a:	d508      	bpl.n	800132e <HAL_TIM_IRQHandler+0xf4>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800131c:	68da      	ldr	r2, [r3, #12]
 800131e:	0650      	lsls	r0, r2, #25
 8001320:	d505      	bpl.n	800132e <HAL_TIM_IRQHandler+0xf4>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001322:	f06f 0240 	mvn.w	r2, #64	; 0x40
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001326:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001328:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 800132a:	f7ff ff85 	bl	8001238 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800132e:	6823      	ldr	r3, [r4, #0]
 8001330:	691a      	ldr	r2, [r3, #16]
 8001332:	0691      	lsls	r1, r2, #26
 8001334:	d522      	bpl.n	800137c <HAL_TIM_IRQHandler+0x142>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001336:	68da      	ldr	r2, [r3, #12]
 8001338:	0692      	lsls	r2, r2, #26
 800133a:	d51f      	bpl.n	800137c <HAL_TIM_IRQHandler+0x142>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800133c:	f06f 0220 	mvn.w	r2, #32
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001340:	4620      	mov	r0, r4
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001342:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001346:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 8001348:	f000 b928 	b.w	800159c <HAL_TIMEx_CommutCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800134c:	f7ff ff71 	bl	8001232 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001350:	4620      	mov	r0, r4
 8001352:	f7ff ff70 	bl	8001236 <HAL_TIM_PWM_PulseFinishedCallback>
 8001356:	e783      	b.n	8001260 <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001358:	f7ff ff6b 	bl	8001232 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800135c:	4620      	mov	r0, r4
 800135e:	f7ff ff6a 	bl	8001236 <HAL_TIM_PWM_PulseFinishedCallback>
 8001362:	e792      	b.n	800128a <HAL_TIM_IRQHandler+0x50>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001364:	f7ff ff65 	bl	8001232 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001368:	4620      	mov	r0, r4
 800136a:	f7ff ff64 	bl	8001236 <HAL_TIM_PWM_PulseFinishedCallback>
 800136e:	e7a0      	b.n	80012b2 <HAL_TIM_IRQHandler+0x78>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001370:	f7ff ff5f 	bl	8001232 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001374:	4620      	mov	r0, r4
 8001376:	f7ff ff5e 	bl	8001236 <HAL_TIM_PWM_PulseFinishedCallback>
 800137a:	e7af      	b.n	80012dc <HAL_TIM_IRQHandler+0xa2>
 800137c:	bd10      	pop	{r4, pc}
	...

08001380 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001380:	4a1a      	ldr	r2, [pc, #104]	; (80013ec <TIM_Base_SetConfig+0x6c>)
  tmpcr1 = TIMx->CR1;
 8001382:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001384:	4290      	cmp	r0, r2
 8001386:	d00a      	beq.n	800139e <TIM_Base_SetConfig+0x1e>
 8001388:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800138c:	d007      	beq.n	800139e <TIM_Base_SetConfig+0x1e>
 800138e:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8001392:	4290      	cmp	r0, r2
 8001394:	d003      	beq.n	800139e <TIM_Base_SetConfig+0x1e>
 8001396:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800139a:	4290      	cmp	r0, r2
 800139c:	d115      	bne.n	80013ca <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 800139e:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80013a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80013a4:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80013a6:	4a11      	ldr	r2, [pc, #68]	; (80013ec <TIM_Base_SetConfig+0x6c>)
 80013a8:	4290      	cmp	r0, r2
 80013aa:	d00a      	beq.n	80013c2 <TIM_Base_SetConfig+0x42>
 80013ac:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80013b0:	d007      	beq.n	80013c2 <TIM_Base_SetConfig+0x42>
 80013b2:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 80013b6:	4290      	cmp	r0, r2
 80013b8:	d003      	beq.n	80013c2 <TIM_Base_SetConfig+0x42>
 80013ba:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80013be:	4290      	cmp	r0, r2
 80013c0:	d103      	bne.n	80013ca <TIM_Base_SetConfig+0x4a>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80013c2:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 80013c4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80013c8:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80013ca:	694a      	ldr	r2, [r1, #20]
 80013cc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80013d0:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 80013d2:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80013d4:	688b      	ldr	r3, [r1, #8]
 80013d6:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80013d8:	680b      	ldr	r3, [r1, #0]
 80013da:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80013dc:	4b03      	ldr	r3, [pc, #12]	; (80013ec <TIM_Base_SetConfig+0x6c>)
 80013de:	4298      	cmp	r0, r3
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80013e0:	bf04      	itt	eq
 80013e2:	690b      	ldreq	r3, [r1, #16]
 80013e4:	6303      	streq	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80013e6:	2301      	movs	r3, #1
 80013e8:	6143      	str	r3, [r0, #20]
 80013ea:	4770      	bx	lr
 80013ec:	40012c00 	.word	0x40012c00

080013f0 <HAL_TIM_Base_Init>:
{
 80013f0:	b510      	push	{r4, lr}
  if (htim == NULL)
 80013f2:	4604      	mov	r4, r0
 80013f4:	b1a0      	cbz	r0, 8001420 <HAL_TIM_Base_Init+0x30>
  if (htim->State == HAL_TIM_STATE_RESET)
 80013f6:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80013fa:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80013fe:	b91b      	cbnz	r3, 8001408 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8001400:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8001404:	f001 fb0a 	bl	8002a1c <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8001408:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800140a:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 800140c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001410:	1d21      	adds	r1, r4, #4
 8001412:	f7ff ffb5 	bl	8001380 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 8001416:	2301      	movs	r3, #1
  return HAL_OK;
 8001418:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 800141a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 800141e:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001420:	2001      	movs	r0, #1
}
 8001422:	bd10      	pop	{r4, pc}

08001424 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8001424:	b510      	push	{r4, lr}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8001426:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001428:	430a      	orrs	r2, r1
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800142a:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800142e:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
 8001432:	4323      	orrs	r3, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001434:	6083      	str	r3, [r0, #8]
 8001436:	bd10      	pop	{r4, pc}

08001438 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8001438:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 800143c:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(htim);
 800143e:	2b01      	cmp	r3, #1
{
 8001440:	4604      	mov	r4, r0
 8001442:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim);
 8001446:	d019      	beq.n	800147c <HAL_TIM_ConfigClockSource+0x44>
 8001448:	2301      	movs	r3, #1
  htim->State = HAL_TIM_STATE_BUSY;
 800144a:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 800144e:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(htim);
 8001450:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 8001454:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001456:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800145a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 800145e:	6083      	str	r3, [r0, #8]
  switch (sClockSourceConfig->ClockSource)
 8001460:	680b      	ldr	r3, [r1, #0]
 8001462:	2b40      	cmp	r3, #64	; 0x40
 8001464:	d065      	beq.n	8001532 <HAL_TIM_ConfigClockSource+0xfa>
 8001466:	d815      	bhi.n	8001494 <HAL_TIM_ConfigClockSource+0x5c>
 8001468:	2b10      	cmp	r3, #16
 800146a:	d00c      	beq.n	8001486 <HAL_TIM_ConfigClockSource+0x4e>
 800146c:	d807      	bhi.n	800147e <HAL_TIM_ConfigClockSource+0x46>
 800146e:	b153      	cbz	r3, 8001486 <HAL_TIM_ConfigClockSource+0x4e>
  htim->State = HAL_TIM_STATE_READY;
 8001470:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 8001472:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8001474:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8001478:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 800147c:	bd70      	pop	{r4, r5, r6, pc}
  switch (sClockSourceConfig->ClockSource)
 800147e:	2b20      	cmp	r3, #32
 8001480:	d001      	beq.n	8001486 <HAL_TIM_ConfigClockSource+0x4e>
 8001482:	2b30      	cmp	r3, #48	; 0x30
 8001484:	d1f4      	bne.n	8001470 <HAL_TIM_ConfigClockSource+0x38>
  tmpsmcr = TIMx->SMCR;
 8001486:	6882      	ldr	r2, [r0, #8]
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8001488:	f043 0307 	orr.w	r3, r3, #7
  tmpsmcr &= ~TIM_SMCR_TS;
 800148c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8001490:	4313      	orrs	r3, r2
 8001492:	e01a      	b.n	80014ca <HAL_TIM_ConfigClockSource+0x92>
  switch (sClockSourceConfig->ClockSource)
 8001494:	2b60      	cmp	r3, #96	; 0x60
 8001496:	d034      	beq.n	8001502 <HAL_TIM_ConfigClockSource+0xca>
 8001498:	d819      	bhi.n	80014ce <HAL_TIM_ConfigClockSource+0x96>
 800149a:	2b50      	cmp	r3, #80	; 0x50
 800149c:	d1e8      	bne.n	8001470 <HAL_TIM_ConfigClockSource+0x38>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800149e:	684a      	ldr	r2, [r1, #4]
 80014a0:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 80014a2:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80014a4:	6a05      	ldr	r5, [r0, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80014a6:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80014aa:	f025 0501 	bic.w	r5, r5, #1
 80014ae:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 80014b0:	6983      	ldr	r3, [r0, #24]
  tmpccer |= TIM_ICPolarity;
 80014b2:	430a      	orrs	r2, r1
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80014b4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80014b8:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 80014bc:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 80014be:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 80014c0:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80014c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80014c6:	f043 0357 	orr.w	r3, r3, #87	; 0x57
  TIMx->SMCR = tmpsmcr;
 80014ca:	6083      	str	r3, [r0, #8]
 80014cc:	e7d0      	b.n	8001470 <HAL_TIM_ConfigClockSource+0x38>
  switch (sClockSourceConfig->ClockSource)
 80014ce:	2b70      	cmp	r3, #112	; 0x70
 80014d0:	d00c      	beq.n	80014ec <HAL_TIM_ConfigClockSource+0xb4>
 80014d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80014d6:	d1cb      	bne.n	8001470 <HAL_TIM_ConfigClockSource+0x38>
      TIM_ETR_SetConfig(htim->Instance,
 80014d8:	68cb      	ldr	r3, [r1, #12]
 80014da:	684a      	ldr	r2, [r1, #4]
 80014dc:	6889      	ldr	r1, [r1, #8]
 80014de:	f7ff ffa1 	bl	8001424 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80014e2:	6822      	ldr	r2, [r4, #0]
 80014e4:	6893      	ldr	r3, [r2, #8]
 80014e6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80014ea:	e008      	b.n	80014fe <HAL_TIM_ConfigClockSource+0xc6>
      TIM_ETR_SetConfig(htim->Instance,
 80014ec:	68cb      	ldr	r3, [r1, #12]
 80014ee:	684a      	ldr	r2, [r1, #4]
 80014f0:	6889      	ldr	r1, [r1, #8]
 80014f2:	f7ff ff97 	bl	8001424 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80014f6:	6822      	ldr	r2, [r4, #0]
 80014f8:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80014fa:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80014fe:	6093      	str	r3, [r2, #8]
      break;
 8001500:	e7b6      	b.n	8001470 <HAL_TIM_ConfigClockSource+0x38>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001502:	684d      	ldr	r5, [r1, #4]
 8001504:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001506:	6a01      	ldr	r1, [r0, #32]
 8001508:	f021 0110 	bic.w	r1, r1, #16
 800150c:	6201      	str	r1, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 800150e:	6982      	ldr	r2, [r0, #24]
  tmpccer = TIMx->CCER;
 8001510:	6a03      	ldr	r3, [r0, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8001512:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001516:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 800151a:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800151e:	ea42 3206 	orr.w	r2, r2, r6, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 8001522:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8001524:	6203      	str	r3, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8001526:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8001528:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800152c:	f043 0367 	orr.w	r3, r3, #103	; 0x67
 8001530:	e7cb      	b.n	80014ca <HAL_TIM_ConfigClockSource+0x92>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001532:	684a      	ldr	r2, [r1, #4]
 8001534:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8001536:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001538:	6a05      	ldr	r5, [r0, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800153a:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800153e:	f025 0501 	bic.w	r5, r5, #1
 8001542:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001544:	6983      	ldr	r3, [r0, #24]
  tmpccer |= TIM_ICPolarity;
 8001546:	430a      	orrs	r2, r1
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001548:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800154c:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8001550:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8001552:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8001554:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8001556:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800155a:	f043 0347 	orr.w	r3, r3, #71	; 0x47
 800155e:	e7b4      	b.n	80014ca <HAL_TIM_ConfigClockSource+0x92>

08001560 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8001560:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 8001564:	b530      	push	{r4, r5, lr}
  __HAL_LOCK(htim);
 8001566:	2b01      	cmp	r3, #1
 8001568:	f04f 0302 	mov.w	r3, #2
 800156c:	d014      	beq.n	8001598 <HAL_TIMEx_MasterConfigSynchronization+0x38>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800156e:	6804      	ldr	r4, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8001570:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpcr2 = htim->Instance->CR2;
 8001574:	6862      	ldr	r2, [r4, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8001576:	68a3      	ldr	r3, [r4, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8001578:	680d      	ldr	r5, [r1, #0]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800157a:	6849      	ldr	r1, [r1, #4]
  tmpcr2 &= ~TIM_CR2_MMS;
 800157c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr &= ~TIM_SMCR_MSM;
 8001580:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8001584:	430b      	orrs	r3, r1
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8001586:	432a      	orrs	r2, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8001588:	6062      	str	r2, [r4, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800158a:	60a3      	str	r3, [r4, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800158c:	2301      	movs	r3, #1
 800158e:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001592:	2300      	movs	r3, #0
 8001594:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_LOCK(htim);
 8001598:	4618      	mov	r0, r3

  return HAL_OK;
}
 800159a:	bd30      	pop	{r4, r5, pc}

0800159c <HAL_TIMEx_CommutCallback>:
 800159c:	4770      	bx	lr

0800159e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800159e:	4770      	bx	lr

080015a0 <USB_CoreInit>:
  * @param  cfg : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80015a0:	b084      	sub	sp, #16
 80015a2:	a801      	add	r0, sp, #4
 80015a4:	e880 000e 	stmia.w	r0, {r1, r2, r3}
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
}
 80015a8:	b004      	add	sp, #16
 80015aa:	2000      	movs	r0, #0
 80015ac:	4770      	bx	lr

080015ae <USB_EnableGlobalInt>:
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR |= winterruptmask;
 80015ae:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 80015b2:	b29b      	uxth	r3, r3
 80015b4:	f443 433f 	orr.w	r3, r3, #48896	; 0xbf00
 80015b8:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40

  return HAL_OK;
}
 80015bc:	2000      	movs	r0, #0
 80015be:	4770      	bx	lr

080015c0 <USB_DisableGlobalInt>:
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= ~winterruptmask;
 80015c0:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 80015c4:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80015c8:	045b      	lsls	r3, r3, #17
 80015ca:	0c5b      	lsrs	r3, r3, #17
 80015cc:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40

  return HAL_OK;
}
 80015d0:	2000      	movs	r0, #0
 80015d2:	4770      	bx	lr

080015d4 <USB_SetCurrentMode>:
 80015d4:	2000      	movs	r0, #0
 80015d6:	4770      	bx	lr

080015d8 <USB_DevInit>:
  * @param  cfg  : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80015d8:	b084      	sub	sp, #16
 80015da:	b510      	push	{r4, lr}
 80015dc:	ac03      	add	r4, sp, #12
 80015de:	e884 000e 	stmia.w	r4, {r1, r2, r3}

  /* Enable USB Device Interrupt mask */
  (void)USB_EnableGlobalInt(USBx);

  return HAL_OK;
}
 80015e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBx->CNTR = 0;
 80015e6:	2200      	movs	r2, #0
  USBx->CNTR = USB_CNTR_FRES;
 80015e8:	2301      	movs	r3, #1
 80015ea:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
  USBx->CNTR = 0;
 80015ee:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40
  USBx->ISTR = 0;
 80015f2:	f8a0 2044 	strh.w	r2, [r0, #68]	; 0x44
  USBx->BTABLE = BTABLE_ADDRESS;
 80015f6:	f8a0 2050 	strh.w	r2, [r0, #80]	; 0x50
  USBx->CNTR |= winterruptmask;
 80015fa:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
}
 80015fe:	b004      	add	sp, #16
  USBx->CNTR |= winterruptmask;
 8001600:	b29b      	uxth	r3, r3
 8001602:	f443 433f 	orr.w	r3, r3, #48896	; 0xbf00
 8001606:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
}
 800160a:	4610      	mov	r0, r2
 800160c:	4770      	bx	lr
	...

08001610 <USB_ActivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8001610:	b5f0      	push	{r4, r5, r6, r7, lr}
  HAL_StatusTypeDef ret = HAL_OK;
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8001612:	780d      	ldrb	r5, [r1, #0]
{
 8001614:	4603      	mov	r3, r0
  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8001616:	f830 2025 	ldrh.w	r2, [r0, r5, lsl #2]

  /* initialize Endpoint */
  switch (ep->type)
 800161a:	78c8      	ldrb	r0, [r1, #3]
  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800161c:	f422 42ec 	bic.w	r2, r2, #30208	; 0x7600
 8001620:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001624:	0412      	lsls	r2, r2, #16
 8001626:	0c12      	lsrs	r2, r2, #16
  switch (ep->type)
 8001628:	2803      	cmp	r0, #3
 800162a:	d84e      	bhi.n	80016ca <USB_ActivateEndpoint+0xba>
 800162c:	e8df f000 	tbb	[pc, r0]
 8001630:	47044a02 	.word	0x47044a02
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8001634:	f442 7200 	orr.w	r2, r2, #512	; 0x200
  HAL_StatusTypeDef ret = HAL_OK;
 8001638:	2000      	movs	r0, #0
    default:
      ret = HAL_ERROR;
      break;
  }

  PCD_SET_ENDPOINT(USBx, ep->num, wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX);
 800163a:	f248 0480 	movw	r4, #32896	; 0x8080
 800163e:	4322      	orrs	r2, r4
 8001640:	f823 2025 	strh.w	r2, [r3, r5, lsl #2]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8001644:	780e      	ldrb	r6, [r1, #0]
 8001646:	4dab      	ldr	r5, [pc, #684]	; (80018f4 <USB_ActivateEndpoint+0x2e4>)
 8001648:	f833 2026 	ldrh.w	r2, [r3, r6, lsl #2]
 800164c:	4334      	orrs	r4, r6
 800164e:	b292      	uxth	r2, r2
 8001650:	402a      	ands	r2, r5
 8001652:	4322      	orrs	r2, r4
 8001654:	f823 2026 	strh.w	r2, [r3, r6, lsl #2]

  if (ep->doublebuffer == 0U)
 8001658:	7b0c      	ldrb	r4, [r1, #12]
 800165a:	780a      	ldrb	r2, [r1, #0]
 800165c:	2c00      	cmp	r4, #0
 800165e:	f040 8088 	bne.w	8001772 <USB_ActivateEndpoint+0x162>
  {
    if (ep->is_in != 0U)
 8001662:	784e      	ldrb	r6, [r1, #1]
 8001664:	88cc      	ldrh	r4, [r1, #6]
 8001666:	b396      	cbz	r6, 80016ce <USB_ActivateEndpoint+0xbe>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8001668:	f8b3 6050 	ldrh.w	r6, [r3, #80]	; 0x50
 800166c:	eb03 1202 	add.w	r2, r3, r2, lsl #4
 8001670:	f024 0401 	bic.w	r4, r4, #1
 8001674:	b2b6      	uxth	r6, r6
 8001676:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800167a:	b2a4      	uxth	r4, r4
 800167c:	5394      	strh	r4, [r2, r6]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800167e:	780c      	ldrb	r4, [r1, #0]
 8001680:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8001684:	0656      	lsls	r6, r2, #25
 8001686:	d509      	bpl.n	800169c <USB_ActivateEndpoint+0x8c>
 8001688:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 800168c:	b292      	uxth	r2, r2
 800168e:	402a      	ands	r2, r5
 8001690:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001694:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8001698:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]

      if (ep->type != EP_TYPE_ISOC)
 800169c:	78ca      	ldrb	r2, [r1, #3]
 800169e:	7809      	ldrb	r1, [r1, #0]
 80016a0:	2a01      	cmp	r2, #1
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80016a2:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 80016a6:	4c94      	ldr	r4, [pc, #592]	; (80018f8 <USB_ActivateEndpoint+0x2e8>)
 80016a8:	b292      	uxth	r2, r2
 80016aa:	ea02 0204 	and.w	r2, r2, r4
      if (ep->type != EP_TYPE_ISOC)
 80016ae:	d001      	beq.n	80016b4 <USB_ActivateEndpoint+0xa4>
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80016b0:	f082 0220 	eor.w	r2, r2, #32
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80016b4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80016b8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80016bc:	e0cb      	b.n	8001856 <USB_ActivateEndpoint+0x246>
      wEpRegVal |= USB_EP_INTERRUPT;
 80016be:	f442 62c0 	orr.w	r2, r2, #1536	; 0x600
 80016c2:	e7b9      	b.n	8001638 <USB_ActivateEndpoint+0x28>
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80016c4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80016c8:	e7b6      	b.n	8001638 <USB_ActivateEndpoint+0x28>
      ret = HAL_ERROR;
 80016ca:	2001      	movs	r0, #1
 80016cc:	e7b5      	b.n	800163a <USB_ActivateEndpoint+0x2a>
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80016ce:	f8b3 5050 	ldrh.w	r5, [r3, #80]	; 0x50
 80016d2:	eb03 1202 	add.w	r2, r3, r2, lsl #4
 80016d6:	f024 0401 	bic.w	r4, r4, #1
 80016da:	b2ad      	uxth	r5, r5
 80016dc:	f502 6281 	add.w	r2, r2, #1032	; 0x408
 80016e0:	b2a4      	uxth	r4, r4
 80016e2:	5354      	strh	r4, [r2, r5]
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80016e4:	780a      	ldrb	r2, [r1, #0]
 80016e6:	f8b3 6050 	ldrh.w	r6, [r3, #80]	; 0x50
 80016ea:	690d      	ldr	r5, [r1, #16]
 80016ec:	eb03 1202 	add.w	r2, r3, r2, lsl #4
 80016f0:	b2b6      	uxth	r6, r6
 80016f2:	f202 420c 	addw	r2, r2, #1036	; 0x40c
 80016f6:	bb5d      	cbnz	r5, 8001750 <USB_ActivateEndpoint+0x140>
 80016f8:	5b94      	ldrh	r4, [r2, r6]
 80016fa:	f424 44f8 	bic.w	r4, r4, #31744	; 0x7c00
 80016fe:	0424      	lsls	r4, r4, #16
 8001700:	0c24      	lsrs	r4, r4, #16
 8001702:	5394      	strh	r4, [r2, r6]
 8001704:	5b94      	ldrh	r4, [r2, r6]
 8001706:	ea6f 4444 	mvn.w	r4, r4, lsl #17
 800170a:	ea6f 4454 	mvn.w	r4, r4, lsr #17
 800170e:	b2a4      	uxth	r4, r4
 8001710:	5394      	strh	r4, [r2, r6]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8001712:	780c      	ldrb	r4, [r1, #0]
 8001714:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8001718:	0455      	lsls	r5, r2, #17
 800171a:	d50d      	bpl.n	8001738 <USB_ActivateEndpoint+0x128>
 800171c:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8001720:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8001724:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001728:	0412      	lsls	r2, r2, #16
 800172a:	0c12      	lsrs	r2, r2, #16
 800172c:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8001730:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001734:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8001738:	7809      	ldrb	r1, [r1, #0]
 800173a:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 800173e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001742:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001746:	0412      	lsls	r2, r2, #16
 8001748:	0c12      	lsrs	r2, r2, #16
 800174a:	f482 5240 	eor.w	r2, r2, #12288	; 0x3000
 800174e:	e7b1      	b.n	80016b4 <USB_ActivateEndpoint+0xa4>
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8001750:	2d3e      	cmp	r5, #62	; 0x3e
 8001752:	d805      	bhi.n	8001760 <USB_ActivateEndpoint+0x150>
 8001754:	086c      	lsrs	r4, r5, #1
 8001756:	07ed      	lsls	r5, r5, #31
 8001758:	bf48      	it	mi
 800175a:	3401      	addmi	r4, #1
 800175c:	02a4      	lsls	r4, r4, #10
 800175e:	e7d6      	b.n	800170e <USB_ActivateEndpoint+0xfe>
 8001760:	096f      	lsrs	r7, r5, #5
 8001762:	06ec      	lsls	r4, r5, #27
 8001764:	4c65      	ldr	r4, [pc, #404]	; (80018fc <USB_ActivateEndpoint+0x2ec>)
 8001766:	bf08      	it	eq
 8001768:	f107 37ff 	addeq.w	r7, r7, #4294967295
 800176c:	ea44 2487 	orr.w	r4, r4, r7, lsl #10
 8001770:	e7cd      	b.n	800170e <USB_ActivateEndpoint+0xfe>
    PCD_SET_EP_DBUF(USBx, ep->num);
 8001772:	f833 4022 	ldrh.w	r4, [r3, r2, lsl #2]
 8001776:	b2a4      	uxth	r4, r4
 8001778:	402c      	ands	r4, r5
 800177a:	f444 4401 	orr.w	r4, r4, #33024	; 0x8100
 800177e:	f044 0480 	orr.w	r4, r4, #128	; 0x80
 8001782:	f823 4022 	strh.w	r4, [r3, r2, lsl #2]
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8001786:	780a      	ldrb	r2, [r1, #0]
 8001788:	890c      	ldrh	r4, [r1, #8]
 800178a:	f8b3 6050 	ldrh.w	r6, [r3, #80]	; 0x50
 800178e:	eb03 1202 	add.w	r2, r3, r2, lsl #4
 8001792:	f024 0401 	bic.w	r4, r4, #1
 8001796:	b2b6      	uxth	r6, r6
 8001798:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800179c:	b2a4      	uxth	r4, r4
 800179e:	5394      	strh	r4, [r2, r6]
 80017a0:	780a      	ldrb	r2, [r1, #0]
 80017a2:	894c      	ldrh	r4, [r1, #10]
 80017a4:	f8b3 6050 	ldrh.w	r6, [r3, #80]	; 0x50
 80017a8:	eb03 1202 	add.w	r2, r3, r2, lsl #4
 80017ac:	f024 0401 	bic.w	r4, r4, #1
 80017b0:	f502 6281 	add.w	r2, r2, #1032	; 0x408
 80017b4:	b2a4      	uxth	r4, r4
 80017b6:	b2b6      	uxth	r6, r6
 80017b8:	5394      	strh	r4, [r2, r6]
    if (ep->is_in == 0U)
 80017ba:	784a      	ldrb	r2, [r1, #1]
 80017bc:	780c      	ldrb	r4, [r1, #0]
 80017be:	2a00      	cmp	r2, #0
 80017c0:	d14c      	bne.n	800185c <USB_ActivateEndpoint+0x24c>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80017c2:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 80017c6:	0452      	lsls	r2, r2, #17
 80017c8:	d509      	bpl.n	80017de <USB_ActivateEndpoint+0x1ce>
 80017ca:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 80017ce:	b292      	uxth	r2, r2
 80017d0:	402a      	ands	r2, r5
 80017d2:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 80017d6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80017da:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80017de:	780c      	ldrb	r4, [r1, #0]
 80017e0:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 80017e4:	0657      	lsls	r7, r2, #25
 80017e6:	d50d      	bpl.n	8001804 <USB_ActivateEndpoint+0x1f4>
 80017e8:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 80017ec:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 80017f0:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80017f4:	0412      	lsls	r2, r2, #16
 80017f6:	0c12      	lsrs	r2, r2, #16
 80017f8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80017fc:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8001800:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_TX_DTOG(USBx, ep->num);
 8001804:	780c      	ldrb	r4, [r1, #0]
 8001806:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 800180a:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 800180e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001812:	0412      	lsls	r2, r2, #16
 8001814:	0c12      	lsrs	r2, r2, #16
 8001816:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800181a:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 800181e:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8001822:	f248 0480 	movw	r4, #32896	; 0x8080
 8001826:	780d      	ldrb	r5, [r1, #0]
 8001828:	f833 2025 	ldrh.w	r2, [r3, r5, lsl #2]
 800182c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001830:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001834:	0412      	lsls	r2, r2, #16
 8001836:	0c12      	lsrs	r2, r2, #16
 8001838:	f482 5240 	eor.w	r2, r2, #12288	; 0x3000
 800183c:	4322      	orrs	r2, r4
 800183e:	f823 2025 	strh.w	r2, [r3, r5, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8001842:	7809      	ldrb	r1, [r1, #0]
 8001844:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 8001848:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 800184c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001850:	0412      	lsls	r2, r2, #16
 8001852:	0c12      	lsrs	r2, r2, #16
 8001854:	4322      	orrs	r2, r4
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8001856:	f823 2021 	strh.w	r2, [r3, r1, lsl #2]
    }
  }

  return ret;
}
 800185a:	bdf0      	pop	{r4, r5, r6, r7, pc}
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800185c:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8001860:	0456      	lsls	r6, r2, #17
 8001862:	d509      	bpl.n	8001878 <USB_ActivateEndpoint+0x268>
 8001864:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8001868:	b292      	uxth	r2, r2
 800186a:	402a      	ands	r2, r5
 800186c:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8001870:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001874:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8001878:	780c      	ldrb	r4, [r1, #0]
 800187a:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 800187e:	0652      	lsls	r2, r2, #25
 8001880:	d50d      	bpl.n	800189e <USB_ActivateEndpoint+0x28e>
 8001882:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8001886:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 800188a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800188e:	0412      	lsls	r2, r2, #16
 8001890:	0c12      	lsrs	r2, r2, #16
 8001892:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001896:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 800189a:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_RX_DTOG(USBx, ep->num);
 800189e:	780c      	ldrb	r4, [r1, #0]
 80018a0:	4d15      	ldr	r5, [pc, #84]	; (80018f8 <USB_ActivateEndpoint+0x2e8>)
 80018a2:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 80018a6:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 80018aa:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80018ae:	0412      	lsls	r2, r2, #16
 80018b0:	0c12      	lsrs	r2, r2, #16
 80018b2:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 80018b6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80018ba:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      if (ep->type != EP_TYPE_ISOC)
 80018be:	78ca      	ldrb	r2, [r1, #3]
 80018c0:	780c      	ldrb	r4, [r1, #0]
 80018c2:	2a01      	cmp	r2, #1
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80018c4:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 80018c8:	b292      	uxth	r2, r2
 80018ca:	ea02 0205 	and.w	r2, r2, r5
 80018ce:	bf18      	it	ne
 80018d0:	f082 0220 	eorne.w	r2, r2, #32
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80018d4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80018d8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80018dc:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80018e0:	7809      	ldrb	r1, [r1, #0]
 80018e2:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 80018e6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80018ea:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80018ee:	0412      	lsls	r2, r2, #16
 80018f0:	0c12      	lsrs	r2, r2, #16
 80018f2:	e6df      	b.n	80016b4 <USB_ActivateEndpoint+0xa4>
 80018f4:	ffff8f8f 	.word	0xffff8f8f
 80018f8:	ffff8fbf 	.word	0xffff8fbf
 80018fc:	ffff8000 	.word	0xffff8000

08001900 <USB_DeactivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8001900:	b510      	push	{r4, lr}
  if (ep->doublebuffer == 0U)
 8001902:	7b0c      	ldrb	r4, [r1, #12]
 8001904:	784b      	ldrb	r3, [r1, #1]
 8001906:	780a      	ldrb	r2, [r1, #0]
 8001908:	2c00      	cmp	r4, #0
 800190a:	d13d      	bne.n	8001988 <USB_DeactivateEndpoint+0x88>
  {
    if (ep->is_in != 0U)
 800190c:	b313      	cbz	r3, 8001954 <USB_DeactivateEndpoint+0x54>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800190e:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001912:	065c      	lsls	r4, r3, #25
 8001914:	d50d      	bpl.n	8001932 <USB_DeactivateEndpoint+0x32>
 8001916:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800191a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800191e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001922:	041b      	lsls	r3, r3, #16
 8001924:	0c1b      	lsrs	r3, r3, #16
 8001926:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800192a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800192e:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8001932:	780a      	ldrb	r2, [r1, #0]
 8001934:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001938:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800193c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8001940:	041b      	lsls	r3, r3, #16
 8001942:	0c1b      	lsrs	r3, r3, #16
 8001944:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001948:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800194c:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
    }
  }

  return HAL_OK;
}
 8001950:	2000      	movs	r0, #0
 8001952:	bd10      	pop	{r4, pc}
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8001954:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001958:	045b      	lsls	r3, r3, #17
 800195a:	d50d      	bpl.n	8001978 <USB_DeactivateEndpoint+0x78>
 800195c:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001960:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001964:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001968:	041b      	lsls	r3, r3, #16
 800196a:	0c1b      	lsrs	r3, r3, #16
 800196c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001970:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001974:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8001978:	780a      	ldrb	r2, [r1, #0]
 800197a:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800197e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001982:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001986:	e7db      	b.n	8001940 <USB_DeactivateEndpoint+0x40>
    if (ep->is_in == 0U)
 8001988:	2b00      	cmp	r3, #0
 800198a:	d14e      	bne.n	8001a2a <USB_DeactivateEndpoint+0x12a>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800198c:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001990:	045c      	lsls	r4, r3, #17
 8001992:	d50d      	bpl.n	80019b0 <USB_DeactivateEndpoint+0xb0>
 8001994:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001998:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800199c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80019a0:	041b      	lsls	r3, r3, #16
 80019a2:	0c1b      	lsrs	r3, r3, #16
 80019a4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80019a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80019ac:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80019b0:	780a      	ldrb	r2, [r1, #0]
 80019b2:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80019b6:	065b      	lsls	r3, r3, #25
 80019b8:	d50d      	bpl.n	80019d6 <USB_DeactivateEndpoint+0xd6>
 80019ba:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80019be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80019c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80019c6:	041b      	lsls	r3, r3, #16
 80019c8:	0c1b      	lsrs	r3, r3, #16
 80019ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80019ce:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80019d2:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_TX_DTOG(USBx, ep->num);
 80019d6:	780a      	ldrb	r2, [r1, #0]
 80019d8:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80019dc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80019e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80019e4:	041b      	lsls	r3, r3, #16
 80019e6:	0c1b      	lsrs	r3, r3, #16
 80019e8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80019ec:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80019f0:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80019f4:	f248 0280 	movw	r2, #32896	; 0x8080
 80019f8:	780c      	ldrb	r4, [r1, #0]
 80019fa:	f830 3024 	ldrh.w	r3, [r0, r4, lsl #2]
 80019fe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001a02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001a06:	041b      	lsls	r3, r3, #16
 8001a08:	0c1b      	lsrs	r3, r3, #16
 8001a0a:	4313      	orrs	r3, r2
 8001a0c:	f820 3024 	strh.w	r3, [r0, r4, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8001a10:	7809      	ldrb	r1, [r1, #0]
 8001a12:	f830 3021 	ldrh.w	r3, [r0, r1, lsl #2]
 8001a16:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001a1a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8001a1e:	041b      	lsls	r3, r3, #16
 8001a20:	0c1b      	lsrs	r3, r3, #16
 8001a22:	4313      	orrs	r3, r2
 8001a24:	f820 3021 	strh.w	r3, [r0, r1, lsl #2]
 8001a28:	e792      	b.n	8001950 <USB_DeactivateEndpoint+0x50>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8001a2a:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001a2e:	045c      	lsls	r4, r3, #17
 8001a30:	d50d      	bpl.n	8001a4e <USB_DeactivateEndpoint+0x14e>
 8001a32:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001a36:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001a3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001a3e:	041b      	lsls	r3, r3, #16
 8001a40:	0c1b      	lsrs	r3, r3, #16
 8001a42:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001a46:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a4a:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8001a4e:	780a      	ldrb	r2, [r1, #0]
 8001a50:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001a54:	065b      	lsls	r3, r3, #25
 8001a56:	d50d      	bpl.n	8001a74 <USB_DeactivateEndpoint+0x174>
 8001a58:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001a5c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001a60:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001a64:	041b      	lsls	r3, r3, #16
 8001a66:	0c1b      	lsrs	r3, r3, #16
 8001a68:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001a6c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001a70:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_RX_DTOG(USBx, ep->num);
 8001a74:	780a      	ldrb	r2, [r1, #0]
 8001a76:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001a7a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001a7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001a82:	041b      	lsls	r3, r3, #16
 8001a84:	0c1b      	lsrs	r3, r3, #16
 8001a86:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001a8a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a8e:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8001a92:	f248 0280 	movw	r2, #32896	; 0x8080
 8001a96:	780c      	ldrb	r4, [r1, #0]
 8001a98:	f830 3024 	ldrh.w	r3, [r0, r4, lsl #2]
 8001a9c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001aa0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001aa4:	041b      	lsls	r3, r3, #16
 8001aa6:	0c1b      	lsrs	r3, r3, #16
 8001aa8:	4313      	orrs	r3, r2
 8001aaa:	f820 3024 	strh.w	r3, [r0, r4, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8001aae:	7809      	ldrb	r1, [r1, #0]
 8001ab0:	f830 3021 	ldrh.w	r3, [r0, r1, lsl #2]
 8001ab4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001ab8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001abc:	e7af      	b.n	8001a1e <USB_DeactivateEndpoint+0x11e>

08001abe <USB_EPSetStall>:
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->is_in != 0U)
 8001abe:	784b      	ldrb	r3, [r1, #1]
 8001ac0:	780a      	ldrb	r2, [r1, #0]
 8001ac2:	b18b      	cbz	r3, 8001ae8 <USB_EPSetStall+0x2a>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8001ac4:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001ac8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001acc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001ad0:	041b      	lsls	r3, r3, #16
 8001ad2:	0c1b      	lsrs	r3, r3, #16
 8001ad4:	f083 0310 	eor.w	r3, r3, #16
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8001ad8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001adc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001ae0:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
  }

  return HAL_OK;
}
 8001ae4:	2000      	movs	r0, #0
 8001ae6:	4770      	bx	lr
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8001ae8:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001aec:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001af0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001af4:	041b      	lsls	r3, r3, #16
 8001af6:	0c1b      	lsrs	r3, r3, #16
 8001af8:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8001afc:	e7ec      	b.n	8001ad8 <USB_EPSetStall+0x1a>

08001afe <USB_EPClearStall>:
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->doublebuffer == 0U)
 8001afe:	7b0b      	ldrb	r3, [r1, #12]
 8001b00:	bb43      	cbnz	r3, 8001b54 <USB_EPClearStall+0x56>
  {
    if (ep->is_in != 0U)
 8001b02:	784b      	ldrb	r3, [r1, #1]
 8001b04:	780a      	ldrb	r2, [r1, #0]
 8001b06:	b33b      	cbz	r3, 8001b58 <USB_EPClearStall+0x5a>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8001b08:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001b0c:	065b      	lsls	r3, r3, #25
 8001b0e:	d50d      	bpl.n	8001b2c <USB_EPClearStall+0x2e>
 8001b10:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001b14:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001b18:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001b1c:	041b      	lsls	r3, r3, #16
 8001b1e:	0c1b      	lsrs	r3, r3, #16
 8001b20:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001b24:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001b28:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]

      if (ep->type != EP_TYPE_ISOC)
 8001b2c:	78cb      	ldrb	r3, [r1, #3]
 8001b2e:	2b01      	cmp	r3, #1
 8001b30:	d010      	beq.n	8001b54 <USB_EPClearStall+0x56>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8001b32:	780a      	ldrb	r2, [r1, #0]
 8001b34:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001b38:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001b3c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001b40:	041b      	lsls	r3, r3, #16
 8001b42:	0c1b      	lsrs	r3, r3, #16
 8001b44:	f083 0320 	eor.w	r3, r3, #32
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8001b48:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001b4c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b50:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    }
  }

  return HAL_OK;
}
 8001b54:	2000      	movs	r0, #0
 8001b56:	4770      	bx	lr
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8001b58:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001b5c:	045b      	lsls	r3, r3, #17
 8001b5e:	d50d      	bpl.n	8001b7c <USB_EPClearStall+0x7e>
 8001b60:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001b64:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001b68:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001b6c:	041b      	lsls	r3, r3, #16
 8001b6e:	0c1b      	lsrs	r3, r3, #16
 8001b70:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001b74:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b78:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8001b7c:	780a      	ldrb	r2, [r1, #0]
 8001b7e:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001b82:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001b86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001b8a:	041b      	lsls	r3, r3, #16
 8001b8c:	0c1b      	lsrs	r3, r3, #16
 8001b8e:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8001b92:	e7d9      	b.n	8001b48 <USB_EPClearStall+0x4a>

08001b94 <USB_SetDevAddress>:
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
  if (address == 0U)
 8001b94:	b911      	cbnz	r1, 8001b9c <USB_SetDevAddress+0x8>
  {
    /* set device address and enable function */
    USBx->DADDR = USB_DADDR_EF;
 8001b96:	2380      	movs	r3, #128	; 0x80
 8001b98:	f8a0 304c 	strh.w	r3, [r0, #76]	; 0x4c
  }

  return HAL_OK;
}
 8001b9c:	2000      	movs	r0, #0
 8001b9e:	4770      	bx	lr

08001ba0 <USB_DevConnect>:
 8001ba0:	2000      	movs	r0, #0
 8001ba2:	4770      	bx	lr

08001ba4 <USB_DevDisconnect>:
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
}
 8001ba4:	2000      	movs	r0, #0
 8001ba6:	4770      	bx	lr

08001ba8 <USB_ReadInterrupts>:
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8001ba8:	f8b0 0044 	ldrh.w	r0, [r0, #68]	; 0x44
  return tmpreg;
}
 8001bac:	b280      	uxth	r0, r0
 8001bae:	4770      	bx	lr

08001bb0 <USB_EP0_OutStart>:
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
}
 8001bb0:	2000      	movs	r0, #0
 8001bb2:	4770      	bx	lr

08001bb4 <USB_WritePMA>:
  uint32_t BaseAddr = (uint32_t)USBx;
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8001bb4:	eb00 0242 	add.w	r2, r0, r2, lsl #1
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8001bb8:	3301      	adds	r3, #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8001bba:	f502 6280 	add.w	r2, r2, #1024	; 0x400
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8001bbe:	085b      	lsrs	r3, r3, #1
 8001bc0:	eb02 0383 	add.w	r3, r2, r3, lsl #2

  for (i = n; i != 0U; i--)
 8001bc4:	429a      	cmp	r2, r3
 8001bc6:	d100      	bne.n	8001bca <USB_WritePMA+0x16>
    pdwVal++;
#endif

    pBuf++;
  }
}
 8001bc8:	4770      	bx	lr
 8001bca:	f831 0b02 	ldrh.w	r0, [r1], #2
    *pdwVal = (uint16_t)temp2;
 8001bce:	f822 0b04 	strh.w	r0, [r2], #4
 8001bd2:	e7f7      	b.n	8001bc4 <USB_WritePMA+0x10>

08001bd4 <USB_EPStartXfer>:
{
 8001bd4:	b570      	push	{r4, r5, r6, lr}
 8001bd6:	460d      	mov	r5, r1
  if (ep->is_in == 1U)
 8001bd8:	7849      	ldrb	r1, [r1, #1]
{
 8001bda:	4604      	mov	r4, r0
  if (ep->is_in == 1U)
 8001bdc:	2901      	cmp	r1, #1
 8001bde:	69aa      	ldr	r2, [r5, #24]
 8001be0:	692b      	ldr	r3, [r5, #16]
 8001be2:	7b28      	ldrb	r0, [r5, #12]
 8001be4:	d166      	bne.n	8001cb4 <USB_EPStartXfer+0xe0>
    if (ep->xfer_len > ep->maxpacket)
 8001be6:	429a      	cmp	r2, r3
      ep->xfer_len = 0U;
 8001be8:	bf9d      	ittte	ls
 8001bea:	2300      	movls	r3, #0
 8001bec:	61ab      	strls	r3, [r5, #24]
 8001bee:	4613      	movls	r3, r2
      ep->xfer_len -= len;
 8001bf0:	1ad2      	subhi	r2, r2, r3
 8001bf2:	bf88      	it	hi
 8001bf4:	61aa      	strhi	r2, [r5, #24]
 8001bf6:	b29e      	uxth	r6, r3
    if (ep->doublebuffer == 0U)
 8001bf8:	bb08      	cbnz	r0, 8001c3e <USB_EPStartXfer+0x6a>
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8001bfa:	4633      	mov	r3, r6
 8001bfc:	88ea      	ldrh	r2, [r5, #6]
 8001bfe:	6969      	ldr	r1, [r5, #20]
 8001c00:	4620      	mov	r0, r4
 8001c02:	f7ff ffd7 	bl	8001bb4 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8001c06:	f8b4 3050 	ldrh.w	r3, [r4, #80]	; 0x50
 8001c0a:	782a      	ldrb	r2, [r5, #0]
 8001c0c:	b299      	uxth	r1, r3
 8001c0e:	f204 4304 	addw	r3, r4, #1028	; 0x404
 8001c12:	0112      	lsls	r2, r2, #4
 8001c14:	440b      	add	r3, r1
 8001c16:	52d6      	strh	r6, [r2, r3]
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8001c18:	782a      	ldrb	r2, [r5, #0]
 8001c1a:	f834 3022 	ldrh.w	r3, [r4, r2, lsl #2]
 8001c1e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001c22:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001c26:	041b      	lsls	r3, r3, #16
 8001c28:	0c1b      	lsrs	r3, r3, #16
 8001c2a:	f083 0330 	eor.w	r3, r3, #48	; 0x30
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8001c2e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001c32:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001c36:	f824 3022 	strh.w	r3, [r4, r2, lsl #2]
}
 8001c3a:	2000      	movs	r0, #0
 8001c3c:	bd70      	pop	{r4, r5, r6, pc}
      if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8001c3e:	782b      	ldrb	r3, [r5, #0]
      USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8001c40:	4620      	mov	r0, r4
      if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8001c42:	f834 2023 	ldrh.w	r2, [r4, r3, lsl #2]
 8001c46:	011b      	lsls	r3, r3, #4
 8001c48:	f012 0f40 	tst.w	r2, #64	; 0x40
        PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8001c4c:	f8b4 2050 	ldrh.w	r2, [r4, #80]	; 0x50
 8001c50:	b291      	uxth	r1, r2
 8001c52:	bf15      	itete	ne
 8001c54:	f204 420c 	addwne	r2, r4, #1036	; 0x40c
        PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8001c58:	f204 4204 	addweq	r2, r4, #1028	; 0x404
        PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8001c5c:	1852      	addne	r2, r2, r1
        PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8001c5e:	1852      	addeq	r2, r2, r1
        PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8001c60:	bf15      	itete	ne
 8001c62:	52d6      	strhne	r6, [r2, r3]
        PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8001c64:	52d6      	strheq	r6, [r2, r3]
        pmabuffer = ep->pmaaddr1;
 8001c66:	896a      	ldrhne	r2, [r5, #10]
        pmabuffer = ep->pmaaddr0;
 8001c68:	892a      	ldrheq	r2, [r5, #8]
      USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8001c6a:	4633      	mov	r3, r6
 8001c6c:	6969      	ldr	r1, [r5, #20]
 8001c6e:	f7ff ffa1 	bl	8001bb4 <USB_WritePMA>
      PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 8001c72:	786b      	ldrb	r3, [r5, #1]
 8001c74:	782a      	ldrb	r2, [r5, #0]
 8001c76:	b973      	cbnz	r3, 8001c96 <USB_EPStartXfer+0xc2>
 8001c78:	f834 3022 	ldrh.w	r3, [r4, r2, lsl #2]
 8001c7c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001c80:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001c84:	041b      	lsls	r3, r3, #16
 8001c86:	0c1b      	lsrs	r3, r3, #16
 8001c88:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001c8c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001c90:	f824 3022 	strh.w	r3, [r4, r2, lsl #2]
 8001c94:	e7c0      	b.n	8001c18 <USB_EPStartXfer+0x44>
 8001c96:	2b01      	cmp	r3, #1
 8001c98:	d1be      	bne.n	8001c18 <USB_EPStartXfer+0x44>
 8001c9a:	f834 3022 	ldrh.w	r3, [r4, r2, lsl #2]
 8001c9e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001ca2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001ca6:	041b      	lsls	r3, r3, #16
 8001ca8:	0c1b      	lsrs	r3, r3, #16
 8001caa:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001cae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001cb2:	e7ed      	b.n	8001c90 <USB_EPStartXfer+0xbc>
    if (ep->xfer_len > ep->maxpacket)
 8001cb4:	429a      	cmp	r2, r3
      ep->xfer_len = 0U;
 8001cb6:	bf93      	iteet	ls
 8001cb8:	2300      	movls	r3, #0
      ep->xfer_len -= len;
 8001cba:	1ad2      	subhi	r2, r2, r3
 8001cbc:	61aa      	strhi	r2, [r5, #24]
      ep->xfer_len = 0U;
 8001cbe:	61ab      	strls	r3, [r5, #24]
 8001cc0:	bf98      	it	ls
 8001cc2:	4613      	movls	r3, r2
 8001cc4:	782a      	ldrb	r2, [r5, #0]
    if (ep->doublebuffer == 0U)
 8001cc6:	b9b0      	cbnz	r0, 8001cf6 <USB_EPStartXfer+0x122>
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8001cc8:	f8b4 0050 	ldrh.w	r0, [r4, #80]	; 0x50
 8001ccc:	0112      	lsls	r2, r2, #4
 8001cce:	b281      	uxth	r1, r0
 8001cd0:	f204 400c 	addw	r0, r4, #1036	; 0x40c
 8001cd4:	4408      	add	r0, r1
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d144      	bne.n	8001d64 <USB_EPStartXfer+0x190>
 8001cda:	5a83      	ldrh	r3, [r0, r2]
 8001cdc:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8001ce0:	041b      	lsls	r3, r3, #16
 8001ce2:	0c1b      	lsrs	r3, r3, #16
 8001ce4:	5283      	strh	r3, [r0, r2]
 8001ce6:	5a83      	ldrh	r3, [r0, r2]
 8001ce8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001cec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001cf0:	b29b      	uxth	r3, r3
 8001cf2:	5283      	strh	r3, [r0, r2]
 8001cf4:	e03f      	b.n	8001d76 <USB_EPStartXfer+0x1a2>
 8001cf6:	b9a1      	cbnz	r1, 8001d22 <USB_EPStartXfer+0x14e>
 8001cf8:	f8b4 0050 	ldrh.w	r0, [r4, #80]	; 0x50
 8001cfc:	0112      	lsls	r2, r2, #4
 8001cfe:	b281      	uxth	r1, r0
 8001d00:	f204 4004 	addw	r0, r4, #1028	; 0x404
 8001d04:	4408      	add	r0, r1
 8001d06:	b9e3      	cbnz	r3, 8001d42 <USB_EPStartXfer+0x16e>
 8001d08:	5a81      	ldrh	r1, [r0, r2]
 8001d0a:	f421 41f8 	bic.w	r1, r1, #31744	; 0x7c00
 8001d0e:	0409      	lsls	r1, r1, #16
 8001d10:	0c09      	lsrs	r1, r1, #16
 8001d12:	5281      	strh	r1, [r0, r2]
 8001d14:	5a81      	ldrh	r1, [r0, r2]
 8001d16:	ea6f 4141 	mvn.w	r1, r1, lsl #17
 8001d1a:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 8001d1e:	b289      	uxth	r1, r1
 8001d20:	5281      	strh	r1, [r0, r2]
 8001d22:	7869      	ldrb	r1, [r5, #1]
 8001d24:	782a      	ldrb	r2, [r5, #0]
 8001d26:	2900      	cmp	r1, #0
 8001d28:	d0ce      	beq.n	8001cc8 <USB_EPStartXfer+0xf4>
 8001d2a:	2901      	cmp	r1, #1
 8001d2c:	d123      	bne.n	8001d76 <USB_EPStartXfer+0x1a2>
 8001d2e:	f8b4 1050 	ldrh.w	r1, [r4, #80]	; 0x50
 8001d32:	0112      	lsls	r2, r2, #4
 8001d34:	b288      	uxth	r0, r1
 8001d36:	f204 410c 	addw	r1, r4, #1036	; 0x40c
 8001d3a:	4401      	add	r1, r0
 8001d3c:	b29b      	uxth	r3, r3
 8001d3e:	528b      	strh	r3, [r1, r2]
 8001d40:	e019      	b.n	8001d76 <USB_EPStartXfer+0x1a2>
 8001d42:	2b3e      	cmp	r3, #62	; 0x3e
 8001d44:	d805      	bhi.n	8001d52 <USB_EPStartXfer+0x17e>
 8001d46:	0859      	lsrs	r1, r3, #1
 8001d48:	07de      	lsls	r6, r3, #31
 8001d4a:	bf48      	it	mi
 8001d4c:	3101      	addmi	r1, #1
 8001d4e:	0289      	lsls	r1, r1, #10
 8001d50:	e7e5      	b.n	8001d1e <USB_EPStartXfer+0x14a>
 8001d52:	095e      	lsrs	r6, r3, #5
 8001d54:	06d9      	lsls	r1, r3, #27
 8001d56:	4912      	ldr	r1, [pc, #72]	; (8001da0 <USB_EPStartXfer+0x1cc>)
 8001d58:	bf08      	it	eq
 8001d5a:	f106 36ff 	addeq.w	r6, r6, #4294967295
 8001d5e:	ea41 2186 	orr.w	r1, r1, r6, lsl #10
 8001d62:	e7dc      	b.n	8001d1e <USB_EPStartXfer+0x14a>
 8001d64:	2b3e      	cmp	r3, #62	; 0x3e
 8001d66:	d812      	bhi.n	8001d8e <USB_EPStartXfer+0x1ba>
 8001d68:	0859      	lsrs	r1, r3, #1
 8001d6a:	07de      	lsls	r6, r3, #31
 8001d6c:	bf48      	it	mi
 8001d6e:	3101      	addmi	r1, #1
 8001d70:	0289      	lsls	r1, r1, #10
 8001d72:	b289      	uxth	r1, r1
 8001d74:	5281      	strh	r1, [r0, r2]
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8001d76:	782a      	ldrb	r2, [r5, #0]
 8001d78:	f834 3022 	ldrh.w	r3, [r4, r2, lsl #2]
 8001d7c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001d80:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001d84:	041b      	lsls	r3, r3, #16
 8001d86:	0c1b      	lsrs	r3, r3, #16
 8001d88:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8001d8c:	e74f      	b.n	8001c2e <USB_EPStartXfer+0x5a>
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8001d8e:	0959      	lsrs	r1, r3, #5
 8001d90:	06db      	lsls	r3, r3, #27
 8001d92:	4b03      	ldr	r3, [pc, #12]	; (8001da0 <USB_EPStartXfer+0x1cc>)
 8001d94:	bf08      	it	eq
 8001d96:	f101 31ff 	addeq.w	r1, r1, #4294967295
 8001d9a:	ea43 2381 	orr.w	r3, r3, r1, lsl #10
 8001d9e:	e7a7      	b.n	8001cf0 <USB_EPStartXfer+0x11c>
 8001da0:	ffff8000 	.word	0xffff8000

08001da4 <USB_ReadPMA>:
  uint32_t BaseAddr = (uint32_t)USBx;
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8001da4:	eb00 0242 	add.w	r2, r0, r2, lsl #1
{
 8001da8:	b5f0      	push	{r4, r5, r6, r7, lr}
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8001daa:	f502 6280 	add.w	r2, r2, #1024	; 0x400
  uint32_t n = (uint32_t)wNBytes >> 1;
 8001dae:	085d      	lsrs	r5, r3, #1
 8001db0:	4608      	mov	r0, r1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8001db2:	4617      	mov	r7, r2

  for (i = n; i != 0U; i--)
 8001db4:	462e      	mov	r6, r5
 8001db6:	3002      	adds	r0, #2
 8001db8:	b936      	cbnz	r6, 8001dc8 <USB_ReadPMA+0x24>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8001dba:	07db      	lsls	r3, r3, #31
  {
    temp = *pdwVal;
 8001dbc:	bf44      	itt	mi
 8001dbe:	f832 3025 	ldrhmi.w	r3, [r2, r5, lsl #2]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8001dc2:	f801 3015 	strbmi.w	r3, [r1, r5, lsl #1]
 8001dc6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    temp = *(__IO uint16_t *)pdwVal;
 8001dc8:	f837 4b04 	ldrh.w	r4, [r7], #4
  for (i = n; i != 0U; i--)
 8001dcc:	3e01      	subs	r6, #1
    temp = *(__IO uint16_t *)pdwVal;
 8001dce:	b2a4      	uxth	r4, r4
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8001dd0:	f800 4c02 	strb.w	r4, [r0, #-2]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8001dd4:	0a24      	lsrs	r4, r4, #8
 8001dd6:	f800 4c01 	strb.w	r4, [r0, #-1]
 8001dda:	e7ec      	b.n	8001db6 <USB_ReadPMA+0x12>

08001ddc <USBD_CDC_EP0_RxReady>:
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8001ddc:	f8d0 32bc 	ldr.w	r3, [r0, #700]	; 0x2bc
{
 8001de0:	b510      	push	{r4, lr}
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8001de2:	f8d0 42b8 	ldr.w	r4, [r0, #696]	; 0x2b8
  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8001de6:	b15b      	cbz	r3, 8001e00 <USBD_CDC_EP0_RxReady+0x24>
 8001de8:	f894 0200 	ldrb.w	r0, [r4, #512]	; 0x200
 8001dec:	28ff      	cmp	r0, #255	; 0xff
 8001dee:	d007      	beq.n	8001e00 <USBD_CDC_EP0_RxReady+0x24>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8001df0:	689b      	ldr	r3, [r3, #8]
 8001df2:	f894 2201 	ldrb.w	r2, [r4, #513]	; 0x201
 8001df6:	4621      	mov	r1, r4
 8001df8:	4798      	blx	r3
                                                      (uint8_t *)(void *)hcdc->data,
                                                      (uint16_t)hcdc->CmdLength);
    hcdc->CmdOpCode = 0xFFU;
 8001dfa:	23ff      	movs	r3, #255	; 0xff
 8001dfc:	f884 3200 	strb.w	r3, [r4, #512]	; 0x200

  }
  return USBD_OK;
}
 8001e00:	2000      	movs	r0, #0
 8001e02:	bd10      	pop	{r4, pc}

08001e04 <USBD_CDC_GetFSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8001e04:	2343      	movs	r3, #67	; 0x43
 8001e06:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_CfgFSDesc;
}
 8001e08:	4800      	ldr	r0, [pc, #0]	; (8001e0c <USBD_CDC_GetFSCfgDesc+0x8>)
 8001e0a:	4770      	bx	lr
 8001e0c:	20000040 	.word	0x20000040

08001e10 <USBD_CDC_GetHSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8001e10:	2343      	movs	r3, #67	; 0x43
 8001e12:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_CfgHSDesc;
}
 8001e14:	4800      	ldr	r0, [pc, #0]	; (8001e18 <USBD_CDC_GetHSCfgDesc+0x8>)
 8001e16:	4770      	bx	lr
 8001e18:	20000084 	.word	0x20000084

08001e1c <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8001e1c:	2343      	movs	r3, #67	; 0x43
 8001e1e:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
}
 8001e20:	4800      	ldr	r0, [pc, #0]	; (8001e24 <USBD_CDC_GetOtherSpeedCfgDesc+0x8>)
 8001e22:	4770      	bx	lr
 8001e24:	200000d4 	.word	0x200000d4

08001e28 <USBD_CDC_GetDeviceQualifierDescriptor>:
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8001e28:	230a      	movs	r3, #10
 8001e2a:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_DeviceQualifierDesc;
}
 8001e2c:	4800      	ldr	r0, [pc, #0]	; (8001e30 <USBD_CDC_GetDeviceQualifierDescriptor+0x8>)
 8001e2e:	4770      	bx	lr
 8001e30:	200000c8 	.word	0x200000c8

08001e34 <USBD_CDC_DataOut>:
{
 8001e34:	b538      	push	{r3, r4, r5, lr}
 8001e36:	4605      	mov	r5, r0
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8001e38:	f8d0 42b8 	ldr.w	r4, [r0, #696]	; 0x2b8
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8001e3c:	f001 f8ce 	bl	8002fdc <USBD_LL_GetRxDataSize>
  if (pdev->pClassData != NULL)
 8001e40:	f8d5 32b8 	ldr.w	r3, [r5, #696]	; 0x2b8
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8001e44:	f8c4 020c 	str.w	r0, [r4, #524]	; 0x20c
  if (pdev->pClassData != NULL)
 8001e48:	b14b      	cbz	r3, 8001e5e <USBD_CDC_DataOut+0x2a>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8001e4a:	f8d5 32bc 	ldr.w	r3, [r5, #700]	; 0x2bc
 8001e4e:	f504 7103 	add.w	r1, r4, #524	; 0x20c
 8001e52:	68db      	ldr	r3, [r3, #12]
 8001e54:	f8d4 0204 	ldr.w	r0, [r4, #516]	; 0x204
 8001e58:	4798      	blx	r3
    return USBD_OK;
 8001e5a:	2000      	movs	r0, #0
 8001e5c:	bd38      	pop	{r3, r4, r5, pc}
    return USBD_FAIL;
 8001e5e:	2002      	movs	r0, #2
}
 8001e60:	bd38      	pop	{r3, r4, r5, pc}

08001e62 <USBD_CDC_DataIn>:
{
 8001e62:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8001e64:	f8d0 62b8 	ldr.w	r6, [r0, #696]	; 0x2b8
  if (pdev->pClassData != NULL)
 8001e68:	b1ce      	cbz	r6, 8001e9e <USBD_CDC_DataIn+0x3c>
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8001e6a:	2314      	movs	r3, #20
 8001e6c:	fb03 0301 	mla	r3, r3, r1, r0
 8001e70:	69da      	ldr	r2, [r3, #28]
 8001e72:	b182      	cbz	r2, 8001e96 <USBD_CDC_DataIn+0x34>
 8001e74:	f8d0 42c0 	ldr.w	r4, [r0, #704]	; 0x2c0
 8001e78:	eb04 1441 	add.w	r4, r4, r1, lsl #5
 8001e7c:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 8001e7e:	fbb2 f4f5 	udiv	r4, r2, r5
 8001e82:	fb05 2414 	mls	r4, r5, r4, r2
 8001e86:	b934      	cbnz	r4, 8001e96 <USBD_CDC_DataIn+0x34>
      pdev->ep_in[epnum].total_length = 0U;
 8001e88:	61dc      	str	r4, [r3, #28]
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8001e8a:	4622      	mov	r2, r4
 8001e8c:	4623      	mov	r3, r4
 8001e8e:	f001 f889 	bl	8002fa4 <USBD_LL_Transmit>
    return USBD_OK;
 8001e92:	4620      	mov	r0, r4
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8001e94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      hcdc->TxState = 0U;
 8001e96:	2000      	movs	r0, #0
 8001e98:	f8c6 0214 	str.w	r0, [r6, #532]	; 0x214
 8001e9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return USBD_FAIL;
 8001e9e:	2002      	movs	r0, #2
}
 8001ea0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08001ea2 <USBD_CDC_Setup>:
{
 8001ea2:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  uint8_t ifalt = 0U;
 8001ea6:	f04f 0800 	mov.w	r8, #0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8001eaa:	780a      	ldrb	r2, [r1, #0]
{
 8001eac:	4605      	mov	r5, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8001eae:	f012 0460 	ands.w	r4, r2, #96	; 0x60
{
 8001eb2:	460e      	mov	r6, r1
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8001eb4:	f8d0 72b8 	ldr.w	r7, [r0, #696]	; 0x2b8
  uint8_t ifalt = 0U;
 8001eb8:	f88d 8005 	strb.w	r8, [sp, #5]
  uint16_t status_info = 0U;
 8001ebc:	f8ad 8006 	strh.w	r8, [sp, #6]
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8001ec0:	d028      	beq.n	8001f14 <USBD_CDC_Setup+0x72>
 8001ec2:	2c20      	cmp	r4, #32
 8001ec4:	d147      	bne.n	8001f56 <USBD_CDC_Setup+0xb4>
      if (req->wLength)
 8001ec6:	88cc      	ldrh	r4, [r1, #6]
 8001ec8:	784b      	ldrb	r3, [r1, #1]
 8001eca:	b1e4      	cbz	r4, 8001f06 <USBD_CDC_Setup+0x64>
        if (req->bmRequest & 0x80U)
 8001ecc:	0612      	lsls	r2, r2, #24
 8001ece:	d511      	bpl.n	8001ef4 <USBD_CDC_Setup+0x52>
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8001ed0:	f8d0 22bc 	ldr.w	r2, [r0, #700]	; 0x2bc
 8001ed4:	4639      	mov	r1, r7
 8001ed6:	f8d2 9008 	ldr.w	r9, [r2, #8]
 8001eda:	4618      	mov	r0, r3
 8001edc:	4622      	mov	r2, r4
 8001ede:	47c8      	blx	r9
          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8001ee0:	88f2      	ldrh	r2, [r6, #6]
 8001ee2:	4639      	mov	r1, r7
 8001ee4:	4628      	mov	r0, r5
 8001ee6:	f000 fc4c 	bl	8002782 <USBD_CtlSendData>
  uint8_t ret = USBD_OK;
 8001eea:	4644      	mov	r4, r8
}
 8001eec:	4620      	mov	r0, r4
 8001eee:	b003      	add	sp, #12
 8001ef0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
          hcdc->CmdOpCode = req->bRequest;
 8001ef4:	f887 3200 	strb.w	r3, [r7, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8001ef8:	f887 4201 	strb.w	r4, [r7, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8001efc:	4622      	mov	r2, r4
 8001efe:	4639      	mov	r1, r7
 8001f00:	f000 fc54 	bl	80027ac <USBD_CtlPrepareRx>
 8001f04:	e7f1      	b.n	8001eea <USBD_CDC_Setup+0x48>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8001f06:	f8d0 22bc 	ldr.w	r2, [r0, #700]	; 0x2bc
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	6895      	ldr	r5, [r2, #8]
 8001f0e:	4622      	mov	r2, r4
 8001f10:	47a8      	blx	r5
 8001f12:	e7eb      	b.n	8001eec <USBD_CDC_Setup+0x4a>
      switch (req->bRequest)
 8001f14:	784f      	ldrb	r7, [r1, #1]
 8001f16:	2f0a      	cmp	r7, #10
 8001f18:	d00d      	beq.n	8001f36 <USBD_CDC_Setup+0x94>
 8001f1a:	2f0b      	cmp	r7, #11
 8001f1c:	d015      	beq.n	8001f4a <USBD_CDC_Setup+0xa8>
 8001f1e:	b9d7      	cbnz	r7, 8001f56 <USBD_CDC_Setup+0xb4>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8001f20:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8001f24:	2b03      	cmp	r3, #3
 8001f26:	d114      	bne.n	8001f52 <USBD_CDC_Setup+0xb0>
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8001f28:	2202      	movs	r2, #2
 8001f2a:	f10d 0106 	add.w	r1, sp, #6
 8001f2e:	f000 fc28 	bl	8002782 <USBD_CtlSendData>
  uint8_t ret = USBD_OK;
 8001f32:	463c      	mov	r4, r7
 8001f34:	e7da      	b.n	8001eec <USBD_CDC_Setup+0x4a>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8001f36:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8001f3a:	2b03      	cmp	r3, #3
 8001f3c:	d109      	bne.n	8001f52 <USBD_CDC_Setup+0xb0>
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8001f3e:	2201      	movs	r2, #1
 8001f40:	f10d 0105 	add.w	r1, sp, #5
 8001f44:	f000 fc1d 	bl	8002782 <USBD_CtlSendData>
 8001f48:	e7d0      	b.n	8001eec <USBD_CDC_Setup+0x4a>
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8001f4a:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8001f4e:	2b03      	cmp	r3, #3
 8001f50:	d0cc      	beq.n	8001eec <USBD_CDC_Setup+0x4a>
            USBD_CtlError(pdev, req);
 8001f52:	4631      	mov	r1, r6
 8001f54:	4628      	mov	r0, r5
      USBD_CtlError(pdev, req);
 8001f56:	f000 fbed 	bl	8002734 <USBD_CtlError>
      ret = USBD_FAIL;
 8001f5a:	2402      	movs	r4, #2
      break;
 8001f5c:	e7c6      	b.n	8001eec <USBD_CDC_Setup+0x4a>

08001f5e <USBD_CDC_DeInit>:
{
 8001f5e:	b538      	push	{r3, r4, r5, lr}
 8001f60:	4604      	mov	r4, r0
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8001f62:	2500      	movs	r5, #0
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8001f64:	2181      	movs	r1, #129	; 0x81
 8001f66:	f000 ffd5 	bl	8002f14 <USBD_LL_CloseEP>
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8001f6a:	2101      	movs	r1, #1
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8001f6c:	62e5      	str	r5, [r4, #44]	; 0x2c
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8001f6e:	4620      	mov	r0, r4
 8001f70:	f000 ffd0 	bl	8002f14 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8001f74:	f8c4 516c 	str.w	r5, [r4, #364]	; 0x16c
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8001f78:	2182      	movs	r1, #130	; 0x82
 8001f7a:	4620      	mov	r0, r4
 8001f7c:	f000 ffca 	bl	8002f14 <USBD_LL_CloseEP>
  if (pdev->pClassData != NULL)
 8001f80:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8001f84:	6425      	str	r5, [r4, #64]	; 0x40
  if (pdev->pClassData != NULL)
 8001f86:	b14b      	cbz	r3, 8001f9c <USBD_CDC_DeInit+0x3e>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8001f88:	f8d4 32bc 	ldr.w	r3, [r4, #700]	; 0x2bc
 8001f8c:	685b      	ldr	r3, [r3, #4]
 8001f8e:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8001f90:	f8d4 02b8 	ldr.w	r0, [r4, #696]	; 0x2b8
 8001f94:	f001 f82a 	bl	8002fec <USBD_static_free>
    pdev->pClassData = NULL;
 8001f98:	f8c4 52b8 	str.w	r5, [r4, #696]	; 0x2b8
}
 8001f9c:	2000      	movs	r0, #0
 8001f9e:	bd38      	pop	{r3, r4, r5, pc}

08001fa0 <USBD_CDC_Init>:
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8001fa0:	7c03      	ldrb	r3, [r0, #16]
{
 8001fa2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001fa6:	4604      	mov	r4, r0
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8001fa8:	bbcb      	cbnz	r3, 800201e <USBD_CDC_Init+0x7e>
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8001faa:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001fae:	2202      	movs	r2, #2
 8001fb0:	2181      	movs	r1, #129	; 0x81
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8001fb2:	2501      	movs	r5, #1
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8001fb4:	f000 ff9e 	bl	8002ef4 <USBD_LL_OpenEP>
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8001fb8:	f44f 7300 	mov.w	r3, #512	; 0x200
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8001fbc:	62e5      	str	r5, [r4, #44]	; 0x2c
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8001fbe:	4629      	mov	r1, r5
 8001fc0:	2202      	movs	r2, #2
 8001fc2:	4620      	mov	r0, r4
 8001fc4:	f000 ff96 	bl	8002ef4 <USBD_LL_OpenEP>
    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8001fc8:	f8c4 516c 	str.w	r5, [r4, #364]	; 0x16c
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8001fcc:	2501      	movs	r5, #1
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8001fce:	2308      	movs	r3, #8
 8001fd0:	2203      	movs	r2, #3
 8001fd2:	2182      	movs	r1, #130	; 0x82
 8001fd4:	4620      	mov	r0, r4
 8001fd6:	f000 ff8d 	bl	8002ef4 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8001fda:	6425      	str	r5, [r4, #64]	; 0x40
  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8001fdc:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8001fe0:	f001 f800 	bl	8002fe4 <USBD_static_malloc>
 8001fe4:	4606      	mov	r6, r0
 8001fe6:	f8c4 02b8 	str.w	r0, [r4, #696]	; 0x2b8
  if (pdev->pClassData == NULL)
 8001fea:	b358      	cbz	r0, 8002044 <USBD_CDC_Init+0xa4>
    hcdc->TxState = 0U;
 8001fec:	2700      	movs	r7, #0
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8001fee:	f8d4 32bc 	ldr.w	r3, [r4, #700]	; 0x2bc
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	4798      	blx	r3
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8001ff6:	f894 8010 	ldrb.w	r8, [r4, #16]
    hcdc->TxState = 0U;
 8001ffa:	f8c6 7214 	str.w	r7, [r6, #532]	; 0x214
    hcdc->RxState = 0U;
 8001ffe:	f8c6 7218 	str.w	r7, [r6, #536]	; 0x218
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8002002:	f1b8 0f00 	cmp.w	r8, #0
 8002006:	d113      	bne.n	8002030 <USBD_CDC_Init+0x90>
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8002008:	f44f 7300 	mov.w	r3, #512	; 0x200
 800200c:	f8d6 2204 	ldr.w	r2, [r6, #516]	; 0x204
 8002010:	4629      	mov	r1, r5
 8002012:	4620      	mov	r0, r4
 8002014:	f000 ffd4 	bl	8002fc0 <USBD_LL_PrepareReceive>
  uint8_t ret = 0U;
 8002018:	4640      	mov	r0, r8
 800201a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800201e:	2501      	movs	r5, #1
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8002020:	2340      	movs	r3, #64	; 0x40
 8002022:	2202      	movs	r2, #2
 8002024:	2181      	movs	r1, #129	; 0x81
 8002026:	f000 ff65 	bl	8002ef4 <USBD_LL_OpenEP>
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800202a:	62e5      	str	r5, [r4, #44]	; 0x2c
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800202c:	2340      	movs	r3, #64	; 0x40
 800202e:	e7c6      	b.n	8001fbe <USBD_CDC_Init+0x1e>
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8002030:	2340      	movs	r3, #64	; 0x40
 8002032:	f8d6 2204 	ldr.w	r2, [r6, #516]	; 0x204
 8002036:	4629      	mov	r1, r5
 8002038:	4620      	mov	r0, r4
 800203a:	f000 ffc1 	bl	8002fc0 <USBD_LL_PrepareReceive>
  uint8_t ret = 0U;
 800203e:	4638      	mov	r0, r7
 8002040:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ret = 1U;
 8002044:	4628      	mov	r0, r5
}
 8002046:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800204a <USBD_CDC_RegisterInterface>:
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
  uint8_t  ret = USBD_FAIL;

  if (fops != NULL)
 800204a:	b119      	cbz	r1, 8002054 <USBD_CDC_RegisterInterface+0xa>
  {
    pdev->pUserData = fops;
 800204c:	f8c0 12bc 	str.w	r1, [r0, #700]	; 0x2bc
    ret = USBD_OK;
 8002050:	2000      	movs	r0, #0
 8002052:	4770      	bx	lr
  uint8_t  ret = USBD_FAIL;
 8002054:	2002      	movs	r0, #2
  }

  return ret;
}
 8002056:	4770      	bx	lr

08002058 <USBD_CDC_SetTxBuffer>:
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8002058:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8

  hcdc->TxBuffer = pbuff;
  hcdc->TxLength = length;

  return USBD_OK;
}
 800205c:	2000      	movs	r0, #0
  hcdc->TxBuffer = pbuff;
 800205e:	f8c3 1208 	str.w	r1, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8002062:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
}
 8002066:	4770      	bx	lr

08002068 <USBD_CDC_SetRxBuffer>:
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;

  hcdc->RxBuffer = pbuff;
 8002068:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8

  return USBD_OK;
}
 800206c:	2000      	movs	r0, #0
  hcdc->RxBuffer = pbuff;
 800206e:	f8c3 1204 	str.w	r1, [r3, #516]	; 0x204
}
 8002072:	4770      	bx	lr

08002074 <USBD_CDC_ReceivePacket>:
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8002074:	f8d0 22b8 	ldr.w	r2, [r0, #696]	; 0x2b8
{
 8002078:	b510      	push	{r4, lr}

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 800207a:	b162      	cbz	r2, 8002096 <USBD_CDC_ReceivePacket+0x22>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800207c:	7c04      	ldrb	r4, [r0, #16]
 800207e:	b944      	cbnz	r4, 8002092 <USBD_CDC_ReceivePacket+0x1e>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8002080:	f44f 7300 	mov.w	r3, #512	; 0x200
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8002084:	f8d2 2204 	ldr.w	r2, [r2, #516]	; 0x204
 8002088:	2101      	movs	r1, #1
 800208a:	f000 ff99 	bl	8002fc0 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 800208e:	2000      	movs	r0, #0
 8002090:	bd10      	pop	{r4, pc}
      USBD_LL_PrepareReceive(pdev,
 8002092:	2340      	movs	r3, #64	; 0x40
 8002094:	e7f6      	b.n	8002084 <USBD_CDC_ReceivePacket+0x10>
  }
  else
  {
    return USBD_FAIL;
 8002096:	2002      	movs	r0, #2
  }
}
 8002098:	bd10      	pop	{r4, pc}
	...

0800209c <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800209c:	b508      	push	{r3, lr}
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800209e:	b950      	cbnz	r0, 80020b6 <USBD_Init+0x1a>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
 80020a0:	480d      	ldr	r0, [pc, #52]	; (80020d8 <USBD_Init+0x3c>)
 80020a2:	f001 f875 	bl	8003190 <iprintf>
 80020a6:	480d      	ldr	r0, [pc, #52]	; (80020dc <USBD_Init+0x40>)
 80020a8:	f001 f872 	bl	8003190 <iprintf>
 80020ac:	200a      	movs	r0, #10
 80020ae:	f001 f887 	bl	80031c0 <putchar>
#endif
    return USBD_FAIL;
 80020b2:	2002      	movs	r0, #2
 80020b4:	bd08      	pop	{r3, pc}
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 80020b6:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 80020ba:	b113      	cbz	r3, 80020c2 <USBD_Init+0x26>
  {
    pdev->pClass = NULL;
 80020bc:	2300      	movs	r3, #0
 80020be:	f8c0 32b4 	str.w	r3, [r0, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80020c2:	b109      	cbz	r1, 80020c8 <USBD_Init+0x2c>
  {
    pdev->pDesc = pdesc;
 80020c4:	f8c0 12b0 	str.w	r1, [r0, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80020c8:	2301      	movs	r3, #1
  pdev->id = id;
 80020ca:	7002      	strb	r2, [r0, #0]
  pdev->dev_state = USBD_STATE_DEFAULT;
 80020cc:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 80020d0:	f000 fec2 	bl	8002e58 <USBD_LL_Init>

  return USBD_OK;
 80020d4:	2000      	movs	r0, #0
}
 80020d6:	bd08      	pop	{r3, pc}
 80020d8:	08004054 	.word	0x08004054
 80020dc:	0800405c 	.word	0x0800405c

080020e0 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80020e0:	b508      	push	{r3, lr}
  USBD_StatusTypeDef status = USBD_OK;
  if (pclass != NULL)
 80020e2:	b119      	cbz	r1, 80020ec <USBD_RegisterClass+0xc>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 80020e4:	f8c0 12b4 	str.w	r1, [r0, #692]	; 0x2b4
    status = USBD_OK;
 80020e8:	2000      	movs	r0, #0
 80020ea:	bd08      	pop	{r3, pc}
  }
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
 80020ec:	4805      	ldr	r0, [pc, #20]	; (8002104 <USBD_RegisterClass+0x24>)
 80020ee:	f001 f84f 	bl	8003190 <iprintf>
 80020f2:	4805      	ldr	r0, [pc, #20]	; (8002108 <USBD_RegisterClass+0x28>)
 80020f4:	f001 f84c 	bl	8003190 <iprintf>
 80020f8:	200a      	movs	r0, #10
 80020fa:	f001 f861 	bl	80031c0 <putchar>
#endif
    status = USBD_FAIL;
 80020fe:	2002      	movs	r0, #2
  }

  return status;
}
 8002100:	bd08      	pop	{r3, pc}
 8002102:	bf00      	nop
 8002104:	08004054 	.word	0x08004054
 8002108:	08004072 	.word	0x08004072

0800210c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 800210c:	b508      	push	{r3, lr}
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 800210e:	f000 fee3 	bl	8002ed8 <USBD_LL_Start>

  return USBD_OK;
}
 8002112:	2000      	movs	r0, #0
 8002114:	bd08      	pop	{r3, pc}

08002116 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8002116:	b508      	push	{r3, lr}
  USBD_StatusTypeDef ret = USBD_FAIL;

  if (pdev->pClass != NULL)
 8002118:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800211c:	b90b      	cbnz	r3, 8002122 <USBD_SetClassConfig+0xc>
  USBD_StatusTypeDef ret = USBD_FAIL;
 800211e:	2002      	movs	r0, #2
 8002120:	bd08      	pop	{r3, pc}
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	4798      	blx	r3
 8002126:	2800      	cmp	r0, #0
 8002128:	d1f9      	bne.n	800211e <USBD_SetClassConfig+0x8>
      ret = USBD_OK;
    }
  }

  return ret;
}
 800212a:	bd08      	pop	{r3, pc}

0800212c <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800212c:	b508      	push	{r3, lr}
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800212e:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8002132:	685b      	ldr	r3, [r3, #4]
 8002134:	4798      	blx	r3

  return USBD_OK;
}
 8002136:	2000      	movs	r0, #0
 8002138:	bd08      	pop	{r3, pc}

0800213a <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800213a:	b538      	push	{r3, r4, r5, lr}
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800213c:	f500 752a 	add.w	r5, r0, #680	; 0x2a8
{
 8002140:	4604      	mov	r4, r0
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8002142:	4628      	mov	r0, r5
 8002144:	f000 fae2 	bl	800270c <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8002148:	2301      	movs	r3, #1

  pdev->ep0_data_len = pdev->request.wLength;

  switch (pdev->request.bmRequest & 0x1FU)
 800214a:	f894 12a8 	ldrb.w	r1, [r4, #680]	; 0x2a8
  pdev->ep0_state = USBD_EP0_SETUP;
 800214e:	f8c4 3294 	str.w	r3, [r4, #660]	; 0x294
  pdev->ep0_data_len = pdev->request.wLength;
 8002152:	f8b4 32ae 	ldrh.w	r3, [r4, #686]	; 0x2ae
 8002156:	f8c4 3298 	str.w	r3, [r4, #664]	; 0x298
  switch (pdev->request.bmRequest & 0x1FU)
 800215a:	f001 031f 	and.w	r3, r1, #31
 800215e:	2b01      	cmp	r3, #1
 8002160:	d00e      	beq.n	8002180 <USBD_LL_SetupStage+0x46>
 8002162:	d307      	bcc.n	8002174 <USBD_LL_SetupStage+0x3a>
 8002164:	2b02      	cmp	r3, #2
 8002166:	d010      	beq.n	800218a <USBD_LL_SetupStage+0x50>
    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
      break;

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8002168:	f001 0180 	and.w	r1, r1, #128	; 0x80
 800216c:	4620      	mov	r0, r4
 800216e:	f000 fedf 	bl	8002f30 <USBD_LL_StallEP>
      break;
 8002172:	e003      	b.n	800217c <USBD_LL_SetupStage+0x42>
      USBD_StdDevReq(pdev, &pdev->request);
 8002174:	4629      	mov	r1, r5
 8002176:	4620      	mov	r0, r4
 8002178:	f000 f8f6 	bl	8002368 <USBD_StdDevReq>
  }

  return USBD_OK;
}
 800217c:	2000      	movs	r0, #0
 800217e:	bd38      	pop	{r3, r4, r5, pc}
      USBD_StdItfReq(pdev, &pdev->request);
 8002180:	4629      	mov	r1, r5
 8002182:	4620      	mov	r0, r4
 8002184:	f000 fa14 	bl	80025b0 <USBD_StdItfReq>
      break;
 8002188:	e7f8      	b.n	800217c <USBD_LL_SetupStage+0x42>
      USBD_StdEPReq(pdev, &pdev->request);
 800218a:	4629      	mov	r1, r5
 800218c:	4620      	mov	r0, r4
 800218e:	f000 fa34 	bl	80025fa <USBD_StdEPReq>
      break;
 8002192:	e7f3      	b.n	800217c <USBD_LL_SetupStage+0x42>

08002194 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8002194:	b570      	push	{r4, r5, r6, lr}
 8002196:	4605      	mov	r5, r0
 8002198:	4616      	mov	r6, r2
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800219a:	bb49      	cbnz	r1, 80021f0 <USBD_LL_DataOutStage+0x5c>
  {
    pep = &pdev->ep_out[0];

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800219c:	f8d0 3294 	ldr.w	r3, [r0, #660]	; 0x294
 80021a0:	2b03      	cmp	r3, #3
 80021a2:	d11e      	bne.n	80021e2 <USBD_LL_DataOutStage+0x4e>
    {
      if (pep->rem_length > pep->maxpacket)
 80021a4:	f8d0 3160 	ldr.w	r3, [r0, #352]	; 0x160
 80021a8:	f8d0 2164 	ldr.w	r2, [r0, #356]	; 0x164
 80021ac:	4293      	cmp	r3, r2
 80021ae:	d90b      	bls.n	80021c8 <USBD_LL_DataOutStage+0x34>
      {
        pep->rem_length -= pep->maxpacket;
 80021b0:	1a9b      	subs	r3, r3, r2

        USBD_CtlContinueRx(pdev, pdata,
 80021b2:	429a      	cmp	r2, r3
        pep->rem_length -= pep->maxpacket;
 80021b4:	f8c0 3160 	str.w	r3, [r0, #352]	; 0x160
        USBD_CtlContinueRx(pdev, pdata,
 80021b8:	bf8c      	ite	hi
 80021ba:	b29a      	uxthhi	r2, r3
 80021bc:	b292      	uxthls	r2, r2
 80021be:	4631      	mov	r1, r6
 80021c0:	f000 fb03 	bl	80027ca <USBD_CtlContinueRx>
  {
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
 80021c4:	2000      	movs	r0, #0
    pdev->pClass->DataOut(pdev, epnum);
 80021c6:	bd70      	pop	{r4, r5, r6, pc}
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80021c8:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 80021cc:	691b      	ldr	r3, [r3, #16]
 80021ce:	b123      	cbz	r3, 80021da <USBD_LL_DataOutStage+0x46>
 80021d0:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 80021d4:	2a03      	cmp	r2, #3
 80021d6:	d100      	bne.n	80021da <USBD_LL_DataOutStage+0x46>
          pdev->pClass->EP0_RxReady(pdev);
 80021d8:	4798      	blx	r3
        USBD_CtlSendStatus(pdev);
 80021da:	4628      	mov	r0, r5
 80021dc:	f000 fafd 	bl	80027da <USBD_CtlSendStatus>
 80021e0:	e7f0      	b.n	80021c4 <USBD_LL_DataOutStage+0x30>
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 80021e2:	2b05      	cmp	r3, #5
 80021e4:	d1ee      	bne.n	80021c4 <USBD_LL_DataOutStage+0x30>
        pdev->ep0_state = USBD_EP0_IDLE;
 80021e6:	f8c5 1294 	str.w	r1, [r5, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 80021ea:	f000 fea1 	bl	8002f30 <USBD_LL_StallEP>
 80021ee:	e7e9      	b.n	80021c4 <USBD_LL_DataOutStage+0x30>
  else if ((pdev->pClass->DataOut != NULL) &&
 80021f0:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 80021f4:	699b      	ldr	r3, [r3, #24]
 80021f6:	b12b      	cbz	r3, 8002204 <USBD_LL_DataOutStage+0x70>
 80021f8:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 80021fc:	2a03      	cmp	r2, #3
 80021fe:	d101      	bne.n	8002204 <USBD_LL_DataOutStage+0x70>
    pdev->pClass->DataOut(pdev, epnum);
 8002200:	4798      	blx	r3
 8002202:	e7df      	b.n	80021c4 <USBD_LL_DataOutStage+0x30>
    return USBD_FAIL;
 8002204:	2002      	movs	r0, #2
}
 8002206:	bd70      	pop	{r4, r5, r6, pc}

08002208 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8002208:	b570      	push	{r4, r5, r6, lr}
 800220a:	4613      	mov	r3, r2
 800220c:	4604      	mov	r4, r0
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800220e:	460e      	mov	r6, r1
 8002210:	2900      	cmp	r1, #0
 8002212:	d147      	bne.n	80022a4 <USBD_LL_DataInStage+0x9c>
  {
    pep = &pdev->ep_in[0];

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8002214:	f8d0 2294 	ldr.w	r2, [r0, #660]	; 0x294
 8002218:	2a02      	cmp	r2, #2
 800221a:	d13c      	bne.n	8002296 <USBD_LL_DataInStage+0x8e>
    {
      if (pep->rem_length > pep->maxpacket)
 800221c:	6a05      	ldr	r5, [r0, #32]
 800221e:	6a42      	ldr	r2, [r0, #36]	; 0x24
 8002220:	4295      	cmp	r5, r2
 8002222:	d913      	bls.n	800224c <USBD_LL_DataInStage+0x44>
      {
        pep->rem_length -= pep->maxpacket;
 8002224:	1aaa      	subs	r2, r5, r2
 8002226:	6202      	str	r2, [r0, #32]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8002228:	4619      	mov	r1, r3
 800222a:	b292      	uxth	r2, r2
 800222c:	f000 fab6 	bl	800279c <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8002230:	4633      	mov	r3, r6
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
          pdev->ep0_data_len = 0U;

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8002232:	461a      	mov	r2, r3
 8002234:	4619      	mov	r1, r3
 8002236:	4620      	mov	r0, r4
 8002238:	f000 fec2 	bl	8002fc0 <USBD_LL_PrepareReceive>
      {
        USBD_LL_StallEP(pdev, 0x80U);
      }
    }

    if (pdev->dev_test_mode == 1U)
 800223c:	f894 32a0 	ldrb.w	r3, [r4, #672]	; 0x2a0
 8002240:	2000      	movs	r0, #0
 8002242:	2b01      	cmp	r3, #1
 8002244:	d13a      	bne.n	80022bc <USBD_LL_DataInStage+0xb4>
    {
      USBD_RunTestMode(pdev);
      pdev->dev_test_mode = 0U;
 8002246:	f884 02a0 	strb.w	r0, [r4, #672]	; 0x2a0
 800224a:	bd70      	pop	{r4, r5, r6, pc}
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800224c:	69c3      	ldr	r3, [r0, #28]
 800224e:	fbb3 f5f2 	udiv	r5, r3, r2
 8002252:	fb02 3515 	mls	r5, r2, r5, r3
 8002256:	b965      	cbnz	r5, 8002272 <USBD_LL_DataInStage+0x6a>
 8002258:	429a      	cmp	r2, r3
 800225a:	d80a      	bhi.n	8002272 <USBD_LL_DataInStage+0x6a>
            (pep->total_length >= pep->maxpacket) &&
 800225c:	f8d0 2298 	ldr.w	r2, [r0, #664]	; 0x298
 8002260:	4293      	cmp	r3, r2
 8002262:	d206      	bcs.n	8002272 <USBD_LL_DataInStage+0x6a>
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8002264:	462a      	mov	r2, r5
 8002266:	f000 fa99 	bl	800279c <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800226a:	f8c4 5298 	str.w	r5, [r4, #664]	; 0x298
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800226e:	462b      	mov	r3, r5
 8002270:	e7df      	b.n	8002232 <USBD_LL_DataInStage+0x2a>
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8002272:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
 8002276:	68db      	ldr	r3, [r3, #12]
 8002278:	b12b      	cbz	r3, 8002286 <USBD_LL_DataInStage+0x7e>
 800227a:	f894 229c 	ldrb.w	r2, [r4, #668]	; 0x29c
 800227e:	2a03      	cmp	r2, #3
 8002280:	d101      	bne.n	8002286 <USBD_LL_DataInStage+0x7e>
            pdev->pClass->EP0_TxSent(pdev);
 8002282:	4620      	mov	r0, r4
 8002284:	4798      	blx	r3
          USBD_LL_StallEP(pdev, 0x80U);
 8002286:	2180      	movs	r1, #128	; 0x80
 8002288:	4620      	mov	r0, r4
 800228a:	f000 fe51 	bl	8002f30 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800228e:	4620      	mov	r0, r4
 8002290:	f000 faae 	bl	80027f0 <USBD_CtlReceiveStatus>
 8002294:	e7d2      	b.n	800223c <USBD_LL_DataInStage+0x34>
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8002296:	f032 0304 	bics.w	r3, r2, #4
 800229a:	d1cf      	bne.n	800223c <USBD_LL_DataInStage+0x34>
        USBD_LL_StallEP(pdev, 0x80U);
 800229c:	2180      	movs	r1, #128	; 0x80
 800229e:	f000 fe47 	bl	8002f30 <USBD_LL_StallEP>
 80022a2:	e7cb      	b.n	800223c <USBD_LL_DataInStage+0x34>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 80022a4:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 80022a8:	695b      	ldr	r3, [r3, #20]
 80022aa:	b133      	cbz	r3, 80022ba <USBD_LL_DataInStage+0xb2>
 80022ac:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 80022b0:	2a03      	cmp	r2, #3
 80022b2:	d102      	bne.n	80022ba <USBD_LL_DataInStage+0xb2>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
  {
    pdev->pClass->DataIn(pdev, epnum);
 80022b4:	4798      	blx	r3
  {
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
 80022b6:	2000      	movs	r0, #0
    pdev->pClass->DataIn(pdev, epnum);
 80022b8:	bd70      	pop	{r4, r5, r6, pc}
    return USBD_FAIL;
 80022ba:	2002      	movs	r0, #2
}
 80022bc:	bd70      	pop	{r4, r5, r6, pc}

080022be <USBD_LL_Reset>:
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80022be:	2200      	movs	r2, #0
{
 80022c0:	b570      	push	{r4, r5, r6, lr}
 80022c2:	4604      	mov	r4, r0
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80022c4:	2501      	movs	r5, #1

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80022c6:	2640      	movs	r6, #64	; 0x40
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80022c8:	4611      	mov	r1, r2
 80022ca:	2340      	movs	r3, #64	; 0x40
 80022cc:	f000 fe12 	bl	8002ef4 <USBD_LL_OpenEP>

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80022d0:	4633      	mov	r3, r6
 80022d2:	2180      	movs	r1, #128	; 0x80
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80022d4:	f8c4 5158 	str.w	r5, [r4, #344]	; 0x158
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80022d8:	f8c4 6164 	str.w	r6, [r4, #356]	; 0x164
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80022dc:	2200      	movs	r2, #0
 80022de:	4620      	mov	r0, r4
 80022e0:	f000 fe08 	bl	8002ef4 <USBD_LL_OpenEP>

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
  pdev->ep0_state = USBD_EP0_IDLE;
 80022e4:	2100      	movs	r1, #0
  pdev->dev_config = 0U;
  pdev->dev_remote_wakeup = 0U;

  if (pdev->pClassData)
 80022e6:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80022ea:	61a5      	str	r5, [r4, #24]
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80022ec:	6266      	str	r6, [r4, #36]	; 0x24
  pdev->dev_state = USBD_STATE_DEFAULT;
 80022ee:	f884 529c 	strb.w	r5, [r4, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80022f2:	f8c4 1294 	str.w	r1, [r4, #660]	; 0x294
  pdev->dev_config = 0U;
 80022f6:	6061      	str	r1, [r4, #4]
  pdev->dev_remote_wakeup = 0U;
 80022f8:	f8c4 12a4 	str.w	r1, [r4, #676]	; 0x2a4
  if (pdev->pClassData)
 80022fc:	b123      	cbz	r3, 8002308 <USBD_LL_Reset+0x4a>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80022fe:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
 8002302:	4620      	mov	r0, r4
 8002304:	685b      	ldr	r3, [r3, #4]
 8002306:	4798      	blx	r3
  }

  return USBD_OK;
}
 8002308:	2000      	movs	r0, #0
 800230a:	bd70      	pop	{r4, r5, r6, pc}

0800230c <USBD_LL_SetSpeed>:
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
  pdev->dev_speed = speed;
 800230c:	7401      	strb	r1, [r0, #16]

  return USBD_OK;
}
 800230e:	2000      	movs	r0, #0
 8002310:	4770      	bx	lr

08002312 <USBD_LL_Suspend>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
  pdev->dev_old_state =  pdev->dev_state;
 8002312:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8002316:	f880 329d 	strb.w	r3, [r0, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800231a:	2304      	movs	r3, #4
 800231c:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c

  return USBD_OK;
}
 8002320:	2000      	movs	r0, #0
 8002322:	4770      	bx	lr

08002324 <USBD_LL_Resume>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8002324:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8002328:	2b04      	cmp	r3, #4
  {
    pdev->dev_state = pdev->dev_old_state;
 800232a:	bf04      	itt	eq
 800232c:	f890 329d 	ldrbeq.w	r3, [r0, #669]	; 0x29d
 8002330:	f880 329c 	strbeq.w	r3, [r0, #668]	; 0x29c
  }

  return USBD_OK;
}
 8002334:	2000      	movs	r0, #0
 8002336:	4770      	bx	lr

08002338 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8002338:	b508      	push	{r3, lr}
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800233a:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 800233e:	2a03      	cmp	r2, #3
 8002340:	d104      	bne.n	800234c <USBD_LL_SOF+0x14>
  {
    if (pdev->pClass->SOF != NULL)
 8002342:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8002346:	69db      	ldr	r3, [r3, #28]
 8002348:	b103      	cbz	r3, 800234c <USBD_LL_SOF+0x14>
    {
      pdev->pClass->SOF(pdev);
 800234a:	4798      	blx	r3
    }
  }

  return USBD_OK;
}
 800234c:	2000      	movs	r0, #0
 800234e:	bd08      	pop	{r3, pc}

08002350 <USBD_CtlError.constprop.1>:
* @param  pdev: device instance
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
 8002350:	b510      	push	{r4, lr}
 8002352:	4604      	mov	r4, r0
                   USBD_SetupReqTypedef *req)
{
  USBD_LL_StallEP(pdev, 0x80U);
 8002354:	2180      	movs	r1, #128	; 0x80
 8002356:	f000 fdeb 	bl	8002f30 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800235a:	4620      	mov	r0, r4
}
 800235c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_StallEP(pdev, 0U);
 8002360:	2100      	movs	r1, #0
 8002362:	f000 bde5 	b.w	8002f30 <USBD_LL_StallEP>
	...

08002368 <USBD_StdDevReq>:
{
 8002368:	b537      	push	{r0, r1, r2, r4, r5, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800236a:	780b      	ldrb	r3, [r1, #0]
{
 800236c:	4604      	mov	r4, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800236e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8002372:	2b20      	cmp	r3, #32
{
 8002374:	460d      	mov	r5, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8002376:	d012      	beq.n	800239e <USBD_StdDevReq+0x36>
 8002378:	2b40      	cmp	r3, #64	; 0x40
 800237a:	d010      	beq.n	800239e <USBD_StdDevReq+0x36>
 800237c:	2b00      	cmp	r3, #0
 800237e:	d15c      	bne.n	800243a <USBD_StdDevReq+0xd2>
      switch (req->bRequest)
 8002380:	784b      	ldrb	r3, [r1, #1]
 8002382:	2b09      	cmp	r3, #9
 8002384:	d858      	bhi.n	8002438 <USBD_StdDevReq+0xd0>
 8002386:	e8df f013 	tbh	[pc, r3, lsl #1]
 800238a:	00e9      	.short	0x00e9
 800238c:	00570105 	.word	0x00570105
 8002390:	005700fe 	.word	0x005700fe
 8002394:	00130084 	.word	0x00130084
 8002398:	00d20057 	.word	0x00d20057
 800239c:	00a0      	.short	0x00a0
      pdev->pClass->Setup(pdev, req);
 800239e:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
 80023a2:	4629      	mov	r1, r5
 80023a4:	689b      	ldr	r3, [r3, #8]
 80023a6:	4620      	mov	r0, r4
 80023a8:	4798      	blx	r3
}
 80023aa:	2000      	movs	r0, #0
 80023ac:	b003      	add	sp, #12
 80023ae:	bd30      	pop	{r4, r5, pc}
  uint16_t len = 0U;
 80023b0:	2300      	movs	r3, #0
 80023b2:	f8ad 3006 	strh.w	r3, [sp, #6]
  switch (req->wValue >> 8)
 80023b6:	884b      	ldrh	r3, [r1, #2]
 80023b8:	0a1a      	lsrs	r2, r3, #8
 80023ba:	3a01      	subs	r2, #1
 80023bc:	2a06      	cmp	r2, #6
 80023be:	d83b      	bhi.n	8002438 <USBD_StdDevReq+0xd0>
 80023c0:	e8df f002 	tbb	[pc, r2]
 80023c4:	3a2d2004 	.word	0x3a2d2004
 80023c8:	523a      	.short	0x523a
 80023ca:	5c          	.byte	0x5c
 80023cb:	00          	.byte	0x00
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80023cc:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 80023d0:	681b      	ldr	r3, [r3, #0]
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80023d2:	f10d 0106 	add.w	r1, sp, #6
 80023d6:	7c20      	ldrb	r0, [r4, #16]
 80023d8:	4798      	blx	r3
    if ((len != 0U) && (req->wLength != 0U))
 80023da:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 80023de:	b152      	cbz	r2, 80023f6 <USBD_StdDevReq+0x8e>
 80023e0:	88eb      	ldrh	r3, [r5, #6]
 80023e2:	b143      	cbz	r3, 80023f6 <USBD_StdDevReq+0x8e>
      len = MIN(len, req->wLength);
 80023e4:	429a      	cmp	r2, r3
 80023e6:	bf28      	it	cs
 80023e8:	461a      	movcs	r2, r3
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80023ea:	4601      	mov	r1, r0
 80023ec:	4620      	mov	r0, r4
      len = MIN(len, req->wLength);
 80023ee:	f8ad 2006 	strh.w	r2, [sp, #6]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80023f2:	f000 f9c6 	bl	8002782 <USBD_CtlSendData>
    if (req->wLength == 0U)
 80023f6:	88eb      	ldrh	r3, [r5, #6]
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d1d6      	bne.n	80023aa <USBD_StdDevReq+0x42>
        USBD_CtlSendStatus(pdev);
 80023fc:	4620      	mov	r0, r4
 80023fe:	f000 f9ec 	bl	80027da <USBD_CtlSendStatus>
 8002402:	e7d2      	b.n	80023aa <USBD_StdDevReq+0x42>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8002404:	7c02      	ldrb	r2, [r0, #16]
 8002406:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800240a:	b932      	cbnz	r2, 800241a <USBD_StdDevReq+0xb2>
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800240c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800240e:	f10d 0006 	add.w	r0, sp, #6
 8002412:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8002414:	2302      	movs	r3, #2
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8002416:	7043      	strb	r3, [r0, #1]
 8002418:	e7df      	b.n	80023da <USBD_StdDevReq+0x72>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800241a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800241c:	e7f7      	b.n	800240e <USBD_StdDevReq+0xa6>
      switch ((uint8_t)(req->wValue))
 800241e:	b2db      	uxtb	r3, r3
 8002420:	2b05      	cmp	r3, #5
 8002422:	d809      	bhi.n	8002438 <USBD_StdDevReq+0xd0>
 8002424:	e8df f003 	tbb	[pc, r3]
 8002428:	14100c03 	.word	0x14100c03
 800242c:	1c18      	.short	0x1c18
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800242e:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 8002432:	685b      	ldr	r3, [r3, #4]
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8002434:	2b00      	cmp	r3, #0
 8002436:	d1cc      	bne.n	80023d2 <USBD_StdDevReq+0x6a>
          USBD_CtlError(pdev, req);
 8002438:	4620      	mov	r0, r4
      USBD_CtlError(pdev, req);
 800243a:	f7ff ff89 	bl	8002350 <USBD_CtlError.constprop.1>
  return ret;
 800243e:	e7b4      	b.n	80023aa <USBD_StdDevReq+0x42>
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8002440:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 8002444:	689b      	ldr	r3, [r3, #8]
 8002446:	e7f5      	b.n	8002434 <USBD_StdDevReq+0xcc>
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8002448:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 800244c:	68db      	ldr	r3, [r3, #12]
 800244e:	e7f1      	b.n	8002434 <USBD_StdDevReq+0xcc>
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8002450:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 8002454:	691b      	ldr	r3, [r3, #16]
 8002456:	e7ed      	b.n	8002434 <USBD_StdDevReq+0xcc>
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8002458:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 800245c:	695b      	ldr	r3, [r3, #20]
 800245e:	e7e9      	b.n	8002434 <USBD_StdDevReq+0xcc>
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8002460:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 8002464:	699b      	ldr	r3, [r3, #24]
 8002466:	e7e5      	b.n	8002434 <USBD_StdDevReq+0xcc>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8002468:	7c03      	ldrb	r3, [r0, #16]
 800246a:	2b00      	cmp	r3, #0
 800246c:	d1e4      	bne.n	8002438 <USBD_StdDevReq+0xd0>
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800246e:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8002472:	f10d 0006 	add.w	r0, sp, #6
 8002476:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002478:	4798      	blx	r3
 800247a:	e7ae      	b.n	80023da <USBD_StdDevReq+0x72>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800247c:	7c03      	ldrb	r3, [r0, #16]
 800247e:	2b00      	cmp	r3, #0
 8002480:	d1da      	bne.n	8002438 <USBD_StdDevReq+0xd0>
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8002482:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8002486:	f10d 0006 	add.w	r0, sp, #6
 800248a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800248c:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800248e:	2307      	movs	r3, #7
 8002490:	e7c1      	b.n	8002416 <USBD_StdDevReq+0xae>
  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8002492:	888b      	ldrh	r3, [r1, #4]
 8002494:	2b00      	cmp	r3, #0
 8002496:	d1cf      	bne.n	8002438 <USBD_StdDevReq+0xd0>
 8002498:	88cb      	ldrh	r3, [r1, #6]
 800249a:	2b00      	cmp	r3, #0
 800249c:	d1cc      	bne.n	8002438 <USBD_StdDevReq+0xd0>
 800249e:	884d      	ldrh	r5, [r1, #2]
 80024a0:	2d7f      	cmp	r5, #127	; 0x7f
 80024a2:	d8c9      	bhi.n	8002438 <USBD_StdDevReq+0xd0>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80024a4:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80024a8:	b2e9      	uxtb	r1, r5
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80024aa:	2b03      	cmp	r3, #3
 80024ac:	d0c4      	beq.n	8002438 <USBD_StdDevReq+0xd0>
      pdev->dev_address = dev_addr;
 80024ae:	f880 129e 	strb.w	r1, [r0, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 80024b2:	f000 fd69 	bl	8002f88 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 80024b6:	4620      	mov	r0, r4
 80024b8:	f000 f98f 	bl	80027da <USBD_CtlSendStatus>
      if (dev_addr != 0U)
 80024bc:	b11d      	cbz	r5, 80024c6 <USBD_StdDevReq+0x15e>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80024be:	2302      	movs	r3, #2
        pdev->dev_state = USBD_STATE_DEFAULT;
 80024c0:	f884 329c 	strb.w	r3, [r4, #668]	; 0x29c
 80024c4:	e771      	b.n	80023aa <USBD_StdDevReq+0x42>
 80024c6:	2301      	movs	r3, #1
 80024c8:	e7fa      	b.n	80024c0 <USBD_StdDevReq+0x158>
  cfgidx = (uint8_t)(req->wValue);
 80024ca:	7889      	ldrb	r1, [r1, #2]
 80024cc:	4d37      	ldr	r5, [pc, #220]	; (80025ac <USBD_StdDevReq+0x244>)
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80024ce:	2901      	cmp	r1, #1
  cfgidx = (uint8_t)(req->wValue);
 80024d0:	7029      	strb	r1, [r5, #0]
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80024d2:	d8b1      	bhi.n	8002438 <USBD_StdDevReq+0xd0>
    switch (pdev->dev_state)
 80024d4:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80024d8:	2b02      	cmp	r3, #2
 80024da:	d008      	beq.n	80024ee <USBD_StdDevReq+0x186>
 80024dc:	2b03      	cmp	r3, #3
 80024de:	d014      	beq.n	800250a <USBD_StdDevReq+0x1a2>
        USBD_CtlError(pdev, req);
 80024e0:	f7ff ff36 	bl	8002350 <USBD_CtlError.constprop.1>
        USBD_ClrClassConfig(pdev, cfgidx);
 80024e4:	7829      	ldrb	r1, [r5, #0]
 80024e6:	4620      	mov	r0, r4
 80024e8:	f7ff fe20 	bl	800212c <USBD_ClrClassConfig>
 80024ec:	e75d      	b.n	80023aa <USBD_StdDevReq+0x42>
        if (cfgidx)
 80024ee:	2900      	cmp	r1, #0
 80024f0:	d084      	beq.n	80023fc <USBD_StdDevReq+0x94>
          pdev->dev_config = cfgidx;
 80024f2:	2101      	movs	r1, #1
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80024f4:	2303      	movs	r3, #3
          pdev->dev_config = cfgidx;
 80024f6:	6041      	str	r1, [r0, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80024f8:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80024fc:	4620      	mov	r0, r4
 80024fe:	f7ff fe0a 	bl	8002116 <USBD_SetClassConfig>
 8002502:	2802      	cmp	r0, #2
 8002504:	f47f af7a 	bne.w	80023fc <USBD_StdDevReq+0x94>
 8002508:	e796      	b.n	8002438 <USBD_StdDevReq+0xd0>
        if (cfgidx == 0U)
 800250a:	b931      	cbnz	r1, 800251a <USBD_StdDevReq+0x1b2>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800250c:	2302      	movs	r3, #2
          pdev->dev_config = cfgidx;
 800250e:	6041      	str	r1, [r0, #4]
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8002510:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
          USBD_ClrClassConfig(pdev, cfgidx);
 8002514:	f7ff fe0a 	bl	800212c <USBD_ClrClassConfig>
 8002518:	e770      	b.n	80023fc <USBD_StdDevReq+0x94>
        else if (cfgidx != pdev->dev_config)
 800251a:	6841      	ldr	r1, [r0, #4]
 800251c:	2901      	cmp	r1, #1
 800251e:	f43f af6d 	beq.w	80023fc <USBD_StdDevReq+0x94>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8002522:	b2c9      	uxtb	r1, r1
 8002524:	f7ff fe02 	bl	800212c <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8002528:	7829      	ldrb	r1, [r5, #0]
 800252a:	6061      	str	r1, [r4, #4]
 800252c:	e7e6      	b.n	80024fc <USBD_StdDevReq+0x194>
  if (req->wLength != 1U)
 800252e:	88ca      	ldrh	r2, [r1, #6]
 8002530:	2a01      	cmp	r2, #1
 8002532:	d181      	bne.n	8002438 <USBD_StdDevReq+0xd0>
    switch (pdev->dev_state)
 8002534:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8002538:	2b00      	cmp	r3, #0
 800253a:	f43f af7d 	beq.w	8002438 <USBD_StdDevReq+0xd0>
 800253e:	2b02      	cmp	r3, #2
 8002540:	d904      	bls.n	800254c <USBD_StdDevReq+0x1e4>
 8002542:	2b03      	cmp	r3, #3
 8002544:	f47f af78 	bne.w	8002438 <USBD_StdDevReq+0xd0>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8002548:	1d01      	adds	r1, r0, #4
 800254a:	e003      	b.n	8002554 <USBD_StdDevReq+0x1ec>
        pdev->dev_default_config = 0U;
 800254c:	4601      	mov	r1, r0
 800254e:	2300      	movs	r3, #0
 8002550:	f841 3f08 	str.w	r3, [r1, #8]!
      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8002554:	4620      	mov	r0, r4
 8002556:	f000 f914 	bl	8002782 <USBD_CtlSendData>
 800255a:	e726      	b.n	80023aa <USBD_StdDevReq+0x42>
  switch (pdev->dev_state)
 800255c:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8002560:	3b01      	subs	r3, #1
 8002562:	2b02      	cmp	r3, #2
 8002564:	f63f af68 	bhi.w	8002438 <USBD_StdDevReq+0xd0>
      if (req->wLength != 0x2U)
 8002568:	88cb      	ldrh	r3, [r1, #6]
 800256a:	2b02      	cmp	r3, #2
 800256c:	f47f af64 	bne.w	8002438 <USBD_StdDevReq+0xd0>
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8002570:	2301      	movs	r3, #1
 8002572:	60c3      	str	r3, [r0, #12]
      if (pdev->dev_remote_wakeup)
 8002574:	f8d0 32a4 	ldr.w	r3, [r0, #676]	; 0x2a4
 8002578:	b10b      	cbz	r3, 800257e <USBD_StdDevReq+0x216>
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800257a:	2303      	movs	r3, #3
 800257c:	60c3      	str	r3, [r0, #12]
      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800257e:	2202      	movs	r2, #2
 8002580:	f104 010c 	add.w	r1, r4, #12
 8002584:	e7e6      	b.n	8002554 <USBD_StdDevReq+0x1ec>
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8002586:	884b      	ldrh	r3, [r1, #2]
 8002588:	2b01      	cmp	r3, #1
 800258a:	f47f af0e 	bne.w	80023aa <USBD_StdDevReq+0x42>
        pdev->dev_remote_wakeup = 0U;
 800258e:	f8c4 32a4 	str.w	r3, [r4, #676]	; 0x2a4
 8002592:	e733      	b.n	80023fc <USBD_StdDevReq+0x94>
  switch (pdev->dev_state)
 8002594:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8002598:	3b01      	subs	r3, #1
 800259a:	2b02      	cmp	r3, #2
 800259c:	f63f af4c 	bhi.w	8002438 <USBD_StdDevReq+0xd0>
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80025a0:	884b      	ldrh	r3, [r1, #2]
 80025a2:	2b01      	cmp	r3, #1
 80025a4:	f47f af01 	bne.w	80023aa <USBD_StdDevReq+0x42>
        pdev->dev_remote_wakeup = 0U;
 80025a8:	2300      	movs	r3, #0
 80025aa:	e7f0      	b.n	800258e <USBD_StdDevReq+0x226>
 80025ac:	200001fc 	.word	0x200001fc

080025b0 <USBD_StdItfReq>:
{
 80025b0:	b538      	push	{r3, r4, r5, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80025b2:	780b      	ldrb	r3, [r1, #0]
{
 80025b4:	4604      	mov	r4, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80025b6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80025ba:	2b20      	cmp	r3, #32
{
 80025bc:	460d      	mov	r5, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80025be:	d002      	beq.n	80025c6 <USBD_StdItfReq+0x16>
 80025c0:	2b40      	cmp	r3, #64	; 0x40
 80025c2:	d000      	beq.n	80025c6 <USBD_StdItfReq+0x16>
 80025c4:	b9b3      	cbnz	r3, 80025f4 <USBD_StdItfReq+0x44>
      switch (pdev->dev_state)
 80025c6:	f894 329c 	ldrb.w	r3, [r4, #668]	; 0x29c
 80025ca:	3b01      	subs	r3, #1
 80025cc:	2b02      	cmp	r3, #2
 80025ce:	d810      	bhi.n	80025f2 <USBD_StdItfReq+0x42>
          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80025d0:	792b      	ldrb	r3, [r5, #4]
 80025d2:	2b01      	cmp	r3, #1
 80025d4:	d80d      	bhi.n	80025f2 <USBD_StdItfReq+0x42>
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80025d6:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
 80025da:	4629      	mov	r1, r5
 80025dc:	689b      	ldr	r3, [r3, #8]
 80025de:	4620      	mov	r0, r4
 80025e0:	4798      	blx	r3
            if ((req->wLength == 0U) && (ret == USBD_OK))
 80025e2:	88eb      	ldrh	r3, [r5, #6]
 80025e4:	b91b      	cbnz	r3, 80025ee <USBD_StdItfReq+0x3e>
 80025e6:	b910      	cbnz	r0, 80025ee <USBD_StdItfReq+0x3e>
              USBD_CtlSendStatus(pdev);
 80025e8:	4620      	mov	r0, r4
 80025ea:	f000 f8f6 	bl	80027da <USBD_CtlSendStatus>
}
 80025ee:	2000      	movs	r0, #0
 80025f0:	bd38      	pop	{r3, r4, r5, pc}
          USBD_CtlError(pdev, req);
 80025f2:	4620      	mov	r0, r4
      USBD_CtlError(pdev, req);
 80025f4:	f7ff feac 	bl	8002350 <USBD_CtlError.constprop.1>
      break;
 80025f8:	e7f9      	b.n	80025ee <USBD_StdItfReq+0x3e>

080025fa <USBD_StdEPReq>:
{
 80025fa:	b538      	push	{r3, r4, r5, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80025fc:	780a      	ldrb	r2, [r1, #0]
{
 80025fe:	4604      	mov	r4, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8002600:	f002 0260 	and.w	r2, r2, #96	; 0x60
 8002604:	2a20      	cmp	r2, #32
{
 8002606:	460b      	mov	r3, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8002608:	d013      	beq.n	8002632 <USBD_StdEPReq+0x38>
 800260a:	2a40      	cmp	r2, #64	; 0x40
 800260c:	d011      	beq.n	8002632 <USBD_StdEPReq+0x38>
 800260e:	b96a      	cbnz	r2, 800262c <USBD_StdEPReq+0x32>
      switch (req->bRequest)
 8002610:	785d      	ldrb	r5, [r3, #1]
  ep_addr  = LOBYTE(req->wIndex);
 8002612:	888a      	ldrh	r2, [r1, #4]
      switch (req->bRequest)
 8002614:	2d01      	cmp	r5, #1
  ep_addr  = LOBYTE(req->wIndex);
 8002616:	b2d1      	uxtb	r1, r2
      switch (req->bRequest)
 8002618:	d01f      	beq.n	800265a <USBD_StdEPReq+0x60>
 800261a:	d335      	bcc.n	8002688 <USBD_StdEPReq+0x8e>
 800261c:	2d03      	cmp	r5, #3
 800261e:	d105      	bne.n	800262c <USBD_StdEPReq+0x32>
          switch (pdev->dev_state)
 8002620:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 8002624:	2a02      	cmp	r2, #2
 8002626:	d026      	beq.n	8002676 <USBD_StdEPReq+0x7c>
 8002628:	2a03      	cmp	r2, #3
 800262a:	d00a      	beq.n	8002642 <USBD_StdEPReq+0x48>
      USBD_CtlError(pdev, req);
 800262c:	f7ff fe90 	bl	8002350 <USBD_CtlError.constprop.1>
      break;
 8002630:	e005      	b.n	800263e <USBD_StdEPReq+0x44>
      pdev->pClass->Setup(pdev, req);
 8002632:	f8d4 22b4 	ldr.w	r2, [r4, #692]	; 0x2b4
 8002636:	4619      	mov	r1, r3
 8002638:	6892      	ldr	r2, [r2, #8]
 800263a:	4620      	mov	r0, r4
 800263c:	4790      	blx	r2
}
 800263e:	2000      	movs	r0, #0
 8002640:	bd38      	pop	{r3, r4, r5, pc}
              if (req->wValue == USB_FEATURE_EP_HALT)
 8002642:	885a      	ldrh	r2, [r3, #2]
 8002644:	b92a      	cbnz	r2, 8002652 <USBD_StdEPReq+0x58>
                if ((ep_addr != 0x00U) &&
 8002646:	064a      	lsls	r2, r1, #25
 8002648:	d003      	beq.n	8002652 <USBD_StdEPReq+0x58>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800264a:	88db      	ldrh	r3, [r3, #6]
 800264c:	b90b      	cbnz	r3, 8002652 <USBD_StdEPReq+0x58>
                  USBD_LL_StallEP(pdev, ep_addr);
 800264e:	f000 fc6f 	bl	8002f30 <USBD_LL_StallEP>
              USBD_CtlSendStatus(pdev);
 8002652:	4620      	mov	r0, r4
 8002654:	f000 f8c1 	bl	80027da <USBD_CtlSendStatus>
              break;
 8002658:	e7f1      	b.n	800263e <USBD_StdEPReq+0x44>
          switch (pdev->dev_state)
 800265a:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 800265e:	2a02      	cmp	r2, #2
 8002660:	d009      	beq.n	8002676 <USBD_StdEPReq+0x7c>
 8002662:	2a03      	cmp	r2, #3
 8002664:	d1e2      	bne.n	800262c <USBD_StdEPReq+0x32>
              if (req->wValue == USB_FEATURE_EP_HALT)
 8002666:	885b      	ldrh	r3, [r3, #2]
 8002668:	2b00      	cmp	r3, #0
 800266a:	d1e8      	bne.n	800263e <USBD_StdEPReq+0x44>
                if ((ep_addr & 0x7FU) != 0x00U)
 800266c:	064d      	lsls	r5, r1, #25
 800266e:	d0f0      	beq.n	8002652 <USBD_StdEPReq+0x58>
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8002670:	f000 fc6c 	bl	8002f4c <USBD_LL_ClearStallEP>
 8002674:	e7ed      	b.n	8002652 <USBD_StdEPReq+0x58>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8002676:	064b      	lsls	r3, r1, #25
 8002678:	d016      	beq.n	80026a8 <USBD_StdEPReq+0xae>
                USBD_LL_StallEP(pdev, ep_addr);
 800267a:	f000 fc59 	bl	8002f30 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800267e:	2180      	movs	r1, #128	; 0x80
 8002680:	4620      	mov	r0, r4
 8002682:	f000 fc55 	bl	8002f30 <USBD_LL_StallEP>
 8002686:	e7da      	b.n	800263e <USBD_StdEPReq+0x44>
          switch (pdev->dev_state)
 8002688:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800268c:	2b02      	cmp	r3, #2
 800268e:	d00d      	beq.n	80026ac <USBD_StdEPReq+0xb2>
 8002690:	2b03      	cmp	r3, #3
 8002692:	d1cb      	bne.n	800262c <USBD_StdEPReq+0x32>
 8002694:	2314      	movs	r3, #20
              if ((ep_addr & 0x80U) == 0x80U)
 8002696:	f012 0f80 	tst.w	r2, #128	; 0x80
 800269a:	f001 020f 	and.w	r2, r1, #15
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800269e:	fb03 0202 	mla	r2, r3, r2, r0
              if ((ep_addr & 0x80U) == 0x80U)
 80026a2:	d014      	beq.n	80026ce <USBD_StdEPReq+0xd4>
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80026a4:	6992      	ldr	r2, [r2, #24]
 80026a6:	b9ea      	cbnz	r2, 80026e4 <USBD_StdEPReq+0xea>
                USBD_CtlError(pdev, req);
 80026a8:	4620      	mov	r0, r4
 80026aa:	e7bf      	b.n	800262c <USBD_StdEPReq+0x32>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80026ac:	0649      	lsls	r1, r1, #25
 80026ae:	d1fb      	bne.n	80026a8 <USBD_StdEPReq+0xae>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80026b0:	0613      	lsls	r3, r2, #24
              pep->status = 0x0000U;
 80026b2:	f04f 0300 	mov.w	r3, #0
              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80026b6:	f04f 0202 	mov.w	r2, #2
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80026ba:	bf4c      	ite	mi
 80026bc:	f100 0114 	addmi.w	r1, r0, #20
 80026c0:	f500 71aa 	addpl.w	r1, r0, #340	; 0x154
              pep->status = 0x0000U;
 80026c4:	600b      	str	r3, [r1, #0]
              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80026c6:	4620      	mov	r0, r4
 80026c8:	f000 f85b 	bl	8002782 <USBD_CtlSendData>
              break;
 80026cc:	e7b7      	b.n	800263e <USBD_StdEPReq+0x44>
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80026ce:	f8d2 2158 	ldr.w	r2, [r2, #344]	; 0x158
 80026d2:	2a00      	cmp	r2, #0
 80026d4:	d0e8      	beq.n	80026a8 <USBD_StdEPReq+0xae>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80026d6:	f001 057f 	and.w	r5, r1, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80026da:	fb03 0505 	mla	r5, r3, r5, r0
 80026de:	f505 75aa 	add.w	r5, r5, #340	; 0x154
 80026e2:	e004      	b.n	80026ee <USBD_StdEPReq+0xf4>
 80026e4:	f001 057f 	and.w	r5, r1, #127	; 0x7f
 80026e8:	fb05 3503 	mla	r5, r5, r3, r3
 80026ec:	4405      	add	r5, r0
              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80026ee:	f011 037f 	ands.w	r3, r1, #127	; 0x7f
 80026f2:	d103      	bne.n	80026fc <USBD_StdEPReq+0x102>
                pep->status = 0x0001U;
 80026f4:	602b      	str	r3, [r5, #0]
              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80026f6:	2202      	movs	r2, #2
 80026f8:	4629      	mov	r1, r5
 80026fa:	e7e4      	b.n	80026c6 <USBD_StdEPReq+0xcc>
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 80026fc:	4620      	mov	r0, r4
 80026fe:	f000 fc33 	bl	8002f68 <USBD_LL_IsStallEP>
 8002702:	b108      	cbz	r0, 8002708 <USBD_StdEPReq+0x10e>
                pep->status = 0x0001U;
 8002704:	2301      	movs	r3, #1
 8002706:	e7f5      	b.n	80026f4 <USBD_StdEPReq+0xfa>
                pep->status = 0x0000U;
 8002708:	6028      	str	r0, [r5, #0]
 800270a:	e7f4      	b.n	80026f6 <USBD_StdEPReq+0xfc>

0800270c <USBD_ParseSetupRequest>:
  req->bmRequest = *(uint8_t *)(pdata);
 800270c:	780b      	ldrb	r3, [r1, #0]
 800270e:	7003      	strb	r3, [r0, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8002710:	784b      	ldrb	r3, [r1, #1]
 8002712:	7043      	strb	r3, [r0, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8002714:	78ca      	ldrb	r2, [r1, #3]
 8002716:	788b      	ldrb	r3, [r1, #2]
 8002718:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800271c:	8043      	strh	r3, [r0, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800271e:	794a      	ldrb	r2, [r1, #5]
 8002720:	790b      	ldrb	r3, [r1, #4]
 8002722:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8002726:	8083      	strh	r3, [r0, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8002728:	79ca      	ldrb	r2, [r1, #7]
 800272a:	798b      	ldrb	r3, [r1, #6]
 800272c:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8002730:	80c3      	strh	r3, [r0, #6]
 8002732:	4770      	bx	lr

08002734 <USBD_CtlError>:
{
 8002734:	b510      	push	{r4, lr}
 8002736:	4604      	mov	r4, r0
  USBD_LL_StallEP(pdev, 0x80U);
 8002738:	2180      	movs	r1, #128	; 0x80
 800273a:	f000 fbf9 	bl	8002f30 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800273e:	4620      	mov	r0, r4
}
 8002740:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_StallEP(pdev, 0U);
 8002744:	2100      	movs	r1, #0
 8002746:	f000 bbf3 	b.w	8002f30 <USBD_LL_StallEP>

0800274a <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800274a:	b530      	push	{r4, r5, lr}
  uint8_t idx = 0U;

  if (desc != NULL)
 800274c:	b188      	cbz	r0, 8002772 <USBD_GetString+0x28>
 800274e:	4605      	mov	r5, r0
 8002750:	1a2b      	subs	r3, r5, r0
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
  uint8_t  len = 0U;

  while (*buf != '\0')
 8002752:	f815 4b01 	ldrb.w	r4, [r5], #1
 8002756:	b2db      	uxtb	r3, r3
 8002758:	2c00      	cmp	r4, #0
 800275a:	d1f9      	bne.n	8002750 <USBD_GetString+0x6>
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800275c:	3301      	adds	r3, #1
 800275e:	005b      	lsls	r3, r3, #1
 8002760:	8013      	strh	r3, [r2, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8002762:	700b      	strb	r3, [r1, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8002764:	2303      	movs	r3, #3
 8002766:	704b      	strb	r3, [r1, #1]
 8002768:	2302      	movs	r3, #2
 800276a:	3801      	subs	r0, #1
    while (*desc != '\0')
 800276c:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 8002770:	b905      	cbnz	r5, 8002774 <USBD_GetString+0x2a>
 8002772:	bd30      	pop	{r4, r5, pc}
      unicode[idx++] = *desc++;
 8002774:	1c5a      	adds	r2, r3, #1
 8002776:	54cd      	strb	r5, [r1, r3]
 8002778:	b2d2      	uxtb	r2, r2
      unicode[idx++] =  0U;
 800277a:	3302      	adds	r3, #2
 800277c:	b2db      	uxtb	r3, r3
 800277e:	548c      	strb	r4, [r1, r2]
 8002780:	e7f4      	b.n	800276c <USBD_GetString+0x22>

08002782 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8002782:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8002784:	2202      	movs	r2, #2
{
 8002786:	b510      	push	{r4, lr}
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8002788:	f8c0 2294 	str.w	r2, [r0, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800278c:	61c3      	str	r3, [r0, #28]
  pdev->ep_in[0].rem_length   = len;

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800278e:	460a      	mov	r2, r1
  pdev->ep_in[0].rem_length   = len;
 8002790:	6203      	str	r3, [r0, #32]
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8002792:	2100      	movs	r1, #0
 8002794:	f000 fc06 	bl	8002fa4 <USBD_LL_Transmit>

  return USBD_OK;
}
 8002798:	2000      	movs	r0, #0
 800279a:	bd10      	pop	{r4, pc}

0800279c <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800279c:	b508      	push	{r3, lr}
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800279e:	4613      	mov	r3, r2
 80027a0:	460a      	mov	r2, r1
 80027a2:	2100      	movs	r1, #0
 80027a4:	f000 fbfe 	bl	8002fa4 <USBD_LL_Transmit>

  return USBD_OK;
}
 80027a8:	2000      	movs	r0, #0
 80027aa:	bd08      	pop	{r3, pc}

080027ac <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 80027ac:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80027ae:	2203      	movs	r2, #3
{
 80027b0:	b510      	push	{r4, lr}
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80027b2:	f8c0 2294 	str.w	r2, [r0, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80027b6:	f8c0 315c 	str.w	r3, [r0, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80027ba:	460a      	mov	r2, r1
  pdev->ep_out[0].rem_length   = len;
 80027bc:	f8c0 3160 	str.w	r3, [r0, #352]	; 0x160
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80027c0:	2100      	movs	r1, #0
 80027c2:	f000 fbfd 	bl	8002fc0 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 80027c6:	2000      	movs	r0, #0
 80027c8:	bd10      	pop	{r4, pc}

080027ca <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 80027ca:	b508      	push	{r3, lr}
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80027cc:	4613      	mov	r3, r2
 80027ce:	460a      	mov	r2, r1
 80027d0:	2100      	movs	r1, #0
 80027d2:	f000 fbf5 	bl	8002fc0 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 80027d6:	2000      	movs	r0, #0
 80027d8:	bd08      	pop	{r3, pc}

080027da <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80027da:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80027dc:	2304      	movs	r3, #4
 80027de:	f8c0 3294 	str.w	r3, [r0, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80027e2:	2300      	movs	r3, #0
 80027e4:	461a      	mov	r2, r3
 80027e6:	4619      	mov	r1, r3
 80027e8:	f000 fbdc 	bl	8002fa4 <USBD_LL_Transmit>

  return USBD_OK;
}
 80027ec:	2000      	movs	r0, #0
 80027ee:	bd08      	pop	{r3, pc}

080027f0 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80027f0:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80027f2:	2305      	movs	r3, #5
 80027f4:	f8c0 3294 	str.w	r3, [r0, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80027f8:	2300      	movs	r3, #0
 80027fa:	461a      	mov	r2, r3
 80027fc:	4619      	mov	r1, r3
 80027fe:	f000 fbdf 	bl	8002fc0 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8002802:	2000      	movs	r0, #0
 8002804:	bd08      	pop	{r3, pc}

08002806 <SystemClock_Config>:
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002806:	2228      	movs	r2, #40	; 0x28
{
 8002808:	b570      	push	{r4, r5, r6, lr}
 800280a:	b094      	sub	sp, #80	; 0x50
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800280c:	eb0d 0002 	add.w	r0, sp, r2
 8002810:	2100      	movs	r1, #0
 8002812:	f000 fcb5 	bl	8003180 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002816:	2214      	movs	r2, #20
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002818:	2510      	movs	r5, #16
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800281a:	eb0d 0002 	add.w	r0, sp, r2
 800281e:	2100      	movs	r1, #0
 8002820:	f000 fcae 	bl	8003180 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002824:	462a      	mov	r2, r5
 8002826:	2100      	movs	r1, #0
 8002828:	a801      	add	r0, sp, #4
 800282a:	f000 fca9 	bl	8003180 <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800282e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002832:	2401      	movs	r4, #1
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002834:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002836:	2602      	movs	r6, #2
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002838:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 800283a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800283e:	a80a      	add	r0, sp, #40	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8002840:	9313      	str	r3, [sp, #76]	; 0x4c
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002842:	940a      	str	r4, [sp, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002844:	940e      	str	r4, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002846:	9611      	str	r6, [sp, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002848:	f7fe fa02 	bl	8000c50 <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800284c:	230f      	movs	r3, #15
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800284e:	f44f 62a0 	mov.w	r2, #1280	; 0x500
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002852:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002854:	2300      	movs	r3, #0
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8002856:	4621      	mov	r1, r4
 8002858:	a805      	add	r0, sp, #20
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800285a:	9307      	str	r3, [sp, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800285c:	9208      	str	r2, [sp, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800285e:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002860:	9606      	str	r6, [sp, #24]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8002862:	f7fe fbcf 	bl	8001004 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8002866:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800286a:	a801      	add	r0, sp, #4
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800286c:	9501      	str	r5, [sp, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 800286e:	9304      	str	r3, [sp, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002870:	f7fe fc66 	bl	8001140 <HAL_RCCEx_PeriphCLKConfig>
  {
    Error_Handler();
  }
}
 8002874:	b014      	add	sp, #80	; 0x50
 8002876:	bd70      	pop	{r4, r5, r6, pc}

08002878 <main>:
{
 8002878:	b580      	push	{r7, lr}
 800287a:	b08a      	sub	sp, #40	; 0x28
  HAL_Init();
 800287c:	f7fd fc8a 	bl	8000194 <HAL_Init>
  SystemClock_Config();
 8002880:	f7ff ffc1 	bl	8002806 <SystemClock_Config>
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002884:	2210      	movs	r2, #16
 8002886:	2100      	movs	r1, #0
 8002888:	a806      	add	r0, sp, #24
 800288a:	f000 fc79 	bl	8003180 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800288e:	4b4b      	ldr	r3, [pc, #300]	; (80029bc <main+0x144>)
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15 
 8002890:	f24f 01f0 	movw	r1, #61680	; 0xf0f0
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002894:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15 
 8002896:	484a      	ldr	r0, [pc, #296]	; (80029c0 <main+0x148>)
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002898:	f042 0220 	orr.w	r2, r2, #32
 800289c:	619a      	str	r2, [r3, #24]
 800289e:	699a      	ldr	r2, [r3, #24]
  /*Configure GPIO pins : PB12 PB13 PB14 PB15 
                           PB4 PB5 PB6 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15 
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028a0:	2400      	movs	r4, #0
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80028a2:	f002 0220 	and.w	r2, r2, #32
 80028a6:	9200      	str	r2, [sp, #0]
 80028a8:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80028aa:	699a      	ldr	r2, [r3, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80028ac:	2601      	movs	r6, #1
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80028ae:	f042 0208 	orr.w	r2, r2, #8
 80028b2:	619a      	str	r2, [r3, #24]
 80028b4:	699a      	ldr	r2, [r3, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028b6:	2702      	movs	r7, #2
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80028b8:	f002 0208 	and.w	r2, r2, #8
 80028bc:	9201      	str	r2, [sp, #4]
 80028be:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80028c0:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

  /*Configure GPIO pin : PC6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80028c2:	4d40      	ldr	r5, [pc, #256]	; (80029c4 <main+0x14c>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80028c4:	f042 0210 	orr.w	r2, r2, #16
 80028c8:	619a      	str	r2, [r3, #24]
 80028ca:	699a      	ldr	r2, [r3, #24]
 80028cc:	f002 0210 	and.w	r2, r2, #16
 80028d0:	9202      	str	r2, [sp, #8]
 80028d2:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80028d4:	699a      	ldr	r2, [r3, #24]
 80028d6:	f042 0204 	orr.w	r2, r2, #4
 80028da:	619a      	str	r2, [r3, #24]
 80028dc:	699b      	ldr	r3, [r3, #24]
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15 
 80028de:	2200      	movs	r2, #0
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80028e0:	f003 0304 	and.w	r3, r3, #4
 80028e4:	9303      	str	r3, [sp, #12]
 80028e6:	9b03      	ldr	r3, [sp, #12]
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15 
 80028e8:	f7fd fdc4 	bl	8000474 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(Led_STATUS_GPIO_Port, Led_STATUS_Pin, GPIO_PIN_RESET);
 80028ec:	2200      	movs	r2, #0
 80028ee:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80028f2:	4835      	ldr	r0, [pc, #212]	; (80029c8 <main+0x150>)
 80028f4:	f7fd fdbe 	bl	8000474 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15 
 80028f8:	f24f 03f0 	movw	r3, #61680	; 0xf0f0
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80028fc:	a906      	add	r1, sp, #24
 80028fe:	4830      	ldr	r0, [pc, #192]	; (80029c0 <main+0x148>)
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15 
 8002900:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002902:	9607      	str	r6, [sp, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002904:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002906:	9709      	str	r7, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002908:	f7fd fcd2 	bl	80002b0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 800290c:	2340      	movs	r3, #64	; 0x40
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800290e:	a906      	add	r1, sp, #24
 8002910:	482e      	ldr	r0, [pc, #184]	; (80029cc <main+0x154>)
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002912:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002914:	9507      	str	r5, [sp, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002916:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002918:	f7fd fcca 	bl	80002b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC7 PC8 PC9 PC10 
                           PC11 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10 
 800291c:	f44f 53fc 	mov.w	r3, #8064	; 0x1f80
                          |GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002920:	a906      	add	r1, sp, #24
 8002922:	482a      	ldr	r0, [pc, #168]	; (80029cc <main+0x154>)
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10 
 8002924:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002926:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002928:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800292a:	f7fd fcc1 	bl	80002b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : Led_STATUS_Pin */
  GPIO_InitStruct.Pin = Led_STATUS_Pin;
 800292e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(Led_STATUS_GPIO_Port, &GPIO_InitStruct);
 8002932:	a906      	add	r1, sp, #24
 8002934:	4824      	ldr	r0, [pc, #144]	; (80029c8 <main+0x150>)
  GPIO_InitStruct.Pin = Led_STATUS_Pin;
 8002936:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002938:	9607      	str	r6, [sp, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800293a:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800293c:	9709      	str	r7, [sp, #36]	; 0x24
  HAL_GPIO_Init(Led_STATUS_GPIO_Port, &GPIO_InitStruct);
 800293e:	f7fd fcb7 	bl	80002b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002942:	2308      	movs	r3, #8
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002944:	a906      	add	r1, sp, #24
 8002946:	481e      	ldr	r0, [pc, #120]	; (80029c0 <main+0x148>)
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002948:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800294a:	9507      	str	r5, [sp, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800294c:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800294e:	f7fd fcaf 	bl	80002b0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 1, 0);
 8002952:	4622      	mov	r2, r4
 8002954:	4631      	mov	r1, r6
 8002956:	2009      	movs	r0, #9
 8002958:	f7fd fc52 	bl	8000200 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 800295c:	2009      	movs	r0, #9
 800295e:	f7fd fc83 	bl	8000268 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 1, 0);
 8002962:	4622      	mov	r2, r4
 8002964:	4631      	mov	r1, r6
 8002966:	2017      	movs	r0, #23
 8002968:	f7fd fc4a 	bl	8000200 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800296c:	2017      	movs	r0, #23
 800296e:	f7fd fc7b 	bl	8000268 <HAL_NVIC_EnableIRQ>
  MX_USB_DEVICE_Init();
 8002972:	f000 f9c5 	bl	8002d00 <MX_USB_DEVICE_Init>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002976:	4621      	mov	r1, r4
 8002978:	2210      	movs	r2, #16
 800297a:	a806      	add	r0, sp, #24
 800297c:	f000 fc00 	bl	8003180 <memset>
  htim2.Init.Prescaler = 23999;
 8002980:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002984:	f645 53bf 	movw	r3, #23999	; 0x5dbf
  htim2.Instance = TIM2;
 8002988:	4d11      	ldr	r5, [pc, #68]	; (80029d0 <main+0x158>)
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800298a:	9404      	str	r4, [sp, #16]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800298c:	4628      	mov	r0, r5
  htim2.Init.Prescaler = 23999;
 800298e:	e885 000c 	stmia.w	r5, {r2, r3}
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002992:	9405      	str	r4, [sp, #20]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002994:	60ac      	str	r4, [r5, #8]
  htim2.Init.Period = 1;
 8002996:	60ee      	str	r6, [r5, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002998:	612c      	str	r4, [r5, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800299a:	61ac      	str	r4, [r5, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800299c:	f7fe fd28 	bl	80013f0 <HAL_TIM_Base_Init>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80029a0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80029a4:	a906      	add	r1, sp, #24
 80029a6:	4628      	mov	r0, r5
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80029a8:	9306      	str	r3, [sp, #24]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80029aa:	f7fe fd45 	bl	8001438 <HAL_TIM_ConfigClockSource>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80029ae:	a904      	add	r1, sp, #16
 80029b0:	4628      	mov	r0, r5
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80029b2:	9404      	str	r4, [sp, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80029b4:	9405      	str	r4, [sp, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80029b6:	f7fe fdd3 	bl	8001560 <HAL_TIMEx_MasterConfigSynchronization>
 80029ba:	e7fe      	b.n	80029ba <main+0x142>
 80029bc:	40021000 	.word	0x40021000
 80029c0:	40010c00 	.word	0x40010c00
 80029c4:	10110000 	.word	0x10110000
 80029c8:	40010800 	.word	0x40010800
 80029cc:	40011000 	.word	0x40011000
 80029d0:	20000444 	.word	0x20000444

080029d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80029d4:	4770      	bx	lr
	...

080029d8 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80029d8:	4b0e      	ldr	r3, [pc, #56]	; (8002a14 <HAL_MspInit+0x3c>)
{
 80029da:	b082      	sub	sp, #8
  __HAL_RCC_AFIO_CLK_ENABLE();
 80029dc:	699a      	ldr	r2, [r3, #24]
 80029de:	f042 0201 	orr.w	r2, r2, #1
 80029e2:	619a      	str	r2, [r3, #24]
 80029e4:	699a      	ldr	r2, [r3, #24]
 80029e6:	f002 0201 	and.w	r2, r2, #1
 80029ea:	9200      	str	r2, [sp, #0]
 80029ec:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80029ee:	69da      	ldr	r2, [r3, #28]
 80029f0:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80029f4:	61da      	str	r2, [r3, #28]
 80029f6:	69db      	ldr	r3, [r3, #28]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80029f8:	4a07      	ldr	r2, [pc, #28]	; (8002a18 <HAL_MspInit+0x40>)
  __HAL_RCC_PWR_CLK_ENABLE();
 80029fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029fe:	9301      	str	r3, [sp, #4]
 8002a00:	9b01      	ldr	r3, [sp, #4]
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002a02:	6853      	ldr	r3, [r2, #4]
 8002a04:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002a08:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002a0c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002a0e:	b002      	add	sp, #8
 8002a10:	4770      	bx	lr
 8002a12:	bf00      	nop
 8002a14:	40021000 	.word	0x40021000
 8002a18:	40010000 	.word	0x40010000

08002a1c <HAL_TIM_Base_MspInit>:
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  if(htim_base->Instance==TIM2)
 8002a1c:	6803      	ldr	r3, [r0, #0]
{
 8002a1e:	b507      	push	{r0, r1, r2, lr}
  if(htim_base->Instance==TIM2)
 8002a20:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a24:	d112      	bne.n	8002a4c <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002a26:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8002a2a:	69da      	ldr	r2, [r3, #28]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002a2c:	201c      	movs	r0, #28
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002a2e:	f042 0201 	orr.w	r2, r2, #1
 8002a32:	61da      	str	r2, [r3, #28]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002a34:	2200      	movs	r2, #0
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002a36:	69db      	ldr	r3, [r3, #28]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002a38:	4611      	mov	r1, r2
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002a3a:	f003 0301 	and.w	r3, r3, #1
 8002a3e:	9301      	str	r3, [sp, #4]
 8002a40:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002a42:	f7fd fbdd 	bl	8000200 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002a46:	201c      	movs	r0, #28
 8002a48:	f7fd fc0e 	bl	8000268 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002a4c:	b003      	add	sp, #12
 8002a4e:	f85d fb04 	ldr.w	pc, [sp], #4

08002a52 <NMI_Handler>:
 8002a52:	4770      	bx	lr

08002a54 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002a54:	e7fe      	b.n	8002a54 <HardFault_Handler>

08002a56 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002a56:	e7fe      	b.n	8002a56 <MemManage_Handler>

08002a58 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002a58:	e7fe      	b.n	8002a58 <BusFault_Handler>

08002a5a <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002a5a:	e7fe      	b.n	8002a5a <UsageFault_Handler>

08002a5c <SVC_Handler>:
 8002a5c:	4770      	bx	lr

08002a5e <DebugMon_Handler>:
 8002a5e:	4770      	bx	lr

08002a60 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002a60:	4770      	bx	lr

08002a62 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002a62:	f7fd bba9 	b.w	80001b8 <HAL_IncTick>
	...

08002a68 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8002a68:	b510      	push	{r4, lr}
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8002a6a:	2008      	movs	r0, #8
 8002a6c:	f7fd fd0e 	bl	800048c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  time_s = 0;
 8002a70:	2200      	movs	r2, #0

  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, 1);
 8002a72:	4c18      	ldr	r4, [pc, #96]	; (8002ad4 <EXTI3_IRQHandler+0x6c>)
  time_s = 0;
 8002a74:	4b18      	ldr	r3, [pc, #96]	; (8002ad8 <EXTI3_IRQHandler+0x70>)
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, 1);
 8002a76:	4620      	mov	r0, r4
  time_s = 0;
 8002a78:	601a      	str	r2, [r3, #0]
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, 1);
 8002a7a:	2110      	movs	r1, #16
 8002a7c:	2201      	movs	r2, #1
 8002a7e:	f7fd fcf9 	bl	8000474 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, 1);
 8002a82:	4620      	mov	r0, r4
 8002a84:	2201      	movs	r2, #1
 8002a86:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002a8a:	f7fd fcf3 	bl	8000474 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 1);
 8002a8e:	4620      	mov	r0, r4
 8002a90:	2201      	movs	r2, #1
 8002a92:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002a96:	f7fd fced 	bl	8000474 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, 1);
 8002a9a:	4620      	mov	r0, r4
 8002a9c:	2201      	movs	r2, #1
 8002a9e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002aa2:	f7fd fce7 	bl	8000474 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);
 8002aa6:	4620      	mov	r0, r4
 8002aa8:	2201      	movs	r2, #1
 8002aaa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002aae:	f7fd fce1 	bl	8000474 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, 1);
 8002ab2:	4620      	mov	r0, r4
 8002ab4:	2201      	movs	r2, #1
 8002ab6:	2120      	movs	r1, #32
 8002ab8:	f7fd fcdc 	bl	8000474 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, 1);
 8002abc:	4620      	mov	r0, r4
 8002abe:	2201      	movs	r2, #1
 8002ac0:	2140      	movs	r1, #64	; 0x40
 8002ac2:	f7fd fcd7 	bl	8000474 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, 1);
 8002ac6:	4620      	mov	r0, r4
  /* USER CODE END EXTI3_IRQn 1 */
}
 8002ac8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, 1);
 8002acc:	2201      	movs	r2, #1
 8002ace:	2180      	movs	r1, #128	; 0x80
 8002ad0:	f7fd bcd0 	b.w	8000474 <HAL_GPIO_WritePin>
 8002ad4:	40010c00 	.word	0x40010c00
 8002ad8:	2000020c 	.word	0x2000020c

08002adc <USB_LP_CAN1_RX0_IRQHandler>:
void USB_LP_CAN1_RX0_IRQHandler(void)
{
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8002adc:	4801      	ldr	r0, [pc, #4]	; (8002ae4 <USB_LP_CAN1_RX0_IRQHandler+0x8>)
 8002ade:	f7fd be13 	b.w	8000708 <HAL_PCD_IRQHandler>
 8002ae2:	bf00      	nop
 8002ae4:	20000f18 	.word	0x20000f18

08002ae8 <EXTI9_5_IRQHandler>:
void EXTI9_5_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8002ae8:	2040      	movs	r0, #64	; 0x40
 8002aea:	f7fd bccf 	b.w	800048c <HAL_GPIO_EXTI_IRQHandler>
	...

08002af0 <HAL_GPIO_EXTI_Callback>:
  /* USER CODE END EXTI9_5_IRQn 1 */
}

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
	if (GPIO_Pin == GPIO_PIN_6)
 8002af0:	2840      	cmp	r0, #64	; 0x40
 8002af2:	d10b      	bne.n	8002b0c <HAL_GPIO_EXTI_Callback+0x1c>
		if (time_after_btn > 50){
 8002af4:	4b06      	ldr	r3, [pc, #24]	; (8002b10 <HAL_GPIO_EXTI_Callback+0x20>)
 8002af6:	681a      	ldr	r2, [r3, #0]
 8002af8:	2a32      	cmp	r2, #50	; 0x32
 8002afa:	dd07      	ble.n	8002b0c <HAL_GPIO_EXTI_Callback+0x1c>
			time_after_btn = 0;
 8002afc:	2200      	movs	r2, #0
 8002afe:	601a      	str	r2, [r3, #0]
			flag_timer_pause = !flag_timer_pause;
 8002b00:	4a04      	ldr	r2, [pc, #16]	; (8002b14 <HAL_GPIO_EXTI_Callback+0x24>)
 8002b02:	6813      	ldr	r3, [r2, #0]
 8002b04:	fab3 f383 	clz	r3, r3
 8002b08:	095b      	lsrs	r3, r3, #5
 8002b0a:	6013      	str	r3, [r2, #0]
 8002b0c:	4770      	bx	lr
 8002b0e:	bf00      	nop
 8002b10:	20000208 	.word	0x20000208
 8002b14:	20000200 	.word	0x20000200

08002b18 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002b18:	b538      	push	{r3, r4, r5, lr}
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002b1a:	483d      	ldr	r0, [pc, #244]	; (8002c10 <TIM2_IRQHandler+0xf8>)
 8002b1c:	f7fe fb8d 	bl	800123a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */
  if (glob_time > 500)
 8002b20:	4a3c      	ldr	r2, [pc, #240]	; (8002c14 <TIM2_IRQHandler+0xfc>)
 8002b22:	6813      	ldr	r3, [r2, #0]
 8002b24:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002b28:	dd6c      	ble.n	8002c04 <TIM2_IRQHandler+0xec>
  {
	  glob_time = 0;
 8002b2a:	2300      	movs	r3, #0
	  HAL_GPIO_TogglePin(Led_STATUS_GPIO_Port, Led_STATUS_Pin);
 8002b2c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002b30:	4839      	ldr	r0, [pc, #228]	; (8002c18 <TIM2_IRQHandler+0x100>)
	  glob_time = 0;
 8002b32:	6013      	str	r3, [r2, #0]
	  HAL_GPIO_TogglePin(Led_STATUS_GPIO_Port, Led_STATUS_Pin);
 8002b34:	f7fd fca3 	bl	800047e <HAL_GPIO_TogglePin>
  } else glob_time++;

  if (time_after_btn < 51)
 8002b38:	4a38      	ldr	r2, [pc, #224]	; (8002c1c <TIM2_IRQHandler+0x104>)
	  time_after_btn++;

  if ((time_sec_ctr >= 1000) & (~flag_timer_pause)) {
 8002b3a:	4939      	ldr	r1, [pc, #228]	; (8002c20 <TIM2_IRQHandler+0x108>)
  if (time_after_btn < 51)
 8002b3c:	6813      	ldr	r3, [r2, #0]
 8002b3e:	2b32      	cmp	r3, #50	; 0x32
	  time_after_btn++;
 8002b40:	bfdc      	itt	le
 8002b42:	3301      	addle	r3, #1
 8002b44:	6013      	strle	r3, [r2, #0]
  if ((time_sec_ctr >= 1000) & (~flag_timer_pause)) {
 8002b46:	680b      	ldr	r3, [r1, #0]
 8002b48:	4a36      	ldr	r2, [pc, #216]	; (8002c24 <TIM2_IRQHandler+0x10c>)
 8002b4a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002b4e:	6810      	ldr	r0, [r2, #0]
 8002b50:	bfb4      	ite	lt
 8002b52:	2200      	movlt	r2, #0
 8002b54:	2201      	movge	r2, #1
 8002b56:	4382      	bics	r2, r0
 8002b58:	d057      	beq.n	8002c0a <TIM2_IRQHandler+0xf2>
	  time_s++;
 8002b5a:	4c33      	ldr	r4, [pc, #204]	; (8002c28 <TIM2_IRQHandler+0x110>)
	  time_sec_ctr = 0;
 8002b5c:	2500      	movs	r5, #0
	  time_s++;
 8002b5e:	6822      	ldr	r2, [r4, #0]
	  time_sec_ctr = 0;
 8002b60:	600d      	str	r5, [r1, #0]
	  time_s++;
 8002b62:	3201      	adds	r2, #1
 8002b64:	6022      	str	r2, [r4, #0]

	  	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, !((time_s & 1)));
 8002b66:	43d2      	mvns	r2, r2
 8002b68:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002b6c:	f002 0201 	and.w	r2, r2, #1
 8002b70:	482e      	ldr	r0, [pc, #184]	; (8002c2c <TIM2_IRQHandler+0x114>)
 8002b72:	f7fd fc7f 	bl	8000474 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, !((time_s >> 1) & 1));
 8002b76:	6822      	ldr	r2, [r4, #0]
 8002b78:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002b7c:	f082 0202 	eor.w	r2, r2, #2
 8002b80:	f3c2 0240 	ubfx	r2, r2, #1, #1
 8002b84:	4829      	ldr	r0, [pc, #164]	; (8002c2c <TIM2_IRQHandler+0x114>)
 8002b86:	f7fd fc75 	bl	8000474 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, !((time_s >> 2) & 1));
 8002b8a:	6822      	ldr	r2, [r4, #0]
 8002b8c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002b90:	f082 0204 	eor.w	r2, r2, #4
 8002b94:	f3c2 0280 	ubfx	r2, r2, #2, #1
 8002b98:	4824      	ldr	r0, [pc, #144]	; (8002c2c <TIM2_IRQHandler+0x114>)
 8002b9a:	f7fd fc6b 	bl	8000474 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, !((time_s >> 3) & 1));
 8002b9e:	6822      	ldr	r2, [r4, #0]
 8002ba0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002ba4:	f082 0208 	eor.w	r2, r2, #8
 8002ba8:	f3c2 02c0 	ubfx	r2, r2, #3, #1
 8002bac:	481f      	ldr	r0, [pc, #124]	; (8002c2c <TIM2_IRQHandler+0x114>)
 8002bae:	f7fd fc61 	bl	8000474 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, !((time_s >> 4) & 1));
 8002bb2:	6822      	ldr	r2, [r4, #0]
 8002bb4:	2120      	movs	r1, #32
 8002bb6:	f082 0210 	eor.w	r2, r2, #16
 8002bba:	f3c2 1200 	ubfx	r2, r2, #4, #1
 8002bbe:	481b      	ldr	r0, [pc, #108]	; (8002c2c <TIM2_IRQHandler+0x114>)
 8002bc0:	f7fd fc58 	bl	8000474 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, !((time_s >> 5) & 1));
 8002bc4:	6822      	ldr	r2, [r4, #0]
 8002bc6:	2140      	movs	r1, #64	; 0x40
 8002bc8:	f082 0220 	eor.w	r2, r2, #32
 8002bcc:	f3c2 1240 	ubfx	r2, r2, #5, #1
 8002bd0:	4816      	ldr	r0, [pc, #88]	; (8002c2c <TIM2_IRQHandler+0x114>)
 8002bd2:	f7fd fc4f 	bl	8000474 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, !((time_s >> 6) & 1));
 8002bd6:	6822      	ldr	r2, [r4, #0]
 8002bd8:	2180      	movs	r1, #128	; 0x80
 8002bda:	f082 0240 	eor.w	r2, r2, #64	; 0x40
 8002bde:	f3c2 1280 	ubfx	r2, r2, #6, #1
 8002be2:	4812      	ldr	r0, [pc, #72]	; (8002c2c <TIM2_IRQHandler+0x114>)
 8002be4:	f7fd fc46 	bl	8000474 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, !((time_s >> 7) & 1));
 8002be8:	6822      	ldr	r2, [r4, #0]
 8002bea:	2110      	movs	r1, #16
 8002bec:	f082 0280 	eor.w	r2, r2, #128	; 0x80
 8002bf0:	f3c2 12c0 	ubfx	r2, r2, #7, #1
 8002bf4:	480d      	ldr	r0, [pc, #52]	; (8002c2c <TIM2_IRQHandler+0x114>)
 8002bf6:	f7fd fc3d 	bl	8000474 <HAL_GPIO_WritePin>

		if (time_s >= 256) time_s = 0;
 8002bfa:	6823      	ldr	r3, [r4, #0]
 8002bfc:	2bff      	cmp	r3, #255	; 0xff
 8002bfe:	dd06      	ble.n	8002c0e <TIM2_IRQHandler+0xf6>
 8002c00:	6025      	str	r5, [r4, #0]
 8002c02:	bd38      	pop	{r3, r4, r5, pc}
  } else glob_time++;
 8002c04:	3301      	adds	r3, #1
 8002c06:	6013      	str	r3, [r2, #0]
 8002c08:	e796      	b.n	8002b38 <TIM2_IRQHandler+0x20>
  } else time_sec_ctr++;
 8002c0a:	3301      	adds	r3, #1
 8002c0c:	600b      	str	r3, [r1, #0]
 8002c0e:	bd38      	pop	{r3, r4, r5, pc}
 8002c10:	20000444 	.word	0x20000444
 8002c14:	20000204 	.word	0x20000204
 8002c18:	40010800 	.word	0x40010800
 8002c1c:	20000208 	.word	0x20000208
 8002c20:	20000210 	.word	0x20000210
 8002c24:	20000200 	.word	0x20000200
 8002c28:	2000020c 	.word	0x2000020c
 8002c2c:	40010c00 	.word	0x40010c00

08002c30 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002c30:	b570      	push	{r4, r5, r6, lr}
 8002c32:	460e      	mov	r6, r1
 8002c34:	4615      	mov	r5, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c36:	460c      	mov	r4, r1
 8002c38:	1ba3      	subs	r3, r4, r6
 8002c3a:	429d      	cmp	r5, r3
 8002c3c:	dc01      	bgt.n	8002c42 <_read+0x12>
	{
		*ptr++ = __io_getchar();
	}

return len;
}
 8002c3e:	4628      	mov	r0, r5
 8002c40:	bd70      	pop	{r4, r5, r6, pc}
		*ptr++ = __io_getchar();
 8002c42:	f3af 8000 	nop.w
 8002c46:	f804 0b01 	strb.w	r0, [r4], #1
 8002c4a:	e7f5      	b.n	8002c38 <_read+0x8>

08002c4c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002c4c:	b570      	push	{r4, r5, r6, lr}
 8002c4e:	460e      	mov	r6, r1
 8002c50:	4615      	mov	r5, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c52:	460c      	mov	r4, r1
 8002c54:	1ba3      	subs	r3, r4, r6
 8002c56:	429d      	cmp	r5, r3
 8002c58:	dc01      	bgt.n	8002c5e <_write+0x12>
	{
		__io_putchar(*ptr++);
	}
	return len;
}
 8002c5a:	4628      	mov	r0, r5
 8002c5c:	bd70      	pop	{r4, r5, r6, pc}
		__io_putchar(*ptr++);
 8002c5e:	f814 0b01 	ldrb.w	r0, [r4], #1
 8002c62:	f3af 8000 	nop.w
 8002c66:	e7f5      	b.n	8002c54 <_write+0x8>

08002c68 <_sbrk>:

caddr_t _sbrk(int incr)
{
 8002c68:	b508      	push	{r3, lr}
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8002c6a:	4b0a      	ldr	r3, [pc, #40]	; (8002c94 <_sbrk+0x2c>)
{
 8002c6c:	4602      	mov	r2, r0
	if (heap_end == 0)
 8002c6e:	6819      	ldr	r1, [r3, #0]
 8002c70:	b909      	cbnz	r1, 8002c76 <_sbrk+0xe>
		heap_end = &end;
 8002c72:	4909      	ldr	r1, [pc, #36]	; (8002c98 <_sbrk+0x30>)
 8002c74:	6019      	str	r1, [r3, #0]

	prev_heap_end = heap_end;
	if (heap_end + incr > stack_ptr)
 8002c76:	4669      	mov	r1, sp
	prev_heap_end = heap_end;
 8002c78:	6818      	ldr	r0, [r3, #0]
	if (heap_end + incr > stack_ptr)
 8002c7a:	4402      	add	r2, r0
 8002c7c:	428a      	cmp	r2, r1
 8002c7e:	d906      	bls.n	8002c8e <_sbrk+0x26>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 8002c80:	f000 fa54 	bl	800312c <__errno>
 8002c84:	230c      	movs	r3, #12
 8002c86:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 8002c88:	f04f 30ff 	mov.w	r0, #4294967295
 8002c8c:	bd08      	pop	{r3, pc}
	}

	heap_end += incr;
 8002c8e:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap_end;
}
 8002c90:	bd08      	pop	{r3, pc}
 8002c92:	bf00      	nop
 8002c94:	20000214 	.word	0x20000214
 8002c98:	20001388 	.word	0x20001388

08002c9c <_close>:

int _close(int file)
{
	return -1;
}
 8002c9c:	f04f 30ff 	mov.w	r0, #4294967295
 8002ca0:	4770      	bx	lr

08002ca2 <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 8002ca2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	return 0;
}
 8002ca6:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
 8002ca8:	604b      	str	r3, [r1, #4]
}
 8002caa:	4770      	bx	lr

08002cac <_isatty>:

int _isatty(int file)
{
	return 1;
}
 8002cac:	2001      	movs	r0, #1
 8002cae:	4770      	bx	lr

08002cb0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 8002cb0:	2000      	movs	r0, #0
 8002cb2:	4770      	bx	lr

08002cb4 <SystemInit>:
  */
void SystemInit (void)
{
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8002cb4:	4b0f      	ldr	r3, [pc, #60]	; (8002cf4 <SystemInit+0x40>)
 8002cb6:	681a      	ldr	r2, [r3, #0]
 8002cb8:	f042 0201 	orr.w	r2, r2, #1
 8002cbc:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8002cbe:	6859      	ldr	r1, [r3, #4]
 8002cc0:	4a0d      	ldr	r2, [pc, #52]	; (8002cf8 <SystemInit+0x44>)
 8002cc2:	400a      	ands	r2, r1
 8002cc4:	605a      	str	r2, [r3, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8002cc6:	681a      	ldr	r2, [r3, #0]
 8002cc8:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8002ccc:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002cd0:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002cd2:	681a      	ldr	r2, [r3, #0]
 8002cd4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002cd8:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8002cda:	685a      	ldr	r2, [r3, #4]
 8002cdc:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 8002ce0:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8002ce2:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8002ce6:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8002ce8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002cec:	4b03      	ldr	r3, [pc, #12]	; (8002cfc <SystemInit+0x48>)
 8002cee:	609a      	str	r2, [r3, #8]
 8002cf0:	4770      	bx	lr
 8002cf2:	bf00      	nop
 8002cf4:	40021000 	.word	0x40021000
 8002cf8:	f8ff0000 	.word	0xf8ff0000
 8002cfc:	e000ed00 	.word	0xe000ed00

08002d00 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8002d00:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8002d02:	2200      	movs	r2, #0
 8002d04:	490e      	ldr	r1, [pc, #56]	; (8002d40 <MX_USB_DEVICE_Init+0x40>)
 8002d06:	480f      	ldr	r0, [pc, #60]	; (8002d44 <MX_USB_DEVICE_Init+0x44>)
 8002d08:	f7ff f9c8 	bl	800209c <USBD_Init>
 8002d0c:	b108      	cbz	r0, 8002d12 <MX_USB_DEVICE_Init+0x12>
  {
    Error_Handler();
 8002d0e:	f7ff fe61 	bl	80029d4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8002d12:	490d      	ldr	r1, [pc, #52]	; (8002d48 <MX_USB_DEVICE_Init+0x48>)
 8002d14:	480b      	ldr	r0, [pc, #44]	; (8002d44 <MX_USB_DEVICE_Init+0x44>)
 8002d16:	f7ff f9e3 	bl	80020e0 <USBD_RegisterClass>
 8002d1a:	b108      	cbz	r0, 8002d20 <MX_USB_DEVICE_Init+0x20>
  {
    Error_Handler();
 8002d1c:	f7ff fe5a 	bl	80029d4 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8002d20:	490a      	ldr	r1, [pc, #40]	; (8002d4c <MX_USB_DEVICE_Init+0x4c>)
 8002d22:	4808      	ldr	r0, [pc, #32]	; (8002d44 <MX_USB_DEVICE_Init+0x44>)
 8002d24:	f7ff f991 	bl	800204a <USBD_CDC_RegisterInterface>
 8002d28:	b108      	cbz	r0, 8002d2e <MX_USB_DEVICE_Init+0x2e>
  {
    Error_Handler();
 8002d2a:	f7ff fe53 	bl	80029d4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8002d2e:	4805      	ldr	r0, [pc, #20]	; (8002d44 <MX_USB_DEVICE_Init+0x44>)
 8002d30:	f7ff f9ec 	bl	800210c <USBD_Start>
 8002d34:	b118      	cbz	r0, 8002d3e <MX_USB_DEVICE_Init+0x3e>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8002d36:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8002d3a:	f7ff be4b 	b.w	80029d4 <Error_Handler>
 8002d3e:	bd08      	pop	{r3, pc}
 8002d40:	2000012c 	.word	0x2000012c
 8002d44:	20000484 	.word	0x20000484
 8002d48:	20000008 	.word	0x20000008
 8002d4c:	2000011c 	.word	0x2000011c

08002d50 <CDC_DeInit_FS>:
static int8_t CDC_DeInit_FS(void)
{
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
  /* USER CODE END 4 */
}
 8002d50:	2000      	movs	r0, #0
 8002d52:	4770      	bx	lr

08002d54 <CDC_Control_FS>:
    break;
  }

  return (USBD_OK);
  /* USER CODE END 5 */
}
 8002d54:	2000      	movs	r0, #0
 8002d56:	4770      	bx	lr

08002d58 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8002d58:	b510      	push	{r4, lr}
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8002d5a:	4c05      	ldr	r4, [pc, #20]	; (8002d70 <CDC_Receive_FS+0x18>)
 8002d5c:	4601      	mov	r1, r0
 8002d5e:	4620      	mov	r0, r4
 8002d60:	f7ff f982 	bl	8002068 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8002d64:	4620      	mov	r0, r4
 8002d66:	f7ff f985 	bl	8002074 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
  /* USER CODE END 6 */
}
 8002d6a:	2000      	movs	r0, #0
 8002d6c:	bd10      	pop	{r4, pc}
 8002d6e:	bf00      	nop
 8002d70:	20000484 	.word	0x20000484

08002d74 <CDC_Init_FS>:
{
 8002d74:	b510      	push	{r4, lr}
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8002d76:	4c06      	ldr	r4, [pc, #24]	; (8002d90 <CDC_Init_FS+0x1c>)
 8002d78:	2200      	movs	r2, #0
 8002d7a:	4906      	ldr	r1, [pc, #24]	; (8002d94 <CDC_Init_FS+0x20>)
 8002d7c:	4620      	mov	r0, r4
 8002d7e:	f7ff f96b 	bl	8002058 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8002d82:	4905      	ldr	r1, [pc, #20]	; (8002d98 <CDC_Init_FS+0x24>)
 8002d84:	4620      	mov	r0, r4
 8002d86:	f7ff f96f 	bl	8002068 <USBD_CDC_SetRxBuffer>
}
 8002d8a:	2000      	movs	r0, #0
 8002d8c:	bd10      	pop	{r4, pc}
 8002d8e:	bf00      	nop
 8002d90:	20000484 	.word	0x20000484
 8002d94:	20000b30 	.word	0x20000b30
 8002d98:	20000748 	.word	0x20000748

08002d9c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8002d9c:	b507      	push	{r0, r1, r2, lr}
  if(pcdHandle->Instance==USB)
 8002d9e:	4b0d      	ldr	r3, [pc, #52]	; (8002dd4 <HAL_PCD_MspInit+0x38>)
 8002da0:	6802      	ldr	r2, [r0, #0]
 8002da2:	429a      	cmp	r2, r3
 8002da4:	d112      	bne.n	8002dcc <HAL_PCD_MspInit+0x30>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8002da6:	f503 33da 	add.w	r3, r3, #111616	; 0x1b400
 8002daa:	69da      	ldr	r2, [r3, #28]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8002dac:	2014      	movs	r0, #20
    __HAL_RCC_USB_CLK_ENABLE();
 8002dae:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002db2:	61da      	str	r2, [r3, #28]
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8002db4:	2200      	movs	r2, #0
    __HAL_RCC_USB_CLK_ENABLE();
 8002db6:	69db      	ldr	r3, [r3, #28]
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8002db8:	4611      	mov	r1, r2
    __HAL_RCC_USB_CLK_ENABLE();
 8002dba:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002dbe:	9301      	str	r3, [sp, #4]
 8002dc0:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8002dc2:	f7fd fa1d 	bl	8000200 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8002dc6:	2014      	movs	r0, #20
 8002dc8:	f7fd fa4e 	bl	8000268 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8002dcc:	b003      	add	sp, #12
 8002dce:	f85d fb04 	ldr.w	pc, [sp], #4
 8002dd2:	bf00      	nop
 8002dd4:	40005c00 	.word	0x40005c00

08002dd8 <HAL_PCD_SetupStageCallback>:
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8002dd8:	f500 710c 	add.w	r1, r0, #560	; 0x230
 8002ddc:	f8d0 0268 	ldr.w	r0, [r0, #616]	; 0x268
 8002de0:	f7ff b9ab 	b.w	800213a <USBD_LL_SetupStage>

08002de4 <HAL_PCD_DataOutStageCallback>:
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8002de4:	eb00 1341 	add.w	r3, r0, r1, lsl #5
 8002de8:	f8d3 213c 	ldr.w	r2, [r3, #316]	; 0x13c
 8002dec:	f8d0 0268 	ldr.w	r0, [r0, #616]	; 0x268
 8002df0:	f7ff b9d0 	b.w	8002194 <USBD_LL_DataOutStage>

08002df4 <HAL_PCD_DataInStageCallback>:
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8002df4:	eb00 1341 	add.w	r3, r0, r1, lsl #5
 8002df8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002dfa:	f8d0 0268 	ldr.w	r0, [r0, #616]	; 0x268
 8002dfe:	f7ff ba03 	b.w	8002208 <USBD_LL_DataInStage>

08002e02 <HAL_PCD_SOFCallback>:
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8002e02:	f8d0 0268 	ldr.w	r0, [r0, #616]	; 0x268
 8002e06:	f7ff ba97 	b.w	8002338 <USBD_LL_SOF>

08002e0a <HAL_PCD_ResetCallback>:
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8002e0a:	6883      	ldr	r3, [r0, #8]
{ 
 8002e0c:	b510      	push	{r4, lr}
  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8002e0e:	2b02      	cmp	r3, #2
{ 
 8002e10:	4604      	mov	r4, r0
  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8002e12:	d001      	beq.n	8002e18 <HAL_PCD_ResetCallback+0xe>
  {
    Error_Handler();
 8002e14:	f7ff fdde 	bl	80029d4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8002e18:	f8d4 0268 	ldr.w	r0, [r4, #616]	; 0x268
 8002e1c:	2101      	movs	r1, #1
 8002e1e:	f7ff fa75 	bl	800230c <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8002e22:	f8d4 0268 	ldr.w	r0, [r4, #616]	; 0x268
}
 8002e26:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8002e2a:	f7ff ba48 	b.w	80022be <USBD_LL_Reset>
	...

08002e30 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8002e30:	b510      	push	{r4, lr}
 8002e32:	4604      	mov	r4, r0
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8002e34:	f8d0 0268 	ldr.w	r0, [r0, #616]	; 0x268
 8002e38:	f7ff fa6b 	bl	8002312 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8002e3c:	69a3      	ldr	r3, [r4, #24]
 8002e3e:	b123      	cbz	r3, 8002e4a <HAL_PCD_SuspendCallback+0x1a>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8002e40:	4a02      	ldr	r2, [pc, #8]	; (8002e4c <HAL_PCD_SuspendCallback+0x1c>)
 8002e42:	6913      	ldr	r3, [r2, #16]
 8002e44:	f043 0306 	orr.w	r3, r3, #6
 8002e48:	6113      	str	r3, [r2, #16]
 8002e4a:	bd10      	pop	{r4, pc}
 8002e4c:	e000ed00 	.word	0xe000ed00

08002e50 <HAL_PCD_ResumeCallback>:
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8002e50:	f8d0 0268 	ldr.w	r0, [r0, #616]	; 0x268
 8002e54:	f7ff ba66 	b.w	8002324 <USBD_LL_Resume>

08002e58 <USBD_LL_Init>:
  hpcd_USB_FS.pData = pdev;
  pdev->pData = &hpcd_USB_FS;

  hpcd_USB_FS.Instance = USB;
  hpcd_USB_FS.Init.dev_endpoints = 8;
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8002e58:	2302      	movs	r3, #2
 8002e5a:	2208      	movs	r2, #8
{
 8002e5c:	b510      	push	{r4, lr}
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8002e5e:	491c      	ldr	r1, [pc, #112]	; (8002ed0 <USBD_LL_Init+0x78>)
{
 8002e60:	4604      	mov	r4, r0
  hpcd_USB_FS.pData = pdev;
 8002e62:	481c      	ldr	r0, [pc, #112]	; (8002ed4 <USBD_LL_Init+0x7c>)
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8002e64:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8002e68:	2300      	movs	r3, #0
  pdev->pData = &hpcd_USB_FS;
 8002e6a:	f8c4 02c0 	str.w	r0, [r4, #704]	; 0x2c0
  hpcd_USB_FS.pData = pdev;
 8002e6e:	f8c0 4268 	str.w	r4, [r0, #616]	; 0x268
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8002e72:	6183      	str	r3, [r0, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8002e74:	61c3      	str	r3, [r0, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8002e76:	6203      	str	r3, [r0, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8002e78:	f7fd fb14 	bl	80004a4 <HAL_PCD_Init>
 8002e7c:	b108      	cbz	r0, 8002e82 <USBD_LL_Init+0x2a>
  {
    Error_Handler( );
 8002e7e:	f7ff fda9 	bl	80029d4 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8002e82:	2200      	movs	r2, #0
 8002e84:	2318      	movs	r3, #24
 8002e86:	4611      	mov	r1, r2
 8002e88:	f8d4 02c0 	ldr.w	r0, [r4, #704]	; 0x2c0
 8002e8c:	f7fd fec8 	bl	8000c20 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8002e90:	2358      	movs	r3, #88	; 0x58
 8002e92:	2200      	movs	r2, #0
 8002e94:	2180      	movs	r1, #128	; 0x80
 8002e96:	f8d4 02c0 	ldr.w	r0, [r4, #704]	; 0x2c0
 8002e9a:	f7fd fec1 	bl	8000c20 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8002e9e:	23c0      	movs	r3, #192	; 0xc0
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	2181      	movs	r1, #129	; 0x81
 8002ea4:	f8d4 02c0 	ldr.w	r0, [r4, #704]	; 0x2c0
 8002ea8:	f7fd feba 	bl	8000c20 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8002eac:	f44f 7388 	mov.w	r3, #272	; 0x110
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	2101      	movs	r1, #1
 8002eb4:	f8d4 02c0 	ldr.w	r0, [r4, #704]	; 0x2c0
 8002eb8:	f7fd feb2 	bl	8000c20 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8002ebc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	2182      	movs	r1, #130	; 0x82
 8002ec4:	f8d4 02c0 	ldr.w	r0, [r4, #704]	; 0x2c0
 8002ec8:	f7fd feaa 	bl	8000c20 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
}
 8002ecc:	2000      	movs	r0, #0
 8002ece:	bd10      	pop	{r4, pc}
 8002ed0:	40005c00 	.word	0x40005c00
 8002ed4:	20000f18 	.word	0x20000f18

08002ed8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8002ed8:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
 
  hal_status = HAL_PCD_Start(pdev->pData);
 8002eda:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8002ede:	f7fd fb56 	bl	800058e <HAL_PCD_Start>
 8002ee2:	2803      	cmp	r0, #3
 8002ee4:	bf9a      	itte	ls
 8002ee6:	4b02      	ldrls	r3, [pc, #8]	; (8002ef0 <USBD_LL_Start+0x18>)
 8002ee8:	5c18      	ldrbls	r0, [r3, r0]
 8002eea:	2002      	movhi	r0, #2
     
  usb_status =  USBD_Get_USB_Status(hal_status);
  
  return usb_status;
}
 8002eec:	bd08      	pop	{r3, pc}
 8002eee:	bf00      	nop
 8002ef0:	08004097 	.word	0x08004097

08002ef4 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8002ef4:	b510      	push	{r4, lr}
 8002ef6:	461c      	mov	r4, r3
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8002ef8:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8002efc:	4613      	mov	r3, r2
 8002efe:	4622      	mov	r2, r4
 8002f00:	f7fd fb70 	bl	80005e4 <HAL_PCD_EP_Open>
 8002f04:	2803      	cmp	r0, #3
 8002f06:	bf9a      	itte	ls
 8002f08:	4b01      	ldrls	r3, [pc, #4]	; (8002f10 <USBD_LL_OpenEP+0x1c>)
 8002f0a:	5c18      	ldrbls	r0, [r3, r0]
 8002f0c:	2002      	movhi	r0, #2

  usb_status =  USBD_Get_USB_Status(hal_status);
 
  return usb_status;
}
 8002f0e:	bd10      	pop	{r4, pc}
 8002f10:	08004097 	.word	0x08004097

08002f14 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8002f14:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8002f16:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8002f1a:	f7fd fb96 	bl	800064a <HAL_PCD_EP_Close>
 8002f1e:	2803      	cmp	r0, #3
 8002f20:	bf9a      	itte	ls
 8002f22:	4b02      	ldrls	r3, [pc, #8]	; (8002f2c <USBD_LL_CloseEP+0x18>)
 8002f24:	5c18      	ldrbls	r0, [r3, r0]
 8002f26:	2002      	movhi	r0, #2
      
  usb_status =  USBD_Get_USB_Status(hal_status);

  return usb_status;  
}
 8002f28:	bd08      	pop	{r3, pc}
 8002f2a:	bf00      	nop
 8002f2c:	08004097 	.word	0x08004097

08002f30 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8002f30:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8002f32:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8002f36:	f7fd fe0d 	bl	8000b54 <HAL_PCD_EP_SetStall>
 8002f3a:	2803      	cmp	r0, #3
 8002f3c:	bf9a      	itte	ls
 8002f3e:	4b02      	ldrls	r3, [pc, #8]	; (8002f48 <USBD_LL_StallEP+0x18>)
 8002f40:	5c18      	ldrbls	r0, [r3, r0]
 8002f42:	2002      	movhi	r0, #2

  usb_status =  USBD_Get_USB_Status(hal_status);
 
  return usb_status;  
}
 8002f44:	bd08      	pop	{r3, pc}
 8002f46:	bf00      	nop
 8002f48:	08004097 	.word	0x08004097

08002f4c <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8002f4c:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);  
 8002f4e:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8002f52:	f7fd fe33 	bl	8000bbc <HAL_PCD_EP_ClrStall>
 8002f56:	2803      	cmp	r0, #3
 8002f58:	bf9a      	itte	ls
 8002f5a:	4b02      	ldrls	r3, [pc, #8]	; (8002f64 <USBD_LL_ClearStallEP+0x18>)
 8002f5c:	5c18      	ldrbls	r0, [r3, r0]
 8002f5e:	2002      	movhi	r0, #2
     
  usb_status =  USBD_Get_USB_Status(hal_status);

  return usb_status; 
}
 8002f60:	bd08      	pop	{r3, pc}
 8002f62:	bf00      	nop
 8002f64:	08004097 	.word	0x08004097

08002f68 <USBD_LL_IsStallEP>:
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
  
  if((ep_addr & 0x80) == 0x80)
 8002f68:	060a      	lsls	r2, r1, #24
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8002f6a:	f8d0 32c0 	ldr.w	r3, [r0, #704]	; 0x2c0
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 8002f6e:	bf45      	ittet	mi
 8002f70:	f001 017f 	andmi.w	r1, r1, #127	; 0x7f
 8002f74:	eb03 1341 	addmi.w	r3, r3, r1, lsl #5
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 8002f78:	eb03 1341 	addpl.w	r3, r3, r1, lsl #5
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 8002f7c:	f893 002a 	ldrbmi.w	r0, [r3, #42]	; 0x2a
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 8002f80:	bf58      	it	pl
 8002f82:	f893 012a 	ldrbpl.w	r0, [r3, #298]	; 0x12a
  }
}
 8002f86:	4770      	bx	lr

08002f88 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8002f88:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8002f8a:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8002f8e:	f7fd fb15 	bl	80005bc <HAL_PCD_SetAddress>
 8002f92:	2803      	cmp	r0, #3
 8002f94:	bf9a      	itte	ls
 8002f96:	4b02      	ldrls	r3, [pc, #8]	; (8002fa0 <USBD_LL_SetUSBAddress+0x18>)
 8002f98:	5c18      	ldrbls	r0, [r3, r0]
 8002f9a:	2002      	movhi	r0, #2
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 
  return usb_status;  
}
 8002f9c:	bd08      	pop	{r3, pc}
 8002f9e:	bf00      	nop
 8002fa0:	08004097 	.word	0x08004097

08002fa4 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8002fa4:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8002fa6:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8002faa:	f7fd fb96 	bl	80006da <HAL_PCD_EP_Transmit>
 8002fae:	2803      	cmp	r0, #3
 8002fb0:	bf9a      	itte	ls
 8002fb2:	4b02      	ldrls	r3, [pc, #8]	; (8002fbc <USBD_LL_Transmit+0x18>)
 8002fb4:	5c18      	ldrbls	r0, [r3, r0]
 8002fb6:	2002      	movhi	r0, #2
     
  usb_status =  USBD_Get_USB_Status(hal_status);
  
  return usb_status;    
}
 8002fb8:	bd08      	pop	{r3, pc}
 8002fba:	bf00      	nop
 8002fbc:	08004097 	.word	0x08004097

08002fc0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8002fc0:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8002fc2:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8002fc6:	f7fd fb69 	bl	800069c <HAL_PCD_EP_Receive>
 8002fca:	2803      	cmp	r0, #3
 8002fcc:	bf9a      	itte	ls
 8002fce:	4b02      	ldrls	r3, [pc, #8]	; (8002fd8 <USBD_LL_PrepareReceive+0x18>)
 8002fd0:	5c18      	ldrbls	r0, [r3, r0]
 8002fd2:	2002      	movhi	r0, #2
     
  usb_status =  USBD_Get_USB_Status(hal_status);
  	
  return usb_status; 
}
 8002fd4:	bd08      	pop	{r3, pc}
 8002fd6:	bf00      	nop
 8002fd8:	08004097 	.word	0x08004097

08002fdc <USBD_LL_GetRxDataSize>:
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8002fdc:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8002fe0:	f7fd bb74 	b.w	80006cc <HAL_PCD_EP_GetRxCount>

08002fe4 <USBD_static_malloc>:
  */
void *USBD_static_malloc(uint32_t size)
{
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
}
 8002fe4:	4800      	ldr	r0, [pc, #0]	; (8002fe8 <USBD_static_malloc+0x4>)
 8002fe6:	4770      	bx	lr
 8002fe8:	20000218 	.word	0x20000218

08002fec <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8002fec:	4770      	bx	lr

08002fee <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8002fee:	4770      	bx	lr

08002ff0 <USBD_FS_DeviceDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8002ff0:	2312      	movs	r3, #18
  return USBD_FS_DeviceDesc;
}
 8002ff2:	4801      	ldr	r0, [pc, #4]	; (8002ff8 <USBD_FS_DeviceDescriptor+0x8>)
  *length = sizeof(USBD_FS_DeviceDesc);
 8002ff4:	800b      	strh	r3, [r1, #0]
}
 8002ff6:	4770      	bx	lr
 8002ff8:	20000148 	.word	0x20000148

08002ffc <USBD_FS_LangIDStrDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8002ffc:	2304      	movs	r3, #4
  return USBD_LangIDDesc;
}
 8002ffe:	4801      	ldr	r0, [pc, #4]	; (8003004 <USBD_FS_LangIDStrDescriptor+0x8>)
  *length = sizeof(USBD_LangIDDesc);
 8003000:	800b      	strh	r3, [r1, #0]
}
 8003002:	4770      	bx	lr
 8003004:	2000015c 	.word	0x2000015c

08003008 <IntToUnicode>:
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
  uint8_t idx = 0;

  for (idx = 0; idx < len; idx++)
 8003008:	2300      	movs	r3, #0
{
 800300a:	b530      	push	{r4, r5, lr}
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
    }

    value = value << 4;

    pbuf[2 * idx + 1] = 0;
 800300c:	461d      	mov	r5, r3
  for (idx = 0; idx < len; idx++)
 800300e:	b2dc      	uxtb	r4, r3
 8003010:	42a2      	cmp	r2, r4
 8003012:	d800      	bhi.n	8003016 <IntToUnicode+0xe>
  }
}
 8003014:	bd30      	pop	{r4, r5, pc}
    if (((value >> 28)) < 0xA)
 8003016:	0f04      	lsrs	r4, r0, #28
 8003018:	2c09      	cmp	r4, #9
      pbuf[2 * idx] = (value >> 28) + '0';
 800301a:	bf94      	ite	ls
 800301c:	3430      	addls	r4, #48	; 0x30
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800301e:	3437      	addhi	r4, #55	; 0x37
 8003020:	f801 4013 	strb.w	r4, [r1, r3, lsl #1]
    pbuf[2 * idx + 1] = 0;
 8003024:	eb01 0443 	add.w	r4, r1, r3, lsl #1
    value = value << 4;
 8003028:	0100      	lsls	r0, r0, #4
    pbuf[2 * idx + 1] = 0;
 800302a:	7065      	strb	r5, [r4, #1]
 800302c:	3301      	adds	r3, #1
 800302e:	e7ee      	b.n	800300e <IntToUnicode+0x6>

08003030 <USBD_FS_SerialStrDescriptor>:
  *length = USB_SIZ_STRING_SERIAL;
 8003030:	231a      	movs	r3, #26
{
 8003032:	b510      	push	{r4, lr}
  *length = USB_SIZ_STRING_SERIAL;
 8003034:	800b      	strh	r3, [r1, #0]
  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8003036:	4b09      	ldr	r3, [pc, #36]	; (800305c <USBD_FS_SerialStrDescriptor+0x2c>)
 8003038:	6818      	ldr	r0, [r3, #0]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800303a:	3308      	adds	r3, #8
  deviceserial0 += deviceserial2;
 800303c:	681b      	ldr	r3, [r3, #0]
  if (deviceserial0 != 0)
 800303e:	18c0      	adds	r0, r0, r3
 8003040:	d00a      	beq.n	8003058 <USBD_FS_SerialStrDescriptor+0x28>
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8003042:	4b07      	ldr	r3, [pc, #28]	; (8003060 <USBD_FS_SerialStrDescriptor+0x30>)
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8003044:	2208      	movs	r2, #8
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8003046:	681c      	ldr	r4, [r3, #0]
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8003048:	4906      	ldr	r1, [pc, #24]	; (8003064 <USBD_FS_SerialStrDescriptor+0x34>)
 800304a:	f7ff ffdd 	bl	8003008 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800304e:	2204      	movs	r2, #4
 8003050:	4905      	ldr	r1, [pc, #20]	; (8003068 <USBD_FS_SerialStrDescriptor+0x38>)
 8003052:	4620      	mov	r0, r4
 8003054:	f7ff ffd8 	bl	8003008 <IntToUnicode>
}
 8003058:	4804      	ldr	r0, [pc, #16]	; (800306c <USBD_FS_SerialStrDescriptor+0x3c>)
 800305a:	bd10      	pop	{r4, pc}
 800305c:	1ffff7e8 	.word	0x1ffff7e8
 8003060:	1ffff7ec 	.word	0x1ffff7ec
 8003064:	20000162 	.word	0x20000162
 8003068:	20000172 	.word	0x20000172
 800306c:	20000160 	.word	0x20000160

08003070 <USBD_FS_ManufacturerStrDescriptor>:
{
 8003070:	b510      	push	{r4, lr}
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8003072:	4c04      	ldr	r4, [pc, #16]	; (8003084 <USBD_FS_ManufacturerStrDescriptor+0x14>)
 8003074:	460a      	mov	r2, r1
 8003076:	4804      	ldr	r0, [pc, #16]	; (8003088 <USBD_FS_ManufacturerStrDescriptor+0x18>)
 8003078:	4621      	mov	r1, r4
 800307a:	f7ff fb66 	bl	800274a <USBD_GetString>
}
 800307e:	4620      	mov	r0, r4
 8003080:	bd10      	pop	{r4, pc}
 8003082:	bf00      	nop
 8003084:	20001184 	.word	0x20001184
 8003088:	080040b4 	.word	0x080040b4

0800308c <USBD_FS_ProductStrDescriptor>:
{
 800308c:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800308e:	4c04      	ldr	r4, [pc, #16]	; (80030a0 <USBD_FS_ProductStrDescriptor+0x14>)
 8003090:	460a      	mov	r2, r1
 8003092:	4804      	ldr	r0, [pc, #16]	; (80030a4 <USBD_FS_ProductStrDescriptor+0x18>)
 8003094:	4621      	mov	r1, r4
 8003096:	f7ff fb58 	bl	800274a <USBD_GetString>
}
 800309a:	4620      	mov	r0, r4
 800309c:	bd10      	pop	{r4, pc}
 800309e:	bf00      	nop
 80030a0:	20001184 	.word	0x20001184
 80030a4:	080040c7 	.word	0x080040c7

080030a8 <USBD_FS_ConfigStrDescriptor>:
{
 80030a8:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80030aa:	4c04      	ldr	r4, [pc, #16]	; (80030bc <USBD_FS_ConfigStrDescriptor+0x14>)
 80030ac:	460a      	mov	r2, r1
 80030ae:	4804      	ldr	r0, [pc, #16]	; (80030c0 <USBD_FS_ConfigStrDescriptor+0x18>)
 80030b0:	4621      	mov	r1, r4
 80030b2:	f7ff fb4a 	bl	800274a <USBD_GetString>
}
 80030b6:	4620      	mov	r0, r4
 80030b8:	bd10      	pop	{r4, pc}
 80030ba:	bf00      	nop
 80030bc:	20001184 	.word	0x20001184
 80030c0:	0800409b 	.word	0x0800409b

080030c4 <USBD_FS_InterfaceStrDescriptor>:
{
 80030c4:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80030c6:	4c04      	ldr	r4, [pc, #16]	; (80030d8 <USBD_FS_InterfaceStrDescriptor+0x14>)
 80030c8:	460a      	mov	r2, r1
 80030ca:	4804      	ldr	r0, [pc, #16]	; (80030dc <USBD_FS_InterfaceStrDescriptor+0x18>)
 80030cc:	4621      	mov	r1, r4
 80030ce:	f7ff fb3c 	bl	800274a <USBD_GetString>
}
 80030d2:	4620      	mov	r0, r4
 80030d4:	bd10      	pop	{r4, pc}
 80030d6:	bf00      	nop
 80030d8:	20001184 	.word	0x20001184
 80030dc:	080040a6 	.word	0x080040a6

080030e0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80030e0:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80030e2:	e003      	b.n	80030ec <LoopCopyDataInit>

080030e4 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80030e4:	4b0b      	ldr	r3, [pc, #44]	; (8003114 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80030e6:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80030e8:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80030ea:	3104      	adds	r1, #4

080030ec <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80030ec:	480a      	ldr	r0, [pc, #40]	; (8003118 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80030ee:	4b0b      	ldr	r3, [pc, #44]	; (800311c <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80030f0:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80030f2:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80030f4:	d3f6      	bcc.n	80030e4 <CopyDataInit>
  ldr r2, =_sbss
 80030f6:	4a0a      	ldr	r2, [pc, #40]	; (8003120 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80030f8:	e002      	b.n	8003100 <LoopFillZerobss>

080030fa <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80030fa:	2300      	movs	r3, #0
  str r3, [r2], #4
 80030fc:	f842 3b04 	str.w	r3, [r2], #4

08003100 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8003100:	4b08      	ldr	r3, [pc, #32]	; (8003124 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8003102:	429a      	cmp	r2, r3
  bcc FillZerobss
 8003104:	d3f9      	bcc.n	80030fa <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8003106:	f7ff fdd5 	bl	8002cb4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800310a:	f000 f815 	bl	8003138 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800310e:	f7ff fbb3 	bl	8002878 <main>
  bx lr
 8003112:	4770      	bx	lr
  ldr r3, =_sidata
 8003114:	08004180 	.word	0x08004180
  ldr r0, =_sdata
 8003118:	20000000 	.word	0x20000000
  ldr r3, =_edata
 800311c:	200001e0 	.word	0x200001e0
  ldr r2, =_sbss
 8003120:	200001e0 	.word	0x200001e0
  ldr r3, = _ebss
 8003124:	20001388 	.word	0x20001388

08003128 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003128:	e7fe      	b.n	8003128 <ADC1_2_IRQHandler>
	...

0800312c <__errno>:
 800312c:	4b01      	ldr	r3, [pc, #4]	; (8003134 <__errno+0x8>)
 800312e:	6818      	ldr	r0, [r3, #0]
 8003130:	4770      	bx	lr
 8003132:	bf00      	nop
 8003134:	2000017c 	.word	0x2000017c

08003138 <__libc_init_array>:
 8003138:	b570      	push	{r4, r5, r6, lr}
 800313a:	2500      	movs	r5, #0
 800313c:	4e0c      	ldr	r6, [pc, #48]	; (8003170 <__libc_init_array+0x38>)
 800313e:	4c0d      	ldr	r4, [pc, #52]	; (8003174 <__libc_init_array+0x3c>)
 8003140:	1ba4      	subs	r4, r4, r6
 8003142:	10a4      	asrs	r4, r4, #2
 8003144:	42a5      	cmp	r5, r4
 8003146:	d109      	bne.n	800315c <__libc_init_array+0x24>
 8003148:	f000 ff70 	bl	800402c <_init>
 800314c:	2500      	movs	r5, #0
 800314e:	4e0a      	ldr	r6, [pc, #40]	; (8003178 <__libc_init_array+0x40>)
 8003150:	4c0a      	ldr	r4, [pc, #40]	; (800317c <__libc_init_array+0x44>)
 8003152:	1ba4      	subs	r4, r4, r6
 8003154:	10a4      	asrs	r4, r4, #2
 8003156:	42a5      	cmp	r5, r4
 8003158:	d105      	bne.n	8003166 <__libc_init_array+0x2e>
 800315a:	bd70      	pop	{r4, r5, r6, pc}
 800315c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003160:	4798      	blx	r3
 8003162:	3501      	adds	r5, #1
 8003164:	e7ee      	b.n	8003144 <__libc_init_array+0xc>
 8003166:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800316a:	4798      	blx	r3
 800316c:	3501      	adds	r5, #1
 800316e:	e7f2      	b.n	8003156 <__libc_init_array+0x1e>
 8003170:	08004178 	.word	0x08004178
 8003174:	08004178 	.word	0x08004178
 8003178:	08004178 	.word	0x08004178
 800317c:	0800417c 	.word	0x0800417c

08003180 <memset>:
 8003180:	4603      	mov	r3, r0
 8003182:	4402      	add	r2, r0
 8003184:	4293      	cmp	r3, r2
 8003186:	d100      	bne.n	800318a <memset+0xa>
 8003188:	4770      	bx	lr
 800318a:	f803 1b01 	strb.w	r1, [r3], #1
 800318e:	e7f9      	b.n	8003184 <memset+0x4>

08003190 <iprintf>:
 8003190:	b40f      	push	{r0, r1, r2, r3}
 8003192:	4b0a      	ldr	r3, [pc, #40]	; (80031bc <iprintf+0x2c>)
 8003194:	b513      	push	{r0, r1, r4, lr}
 8003196:	681c      	ldr	r4, [r3, #0]
 8003198:	b124      	cbz	r4, 80031a4 <iprintf+0x14>
 800319a:	69a3      	ldr	r3, [r4, #24]
 800319c:	b913      	cbnz	r3, 80031a4 <iprintf+0x14>
 800319e:	4620      	mov	r0, r4
 80031a0:	f000 f862 	bl	8003268 <__sinit>
 80031a4:	ab05      	add	r3, sp, #20
 80031a6:	9a04      	ldr	r2, [sp, #16]
 80031a8:	68a1      	ldr	r1, [r4, #8]
 80031aa:	4620      	mov	r0, r4
 80031ac:	9301      	str	r3, [sp, #4]
 80031ae:	f000 f96b 	bl	8003488 <_vfiprintf_r>
 80031b2:	b002      	add	sp, #8
 80031b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80031b8:	b004      	add	sp, #16
 80031ba:	4770      	bx	lr
 80031bc:	2000017c 	.word	0x2000017c

080031c0 <putchar>:
 80031c0:	b538      	push	{r3, r4, r5, lr}
 80031c2:	4b08      	ldr	r3, [pc, #32]	; (80031e4 <putchar+0x24>)
 80031c4:	4605      	mov	r5, r0
 80031c6:	681c      	ldr	r4, [r3, #0]
 80031c8:	b124      	cbz	r4, 80031d4 <putchar+0x14>
 80031ca:	69a3      	ldr	r3, [r4, #24]
 80031cc:	b913      	cbnz	r3, 80031d4 <putchar+0x14>
 80031ce:	4620      	mov	r0, r4
 80031d0:	f000 f84a 	bl	8003268 <__sinit>
 80031d4:	68a2      	ldr	r2, [r4, #8]
 80031d6:	4629      	mov	r1, r5
 80031d8:	4620      	mov	r0, r4
 80031da:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80031de:	f000 bc01 	b.w	80039e4 <_putc_r>
 80031e2:	bf00      	nop
 80031e4:	2000017c 	.word	0x2000017c

080031e8 <_cleanup_r>:
 80031e8:	4901      	ldr	r1, [pc, #4]	; (80031f0 <_cleanup_r+0x8>)
 80031ea:	f000 b8a9 	b.w	8003340 <_fwalk_reent>
 80031ee:	bf00      	nop
 80031f0:	08003dcd 	.word	0x08003dcd

080031f4 <std.isra.0>:
 80031f4:	2300      	movs	r3, #0
 80031f6:	b510      	push	{r4, lr}
 80031f8:	4604      	mov	r4, r0
 80031fa:	6003      	str	r3, [r0, #0]
 80031fc:	6043      	str	r3, [r0, #4]
 80031fe:	6083      	str	r3, [r0, #8]
 8003200:	8181      	strh	r1, [r0, #12]
 8003202:	6643      	str	r3, [r0, #100]	; 0x64
 8003204:	81c2      	strh	r2, [r0, #14]
 8003206:	6103      	str	r3, [r0, #16]
 8003208:	6143      	str	r3, [r0, #20]
 800320a:	6183      	str	r3, [r0, #24]
 800320c:	4619      	mov	r1, r3
 800320e:	2208      	movs	r2, #8
 8003210:	305c      	adds	r0, #92	; 0x5c
 8003212:	f7ff ffb5 	bl	8003180 <memset>
 8003216:	4b05      	ldr	r3, [pc, #20]	; (800322c <std.isra.0+0x38>)
 8003218:	6224      	str	r4, [r4, #32]
 800321a:	6263      	str	r3, [r4, #36]	; 0x24
 800321c:	4b04      	ldr	r3, [pc, #16]	; (8003230 <std.isra.0+0x3c>)
 800321e:	62a3      	str	r3, [r4, #40]	; 0x28
 8003220:	4b04      	ldr	r3, [pc, #16]	; (8003234 <std.isra.0+0x40>)
 8003222:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003224:	4b04      	ldr	r3, [pc, #16]	; (8003238 <std.isra.0+0x44>)
 8003226:	6323      	str	r3, [r4, #48]	; 0x30
 8003228:	bd10      	pop	{r4, pc}
 800322a:	bf00      	nop
 800322c:	08003a71 	.word	0x08003a71
 8003230:	08003a93 	.word	0x08003a93
 8003234:	08003acb 	.word	0x08003acb
 8003238:	08003aef 	.word	0x08003aef

0800323c <__sfmoreglue>:
 800323c:	b570      	push	{r4, r5, r6, lr}
 800323e:	2568      	movs	r5, #104	; 0x68
 8003240:	1e4a      	subs	r2, r1, #1
 8003242:	4355      	muls	r5, r2
 8003244:	460e      	mov	r6, r1
 8003246:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800324a:	f000 f897 	bl	800337c <_malloc_r>
 800324e:	4604      	mov	r4, r0
 8003250:	b140      	cbz	r0, 8003264 <__sfmoreglue+0x28>
 8003252:	2100      	movs	r1, #0
 8003254:	e880 0042 	stmia.w	r0, {r1, r6}
 8003258:	300c      	adds	r0, #12
 800325a:	60a0      	str	r0, [r4, #8]
 800325c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8003260:	f7ff ff8e 	bl	8003180 <memset>
 8003264:	4620      	mov	r0, r4
 8003266:	bd70      	pop	{r4, r5, r6, pc}

08003268 <__sinit>:
 8003268:	6983      	ldr	r3, [r0, #24]
 800326a:	b510      	push	{r4, lr}
 800326c:	4604      	mov	r4, r0
 800326e:	bb33      	cbnz	r3, 80032be <__sinit+0x56>
 8003270:	6483      	str	r3, [r0, #72]	; 0x48
 8003272:	64c3      	str	r3, [r0, #76]	; 0x4c
 8003274:	6503      	str	r3, [r0, #80]	; 0x50
 8003276:	4b12      	ldr	r3, [pc, #72]	; (80032c0 <__sinit+0x58>)
 8003278:	4a12      	ldr	r2, [pc, #72]	; (80032c4 <__sinit+0x5c>)
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	6282      	str	r2, [r0, #40]	; 0x28
 800327e:	4298      	cmp	r0, r3
 8003280:	bf04      	itt	eq
 8003282:	2301      	moveq	r3, #1
 8003284:	6183      	streq	r3, [r0, #24]
 8003286:	f000 f81f 	bl	80032c8 <__sfp>
 800328a:	6060      	str	r0, [r4, #4]
 800328c:	4620      	mov	r0, r4
 800328e:	f000 f81b 	bl	80032c8 <__sfp>
 8003292:	60a0      	str	r0, [r4, #8]
 8003294:	4620      	mov	r0, r4
 8003296:	f000 f817 	bl	80032c8 <__sfp>
 800329a:	2200      	movs	r2, #0
 800329c:	60e0      	str	r0, [r4, #12]
 800329e:	2104      	movs	r1, #4
 80032a0:	6860      	ldr	r0, [r4, #4]
 80032a2:	f7ff ffa7 	bl	80031f4 <std.isra.0>
 80032a6:	2201      	movs	r2, #1
 80032a8:	2109      	movs	r1, #9
 80032aa:	68a0      	ldr	r0, [r4, #8]
 80032ac:	f7ff ffa2 	bl	80031f4 <std.isra.0>
 80032b0:	2202      	movs	r2, #2
 80032b2:	2112      	movs	r1, #18
 80032b4:	68e0      	ldr	r0, [r4, #12]
 80032b6:	f7ff ff9d 	bl	80031f4 <std.isra.0>
 80032ba:	2301      	movs	r3, #1
 80032bc:	61a3      	str	r3, [r4, #24]
 80032be:	bd10      	pop	{r4, pc}
 80032c0:	080040e0 	.word	0x080040e0
 80032c4:	080031e9 	.word	0x080031e9

080032c8 <__sfp>:
 80032c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80032ca:	4b1c      	ldr	r3, [pc, #112]	; (800333c <__sfp+0x74>)
 80032cc:	4607      	mov	r7, r0
 80032ce:	681e      	ldr	r6, [r3, #0]
 80032d0:	69b3      	ldr	r3, [r6, #24]
 80032d2:	b913      	cbnz	r3, 80032da <__sfp+0x12>
 80032d4:	4630      	mov	r0, r6
 80032d6:	f7ff ffc7 	bl	8003268 <__sinit>
 80032da:	3648      	adds	r6, #72	; 0x48
 80032dc:	68b4      	ldr	r4, [r6, #8]
 80032de:	6873      	ldr	r3, [r6, #4]
 80032e0:	3b01      	subs	r3, #1
 80032e2:	d503      	bpl.n	80032ec <__sfp+0x24>
 80032e4:	6833      	ldr	r3, [r6, #0]
 80032e6:	b133      	cbz	r3, 80032f6 <__sfp+0x2e>
 80032e8:	6836      	ldr	r6, [r6, #0]
 80032ea:	e7f7      	b.n	80032dc <__sfp+0x14>
 80032ec:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80032f0:	b16d      	cbz	r5, 800330e <__sfp+0x46>
 80032f2:	3468      	adds	r4, #104	; 0x68
 80032f4:	e7f4      	b.n	80032e0 <__sfp+0x18>
 80032f6:	2104      	movs	r1, #4
 80032f8:	4638      	mov	r0, r7
 80032fa:	f7ff ff9f 	bl	800323c <__sfmoreglue>
 80032fe:	6030      	str	r0, [r6, #0]
 8003300:	2800      	cmp	r0, #0
 8003302:	d1f1      	bne.n	80032e8 <__sfp+0x20>
 8003304:	230c      	movs	r3, #12
 8003306:	4604      	mov	r4, r0
 8003308:	603b      	str	r3, [r7, #0]
 800330a:	4620      	mov	r0, r4
 800330c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800330e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003312:	81e3      	strh	r3, [r4, #14]
 8003314:	2301      	movs	r3, #1
 8003316:	6665      	str	r5, [r4, #100]	; 0x64
 8003318:	81a3      	strh	r3, [r4, #12]
 800331a:	6025      	str	r5, [r4, #0]
 800331c:	60a5      	str	r5, [r4, #8]
 800331e:	6065      	str	r5, [r4, #4]
 8003320:	6125      	str	r5, [r4, #16]
 8003322:	6165      	str	r5, [r4, #20]
 8003324:	61a5      	str	r5, [r4, #24]
 8003326:	2208      	movs	r2, #8
 8003328:	4629      	mov	r1, r5
 800332a:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800332e:	f7ff ff27 	bl	8003180 <memset>
 8003332:	6365      	str	r5, [r4, #52]	; 0x34
 8003334:	63a5      	str	r5, [r4, #56]	; 0x38
 8003336:	64a5      	str	r5, [r4, #72]	; 0x48
 8003338:	64e5      	str	r5, [r4, #76]	; 0x4c
 800333a:	e7e6      	b.n	800330a <__sfp+0x42>
 800333c:	080040e0 	.word	0x080040e0

08003340 <_fwalk_reent>:
 8003340:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003344:	4680      	mov	r8, r0
 8003346:	4689      	mov	r9, r1
 8003348:	2600      	movs	r6, #0
 800334a:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800334e:	b914      	cbnz	r4, 8003356 <_fwalk_reent+0x16>
 8003350:	4630      	mov	r0, r6
 8003352:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003356:	68a5      	ldr	r5, [r4, #8]
 8003358:	6867      	ldr	r7, [r4, #4]
 800335a:	3f01      	subs	r7, #1
 800335c:	d501      	bpl.n	8003362 <_fwalk_reent+0x22>
 800335e:	6824      	ldr	r4, [r4, #0]
 8003360:	e7f5      	b.n	800334e <_fwalk_reent+0xe>
 8003362:	89ab      	ldrh	r3, [r5, #12]
 8003364:	2b01      	cmp	r3, #1
 8003366:	d907      	bls.n	8003378 <_fwalk_reent+0x38>
 8003368:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800336c:	3301      	adds	r3, #1
 800336e:	d003      	beq.n	8003378 <_fwalk_reent+0x38>
 8003370:	4629      	mov	r1, r5
 8003372:	4640      	mov	r0, r8
 8003374:	47c8      	blx	r9
 8003376:	4306      	orrs	r6, r0
 8003378:	3568      	adds	r5, #104	; 0x68
 800337a:	e7ee      	b.n	800335a <_fwalk_reent+0x1a>

0800337c <_malloc_r>:
 800337c:	b570      	push	{r4, r5, r6, lr}
 800337e:	1ccd      	adds	r5, r1, #3
 8003380:	f025 0503 	bic.w	r5, r5, #3
 8003384:	3508      	adds	r5, #8
 8003386:	2d0c      	cmp	r5, #12
 8003388:	bf38      	it	cc
 800338a:	250c      	movcc	r5, #12
 800338c:	2d00      	cmp	r5, #0
 800338e:	4606      	mov	r6, r0
 8003390:	db01      	blt.n	8003396 <_malloc_r+0x1a>
 8003392:	42a9      	cmp	r1, r5
 8003394:	d903      	bls.n	800339e <_malloc_r+0x22>
 8003396:	230c      	movs	r3, #12
 8003398:	6033      	str	r3, [r6, #0]
 800339a:	2000      	movs	r0, #0
 800339c:	bd70      	pop	{r4, r5, r6, pc}
 800339e:	f000 fdc3 	bl	8003f28 <__malloc_lock>
 80033a2:	4a23      	ldr	r2, [pc, #140]	; (8003430 <_malloc_r+0xb4>)
 80033a4:	6814      	ldr	r4, [r2, #0]
 80033a6:	4621      	mov	r1, r4
 80033a8:	b991      	cbnz	r1, 80033d0 <_malloc_r+0x54>
 80033aa:	4c22      	ldr	r4, [pc, #136]	; (8003434 <_malloc_r+0xb8>)
 80033ac:	6823      	ldr	r3, [r4, #0]
 80033ae:	b91b      	cbnz	r3, 80033b8 <_malloc_r+0x3c>
 80033b0:	4630      	mov	r0, r6
 80033b2:	f000 fb4d 	bl	8003a50 <_sbrk_r>
 80033b6:	6020      	str	r0, [r4, #0]
 80033b8:	4629      	mov	r1, r5
 80033ba:	4630      	mov	r0, r6
 80033bc:	f000 fb48 	bl	8003a50 <_sbrk_r>
 80033c0:	1c43      	adds	r3, r0, #1
 80033c2:	d126      	bne.n	8003412 <_malloc_r+0x96>
 80033c4:	230c      	movs	r3, #12
 80033c6:	4630      	mov	r0, r6
 80033c8:	6033      	str	r3, [r6, #0]
 80033ca:	f000 fdae 	bl	8003f2a <__malloc_unlock>
 80033ce:	e7e4      	b.n	800339a <_malloc_r+0x1e>
 80033d0:	680b      	ldr	r3, [r1, #0]
 80033d2:	1b5b      	subs	r3, r3, r5
 80033d4:	d41a      	bmi.n	800340c <_malloc_r+0x90>
 80033d6:	2b0b      	cmp	r3, #11
 80033d8:	d90f      	bls.n	80033fa <_malloc_r+0x7e>
 80033da:	600b      	str	r3, [r1, #0]
 80033dc:	18cc      	adds	r4, r1, r3
 80033de:	50cd      	str	r5, [r1, r3]
 80033e0:	4630      	mov	r0, r6
 80033e2:	f000 fda2 	bl	8003f2a <__malloc_unlock>
 80033e6:	f104 000b 	add.w	r0, r4, #11
 80033ea:	1d23      	adds	r3, r4, #4
 80033ec:	f020 0007 	bic.w	r0, r0, #7
 80033f0:	1ac3      	subs	r3, r0, r3
 80033f2:	d01b      	beq.n	800342c <_malloc_r+0xb0>
 80033f4:	425a      	negs	r2, r3
 80033f6:	50e2      	str	r2, [r4, r3]
 80033f8:	bd70      	pop	{r4, r5, r6, pc}
 80033fa:	428c      	cmp	r4, r1
 80033fc:	bf0b      	itete	eq
 80033fe:	6863      	ldreq	r3, [r4, #4]
 8003400:	684b      	ldrne	r3, [r1, #4]
 8003402:	6013      	streq	r3, [r2, #0]
 8003404:	6063      	strne	r3, [r4, #4]
 8003406:	bf18      	it	ne
 8003408:	460c      	movne	r4, r1
 800340a:	e7e9      	b.n	80033e0 <_malloc_r+0x64>
 800340c:	460c      	mov	r4, r1
 800340e:	6849      	ldr	r1, [r1, #4]
 8003410:	e7ca      	b.n	80033a8 <_malloc_r+0x2c>
 8003412:	1cc4      	adds	r4, r0, #3
 8003414:	f024 0403 	bic.w	r4, r4, #3
 8003418:	42a0      	cmp	r0, r4
 800341a:	d005      	beq.n	8003428 <_malloc_r+0xac>
 800341c:	1a21      	subs	r1, r4, r0
 800341e:	4630      	mov	r0, r6
 8003420:	f000 fb16 	bl	8003a50 <_sbrk_r>
 8003424:	3001      	adds	r0, #1
 8003426:	d0cd      	beq.n	80033c4 <_malloc_r+0x48>
 8003428:	6025      	str	r5, [r4, #0]
 800342a:	e7d9      	b.n	80033e0 <_malloc_r+0x64>
 800342c:	bd70      	pop	{r4, r5, r6, pc}
 800342e:	bf00      	nop
 8003430:	20000438 	.word	0x20000438
 8003434:	2000043c 	.word	0x2000043c

08003438 <__sfputc_r>:
 8003438:	6893      	ldr	r3, [r2, #8]
 800343a:	b410      	push	{r4}
 800343c:	3b01      	subs	r3, #1
 800343e:	2b00      	cmp	r3, #0
 8003440:	6093      	str	r3, [r2, #8]
 8003442:	da08      	bge.n	8003456 <__sfputc_r+0x1e>
 8003444:	6994      	ldr	r4, [r2, #24]
 8003446:	42a3      	cmp	r3, r4
 8003448:	db02      	blt.n	8003450 <__sfputc_r+0x18>
 800344a:	b2cb      	uxtb	r3, r1
 800344c:	2b0a      	cmp	r3, #10
 800344e:	d102      	bne.n	8003456 <__sfputc_r+0x1e>
 8003450:	bc10      	pop	{r4}
 8003452:	f000 bb51 	b.w	8003af8 <__swbuf_r>
 8003456:	6813      	ldr	r3, [r2, #0]
 8003458:	1c58      	adds	r0, r3, #1
 800345a:	6010      	str	r0, [r2, #0]
 800345c:	7019      	strb	r1, [r3, #0]
 800345e:	b2c8      	uxtb	r0, r1
 8003460:	bc10      	pop	{r4}
 8003462:	4770      	bx	lr

08003464 <__sfputs_r>:
 8003464:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003466:	4606      	mov	r6, r0
 8003468:	460f      	mov	r7, r1
 800346a:	4614      	mov	r4, r2
 800346c:	18d5      	adds	r5, r2, r3
 800346e:	42ac      	cmp	r4, r5
 8003470:	d101      	bne.n	8003476 <__sfputs_r+0x12>
 8003472:	2000      	movs	r0, #0
 8003474:	e007      	b.n	8003486 <__sfputs_r+0x22>
 8003476:	463a      	mov	r2, r7
 8003478:	f814 1b01 	ldrb.w	r1, [r4], #1
 800347c:	4630      	mov	r0, r6
 800347e:	f7ff ffdb 	bl	8003438 <__sfputc_r>
 8003482:	1c43      	adds	r3, r0, #1
 8003484:	d1f3      	bne.n	800346e <__sfputs_r+0xa>
 8003486:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08003488 <_vfiprintf_r>:
 8003488:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800348c:	b09d      	sub	sp, #116	; 0x74
 800348e:	460c      	mov	r4, r1
 8003490:	4617      	mov	r7, r2
 8003492:	9303      	str	r3, [sp, #12]
 8003494:	4606      	mov	r6, r0
 8003496:	b118      	cbz	r0, 80034a0 <_vfiprintf_r+0x18>
 8003498:	6983      	ldr	r3, [r0, #24]
 800349a:	b90b      	cbnz	r3, 80034a0 <_vfiprintf_r+0x18>
 800349c:	f7ff fee4 	bl	8003268 <__sinit>
 80034a0:	4b7c      	ldr	r3, [pc, #496]	; (8003694 <_vfiprintf_r+0x20c>)
 80034a2:	429c      	cmp	r4, r3
 80034a4:	d157      	bne.n	8003556 <_vfiprintf_r+0xce>
 80034a6:	6874      	ldr	r4, [r6, #4]
 80034a8:	89a3      	ldrh	r3, [r4, #12]
 80034aa:	0718      	lsls	r0, r3, #28
 80034ac:	d55d      	bpl.n	800356a <_vfiprintf_r+0xe2>
 80034ae:	6923      	ldr	r3, [r4, #16]
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d05a      	beq.n	800356a <_vfiprintf_r+0xe2>
 80034b4:	2300      	movs	r3, #0
 80034b6:	9309      	str	r3, [sp, #36]	; 0x24
 80034b8:	2320      	movs	r3, #32
 80034ba:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80034be:	2330      	movs	r3, #48	; 0x30
 80034c0:	f04f 0b01 	mov.w	fp, #1
 80034c4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80034c8:	46b8      	mov	r8, r7
 80034ca:	4645      	mov	r5, r8
 80034cc:	f815 3b01 	ldrb.w	r3, [r5], #1
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d155      	bne.n	8003580 <_vfiprintf_r+0xf8>
 80034d4:	ebb8 0a07 	subs.w	sl, r8, r7
 80034d8:	d00b      	beq.n	80034f2 <_vfiprintf_r+0x6a>
 80034da:	4653      	mov	r3, sl
 80034dc:	463a      	mov	r2, r7
 80034de:	4621      	mov	r1, r4
 80034e0:	4630      	mov	r0, r6
 80034e2:	f7ff ffbf 	bl	8003464 <__sfputs_r>
 80034e6:	3001      	adds	r0, #1
 80034e8:	f000 80c4 	beq.w	8003674 <_vfiprintf_r+0x1ec>
 80034ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80034ee:	4453      	add	r3, sl
 80034f0:	9309      	str	r3, [sp, #36]	; 0x24
 80034f2:	f898 3000 	ldrb.w	r3, [r8]
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	f000 80bc 	beq.w	8003674 <_vfiprintf_r+0x1ec>
 80034fc:	2300      	movs	r3, #0
 80034fe:	f04f 32ff 	mov.w	r2, #4294967295
 8003502:	9304      	str	r3, [sp, #16]
 8003504:	9307      	str	r3, [sp, #28]
 8003506:	9205      	str	r2, [sp, #20]
 8003508:	9306      	str	r3, [sp, #24]
 800350a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800350e:	931a      	str	r3, [sp, #104]	; 0x68
 8003510:	2205      	movs	r2, #5
 8003512:	7829      	ldrb	r1, [r5, #0]
 8003514:	4860      	ldr	r0, [pc, #384]	; (8003698 <_vfiprintf_r+0x210>)
 8003516:	f000 fcf9 	bl	8003f0c <memchr>
 800351a:	f105 0801 	add.w	r8, r5, #1
 800351e:	9b04      	ldr	r3, [sp, #16]
 8003520:	2800      	cmp	r0, #0
 8003522:	d131      	bne.n	8003588 <_vfiprintf_r+0x100>
 8003524:	06d9      	lsls	r1, r3, #27
 8003526:	bf44      	itt	mi
 8003528:	2220      	movmi	r2, #32
 800352a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800352e:	071a      	lsls	r2, r3, #28
 8003530:	bf44      	itt	mi
 8003532:	222b      	movmi	r2, #43	; 0x2b
 8003534:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003538:	782a      	ldrb	r2, [r5, #0]
 800353a:	2a2a      	cmp	r2, #42	; 0x2a
 800353c:	d02c      	beq.n	8003598 <_vfiprintf_r+0x110>
 800353e:	2100      	movs	r1, #0
 8003540:	200a      	movs	r0, #10
 8003542:	9a07      	ldr	r2, [sp, #28]
 8003544:	46a8      	mov	r8, r5
 8003546:	f898 3000 	ldrb.w	r3, [r8]
 800354a:	3501      	adds	r5, #1
 800354c:	3b30      	subs	r3, #48	; 0x30
 800354e:	2b09      	cmp	r3, #9
 8003550:	d96d      	bls.n	800362e <_vfiprintf_r+0x1a6>
 8003552:	b371      	cbz	r1, 80035b2 <_vfiprintf_r+0x12a>
 8003554:	e026      	b.n	80035a4 <_vfiprintf_r+0x11c>
 8003556:	4b51      	ldr	r3, [pc, #324]	; (800369c <_vfiprintf_r+0x214>)
 8003558:	429c      	cmp	r4, r3
 800355a:	d101      	bne.n	8003560 <_vfiprintf_r+0xd8>
 800355c:	68b4      	ldr	r4, [r6, #8]
 800355e:	e7a3      	b.n	80034a8 <_vfiprintf_r+0x20>
 8003560:	4b4f      	ldr	r3, [pc, #316]	; (80036a0 <_vfiprintf_r+0x218>)
 8003562:	429c      	cmp	r4, r3
 8003564:	bf08      	it	eq
 8003566:	68f4      	ldreq	r4, [r6, #12]
 8003568:	e79e      	b.n	80034a8 <_vfiprintf_r+0x20>
 800356a:	4621      	mov	r1, r4
 800356c:	4630      	mov	r0, r6
 800356e:	f000 fb27 	bl	8003bc0 <__swsetup_r>
 8003572:	2800      	cmp	r0, #0
 8003574:	d09e      	beq.n	80034b4 <_vfiprintf_r+0x2c>
 8003576:	f04f 30ff 	mov.w	r0, #4294967295
 800357a:	b01d      	add	sp, #116	; 0x74
 800357c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003580:	2b25      	cmp	r3, #37	; 0x25
 8003582:	d0a7      	beq.n	80034d4 <_vfiprintf_r+0x4c>
 8003584:	46a8      	mov	r8, r5
 8003586:	e7a0      	b.n	80034ca <_vfiprintf_r+0x42>
 8003588:	4a43      	ldr	r2, [pc, #268]	; (8003698 <_vfiprintf_r+0x210>)
 800358a:	4645      	mov	r5, r8
 800358c:	1a80      	subs	r0, r0, r2
 800358e:	fa0b f000 	lsl.w	r0, fp, r0
 8003592:	4318      	orrs	r0, r3
 8003594:	9004      	str	r0, [sp, #16]
 8003596:	e7bb      	b.n	8003510 <_vfiprintf_r+0x88>
 8003598:	9a03      	ldr	r2, [sp, #12]
 800359a:	1d11      	adds	r1, r2, #4
 800359c:	6812      	ldr	r2, [r2, #0]
 800359e:	9103      	str	r1, [sp, #12]
 80035a0:	2a00      	cmp	r2, #0
 80035a2:	db01      	blt.n	80035a8 <_vfiprintf_r+0x120>
 80035a4:	9207      	str	r2, [sp, #28]
 80035a6:	e004      	b.n	80035b2 <_vfiprintf_r+0x12a>
 80035a8:	4252      	negs	r2, r2
 80035aa:	f043 0302 	orr.w	r3, r3, #2
 80035ae:	9207      	str	r2, [sp, #28]
 80035b0:	9304      	str	r3, [sp, #16]
 80035b2:	f898 3000 	ldrb.w	r3, [r8]
 80035b6:	2b2e      	cmp	r3, #46	; 0x2e
 80035b8:	d110      	bne.n	80035dc <_vfiprintf_r+0x154>
 80035ba:	f898 3001 	ldrb.w	r3, [r8, #1]
 80035be:	f108 0101 	add.w	r1, r8, #1
 80035c2:	2b2a      	cmp	r3, #42	; 0x2a
 80035c4:	d137      	bne.n	8003636 <_vfiprintf_r+0x1ae>
 80035c6:	9b03      	ldr	r3, [sp, #12]
 80035c8:	f108 0802 	add.w	r8, r8, #2
 80035cc:	1d1a      	adds	r2, r3, #4
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	9203      	str	r2, [sp, #12]
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	bfb8      	it	lt
 80035d6:	f04f 33ff 	movlt.w	r3, #4294967295
 80035da:	9305      	str	r3, [sp, #20]
 80035dc:	4d31      	ldr	r5, [pc, #196]	; (80036a4 <_vfiprintf_r+0x21c>)
 80035de:	2203      	movs	r2, #3
 80035e0:	f898 1000 	ldrb.w	r1, [r8]
 80035e4:	4628      	mov	r0, r5
 80035e6:	f000 fc91 	bl	8003f0c <memchr>
 80035ea:	b140      	cbz	r0, 80035fe <_vfiprintf_r+0x176>
 80035ec:	2340      	movs	r3, #64	; 0x40
 80035ee:	1b40      	subs	r0, r0, r5
 80035f0:	fa03 f000 	lsl.w	r0, r3, r0
 80035f4:	9b04      	ldr	r3, [sp, #16]
 80035f6:	f108 0801 	add.w	r8, r8, #1
 80035fa:	4303      	orrs	r3, r0
 80035fc:	9304      	str	r3, [sp, #16]
 80035fe:	f898 1000 	ldrb.w	r1, [r8]
 8003602:	2206      	movs	r2, #6
 8003604:	4828      	ldr	r0, [pc, #160]	; (80036a8 <_vfiprintf_r+0x220>)
 8003606:	f108 0701 	add.w	r7, r8, #1
 800360a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800360e:	f000 fc7d 	bl	8003f0c <memchr>
 8003612:	2800      	cmp	r0, #0
 8003614:	d034      	beq.n	8003680 <_vfiprintf_r+0x1f8>
 8003616:	4b25      	ldr	r3, [pc, #148]	; (80036ac <_vfiprintf_r+0x224>)
 8003618:	bb03      	cbnz	r3, 800365c <_vfiprintf_r+0x1d4>
 800361a:	9b03      	ldr	r3, [sp, #12]
 800361c:	3307      	adds	r3, #7
 800361e:	f023 0307 	bic.w	r3, r3, #7
 8003622:	3308      	adds	r3, #8
 8003624:	9303      	str	r3, [sp, #12]
 8003626:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003628:	444b      	add	r3, r9
 800362a:	9309      	str	r3, [sp, #36]	; 0x24
 800362c:	e74c      	b.n	80034c8 <_vfiprintf_r+0x40>
 800362e:	fb00 3202 	mla	r2, r0, r2, r3
 8003632:	2101      	movs	r1, #1
 8003634:	e786      	b.n	8003544 <_vfiprintf_r+0xbc>
 8003636:	2300      	movs	r3, #0
 8003638:	250a      	movs	r5, #10
 800363a:	4618      	mov	r0, r3
 800363c:	9305      	str	r3, [sp, #20]
 800363e:	4688      	mov	r8, r1
 8003640:	f898 2000 	ldrb.w	r2, [r8]
 8003644:	3101      	adds	r1, #1
 8003646:	3a30      	subs	r2, #48	; 0x30
 8003648:	2a09      	cmp	r2, #9
 800364a:	d903      	bls.n	8003654 <_vfiprintf_r+0x1cc>
 800364c:	2b00      	cmp	r3, #0
 800364e:	d0c5      	beq.n	80035dc <_vfiprintf_r+0x154>
 8003650:	9005      	str	r0, [sp, #20]
 8003652:	e7c3      	b.n	80035dc <_vfiprintf_r+0x154>
 8003654:	fb05 2000 	mla	r0, r5, r0, r2
 8003658:	2301      	movs	r3, #1
 800365a:	e7f0      	b.n	800363e <_vfiprintf_r+0x1b6>
 800365c:	ab03      	add	r3, sp, #12
 800365e:	9300      	str	r3, [sp, #0]
 8003660:	4622      	mov	r2, r4
 8003662:	4b13      	ldr	r3, [pc, #76]	; (80036b0 <_vfiprintf_r+0x228>)
 8003664:	a904      	add	r1, sp, #16
 8003666:	4630      	mov	r0, r6
 8003668:	f3af 8000 	nop.w
 800366c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8003670:	4681      	mov	r9, r0
 8003672:	d1d8      	bne.n	8003626 <_vfiprintf_r+0x19e>
 8003674:	89a3      	ldrh	r3, [r4, #12]
 8003676:	065b      	lsls	r3, r3, #25
 8003678:	f53f af7d 	bmi.w	8003576 <_vfiprintf_r+0xee>
 800367c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800367e:	e77c      	b.n	800357a <_vfiprintf_r+0xf2>
 8003680:	ab03      	add	r3, sp, #12
 8003682:	9300      	str	r3, [sp, #0]
 8003684:	4622      	mov	r2, r4
 8003686:	4b0a      	ldr	r3, [pc, #40]	; (80036b0 <_vfiprintf_r+0x228>)
 8003688:	a904      	add	r1, sp, #16
 800368a:	4630      	mov	r0, r6
 800368c:	f000 f88a 	bl	80037a4 <_printf_i>
 8003690:	e7ec      	b.n	800366c <_vfiprintf_r+0x1e4>
 8003692:	bf00      	nop
 8003694:	08004104 	.word	0x08004104
 8003698:	08004144 	.word	0x08004144
 800369c:	08004124 	.word	0x08004124
 80036a0:	080040e4 	.word	0x080040e4
 80036a4:	0800414a 	.word	0x0800414a
 80036a8:	0800414e 	.word	0x0800414e
 80036ac:	00000000 	.word	0x00000000
 80036b0:	08003465 	.word	0x08003465

080036b4 <_printf_common>:
 80036b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80036b8:	4691      	mov	r9, r2
 80036ba:	461f      	mov	r7, r3
 80036bc:	688a      	ldr	r2, [r1, #8]
 80036be:	690b      	ldr	r3, [r1, #16]
 80036c0:	4606      	mov	r6, r0
 80036c2:	4293      	cmp	r3, r2
 80036c4:	bfb8      	it	lt
 80036c6:	4613      	movlt	r3, r2
 80036c8:	f8c9 3000 	str.w	r3, [r9]
 80036cc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80036d0:	460c      	mov	r4, r1
 80036d2:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80036d6:	b112      	cbz	r2, 80036de <_printf_common+0x2a>
 80036d8:	3301      	adds	r3, #1
 80036da:	f8c9 3000 	str.w	r3, [r9]
 80036de:	6823      	ldr	r3, [r4, #0]
 80036e0:	0699      	lsls	r1, r3, #26
 80036e2:	bf42      	ittt	mi
 80036e4:	f8d9 3000 	ldrmi.w	r3, [r9]
 80036e8:	3302      	addmi	r3, #2
 80036ea:	f8c9 3000 	strmi.w	r3, [r9]
 80036ee:	6825      	ldr	r5, [r4, #0]
 80036f0:	f015 0506 	ands.w	r5, r5, #6
 80036f4:	d107      	bne.n	8003706 <_printf_common+0x52>
 80036f6:	f104 0a19 	add.w	sl, r4, #25
 80036fa:	68e3      	ldr	r3, [r4, #12]
 80036fc:	f8d9 2000 	ldr.w	r2, [r9]
 8003700:	1a9b      	subs	r3, r3, r2
 8003702:	429d      	cmp	r5, r3
 8003704:	db2a      	blt.n	800375c <_printf_common+0xa8>
 8003706:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800370a:	6822      	ldr	r2, [r4, #0]
 800370c:	3300      	adds	r3, #0
 800370e:	bf18      	it	ne
 8003710:	2301      	movne	r3, #1
 8003712:	0692      	lsls	r2, r2, #26
 8003714:	d42f      	bmi.n	8003776 <_printf_common+0xc2>
 8003716:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800371a:	4639      	mov	r1, r7
 800371c:	4630      	mov	r0, r6
 800371e:	47c0      	blx	r8
 8003720:	3001      	adds	r0, #1
 8003722:	d022      	beq.n	800376a <_printf_common+0xb6>
 8003724:	6823      	ldr	r3, [r4, #0]
 8003726:	68e5      	ldr	r5, [r4, #12]
 8003728:	f003 0306 	and.w	r3, r3, #6
 800372c:	2b04      	cmp	r3, #4
 800372e:	bf18      	it	ne
 8003730:	2500      	movne	r5, #0
 8003732:	f8d9 2000 	ldr.w	r2, [r9]
 8003736:	f04f 0900 	mov.w	r9, #0
 800373a:	bf08      	it	eq
 800373c:	1aad      	subeq	r5, r5, r2
 800373e:	68a3      	ldr	r3, [r4, #8]
 8003740:	6922      	ldr	r2, [r4, #16]
 8003742:	bf08      	it	eq
 8003744:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003748:	4293      	cmp	r3, r2
 800374a:	bfc4      	itt	gt
 800374c:	1a9b      	subgt	r3, r3, r2
 800374e:	18ed      	addgt	r5, r5, r3
 8003750:	341a      	adds	r4, #26
 8003752:	454d      	cmp	r5, r9
 8003754:	d11b      	bne.n	800378e <_printf_common+0xda>
 8003756:	2000      	movs	r0, #0
 8003758:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800375c:	2301      	movs	r3, #1
 800375e:	4652      	mov	r2, sl
 8003760:	4639      	mov	r1, r7
 8003762:	4630      	mov	r0, r6
 8003764:	47c0      	blx	r8
 8003766:	3001      	adds	r0, #1
 8003768:	d103      	bne.n	8003772 <_printf_common+0xbe>
 800376a:	f04f 30ff 	mov.w	r0, #4294967295
 800376e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003772:	3501      	adds	r5, #1
 8003774:	e7c1      	b.n	80036fa <_printf_common+0x46>
 8003776:	2030      	movs	r0, #48	; 0x30
 8003778:	18e1      	adds	r1, r4, r3
 800377a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800377e:	1c5a      	adds	r2, r3, #1
 8003780:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003784:	4422      	add	r2, r4
 8003786:	3302      	adds	r3, #2
 8003788:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800378c:	e7c3      	b.n	8003716 <_printf_common+0x62>
 800378e:	2301      	movs	r3, #1
 8003790:	4622      	mov	r2, r4
 8003792:	4639      	mov	r1, r7
 8003794:	4630      	mov	r0, r6
 8003796:	47c0      	blx	r8
 8003798:	3001      	adds	r0, #1
 800379a:	d0e6      	beq.n	800376a <_printf_common+0xb6>
 800379c:	f109 0901 	add.w	r9, r9, #1
 80037a0:	e7d7      	b.n	8003752 <_printf_common+0x9e>
	...

080037a4 <_printf_i>:
 80037a4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80037a8:	4617      	mov	r7, r2
 80037aa:	7e0a      	ldrb	r2, [r1, #24]
 80037ac:	b085      	sub	sp, #20
 80037ae:	2a6e      	cmp	r2, #110	; 0x6e
 80037b0:	4698      	mov	r8, r3
 80037b2:	4606      	mov	r6, r0
 80037b4:	460c      	mov	r4, r1
 80037b6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80037b8:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 80037bc:	f000 80bc 	beq.w	8003938 <_printf_i+0x194>
 80037c0:	d81a      	bhi.n	80037f8 <_printf_i+0x54>
 80037c2:	2a63      	cmp	r2, #99	; 0x63
 80037c4:	d02e      	beq.n	8003824 <_printf_i+0x80>
 80037c6:	d80a      	bhi.n	80037de <_printf_i+0x3a>
 80037c8:	2a00      	cmp	r2, #0
 80037ca:	f000 80c8 	beq.w	800395e <_printf_i+0x1ba>
 80037ce:	2a58      	cmp	r2, #88	; 0x58
 80037d0:	f000 808a 	beq.w	80038e8 <_printf_i+0x144>
 80037d4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80037d8:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 80037dc:	e02a      	b.n	8003834 <_printf_i+0x90>
 80037de:	2a64      	cmp	r2, #100	; 0x64
 80037e0:	d001      	beq.n	80037e6 <_printf_i+0x42>
 80037e2:	2a69      	cmp	r2, #105	; 0x69
 80037e4:	d1f6      	bne.n	80037d4 <_printf_i+0x30>
 80037e6:	6821      	ldr	r1, [r4, #0]
 80037e8:	681a      	ldr	r2, [r3, #0]
 80037ea:	f011 0f80 	tst.w	r1, #128	; 0x80
 80037ee:	d023      	beq.n	8003838 <_printf_i+0x94>
 80037f0:	1d11      	adds	r1, r2, #4
 80037f2:	6019      	str	r1, [r3, #0]
 80037f4:	6813      	ldr	r3, [r2, #0]
 80037f6:	e027      	b.n	8003848 <_printf_i+0xa4>
 80037f8:	2a73      	cmp	r2, #115	; 0x73
 80037fa:	f000 80b4 	beq.w	8003966 <_printf_i+0x1c2>
 80037fe:	d808      	bhi.n	8003812 <_printf_i+0x6e>
 8003800:	2a6f      	cmp	r2, #111	; 0x6f
 8003802:	d02a      	beq.n	800385a <_printf_i+0xb6>
 8003804:	2a70      	cmp	r2, #112	; 0x70
 8003806:	d1e5      	bne.n	80037d4 <_printf_i+0x30>
 8003808:	680a      	ldr	r2, [r1, #0]
 800380a:	f042 0220 	orr.w	r2, r2, #32
 800380e:	600a      	str	r2, [r1, #0]
 8003810:	e003      	b.n	800381a <_printf_i+0x76>
 8003812:	2a75      	cmp	r2, #117	; 0x75
 8003814:	d021      	beq.n	800385a <_printf_i+0xb6>
 8003816:	2a78      	cmp	r2, #120	; 0x78
 8003818:	d1dc      	bne.n	80037d4 <_printf_i+0x30>
 800381a:	2278      	movs	r2, #120	; 0x78
 800381c:	496f      	ldr	r1, [pc, #444]	; (80039dc <_printf_i+0x238>)
 800381e:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 8003822:	e064      	b.n	80038ee <_printf_i+0x14a>
 8003824:	681a      	ldr	r2, [r3, #0]
 8003826:	f101 0542 	add.w	r5, r1, #66	; 0x42
 800382a:	1d11      	adds	r1, r2, #4
 800382c:	6019      	str	r1, [r3, #0]
 800382e:	6813      	ldr	r3, [r2, #0]
 8003830:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003834:	2301      	movs	r3, #1
 8003836:	e0a3      	b.n	8003980 <_printf_i+0x1dc>
 8003838:	f011 0f40 	tst.w	r1, #64	; 0x40
 800383c:	f102 0104 	add.w	r1, r2, #4
 8003840:	6019      	str	r1, [r3, #0]
 8003842:	d0d7      	beq.n	80037f4 <_printf_i+0x50>
 8003844:	f9b2 3000 	ldrsh.w	r3, [r2]
 8003848:	2b00      	cmp	r3, #0
 800384a:	da03      	bge.n	8003854 <_printf_i+0xb0>
 800384c:	222d      	movs	r2, #45	; 0x2d
 800384e:	425b      	negs	r3, r3
 8003850:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8003854:	4962      	ldr	r1, [pc, #392]	; (80039e0 <_printf_i+0x23c>)
 8003856:	220a      	movs	r2, #10
 8003858:	e017      	b.n	800388a <_printf_i+0xe6>
 800385a:	6820      	ldr	r0, [r4, #0]
 800385c:	6819      	ldr	r1, [r3, #0]
 800385e:	f010 0f80 	tst.w	r0, #128	; 0x80
 8003862:	d003      	beq.n	800386c <_printf_i+0xc8>
 8003864:	1d08      	adds	r0, r1, #4
 8003866:	6018      	str	r0, [r3, #0]
 8003868:	680b      	ldr	r3, [r1, #0]
 800386a:	e006      	b.n	800387a <_printf_i+0xd6>
 800386c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003870:	f101 0004 	add.w	r0, r1, #4
 8003874:	6018      	str	r0, [r3, #0]
 8003876:	d0f7      	beq.n	8003868 <_printf_i+0xc4>
 8003878:	880b      	ldrh	r3, [r1, #0]
 800387a:	2a6f      	cmp	r2, #111	; 0x6f
 800387c:	bf14      	ite	ne
 800387e:	220a      	movne	r2, #10
 8003880:	2208      	moveq	r2, #8
 8003882:	4957      	ldr	r1, [pc, #348]	; (80039e0 <_printf_i+0x23c>)
 8003884:	2000      	movs	r0, #0
 8003886:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 800388a:	6865      	ldr	r5, [r4, #4]
 800388c:	2d00      	cmp	r5, #0
 800388e:	60a5      	str	r5, [r4, #8]
 8003890:	f2c0 809c 	blt.w	80039cc <_printf_i+0x228>
 8003894:	6820      	ldr	r0, [r4, #0]
 8003896:	f020 0004 	bic.w	r0, r0, #4
 800389a:	6020      	str	r0, [r4, #0]
 800389c:	2b00      	cmp	r3, #0
 800389e:	d13f      	bne.n	8003920 <_printf_i+0x17c>
 80038a0:	2d00      	cmp	r5, #0
 80038a2:	f040 8095 	bne.w	80039d0 <_printf_i+0x22c>
 80038a6:	4675      	mov	r5, lr
 80038a8:	2a08      	cmp	r2, #8
 80038aa:	d10b      	bne.n	80038c4 <_printf_i+0x120>
 80038ac:	6823      	ldr	r3, [r4, #0]
 80038ae:	07da      	lsls	r2, r3, #31
 80038b0:	d508      	bpl.n	80038c4 <_printf_i+0x120>
 80038b2:	6923      	ldr	r3, [r4, #16]
 80038b4:	6862      	ldr	r2, [r4, #4]
 80038b6:	429a      	cmp	r2, r3
 80038b8:	bfde      	ittt	le
 80038ba:	2330      	movle	r3, #48	; 0x30
 80038bc:	f805 3c01 	strble.w	r3, [r5, #-1]
 80038c0:	f105 35ff 	addle.w	r5, r5, #4294967295
 80038c4:	ebae 0305 	sub.w	r3, lr, r5
 80038c8:	6123      	str	r3, [r4, #16]
 80038ca:	f8cd 8000 	str.w	r8, [sp]
 80038ce:	463b      	mov	r3, r7
 80038d0:	aa03      	add	r2, sp, #12
 80038d2:	4621      	mov	r1, r4
 80038d4:	4630      	mov	r0, r6
 80038d6:	f7ff feed 	bl	80036b4 <_printf_common>
 80038da:	3001      	adds	r0, #1
 80038dc:	d155      	bne.n	800398a <_printf_i+0x1e6>
 80038de:	f04f 30ff 	mov.w	r0, #4294967295
 80038e2:	b005      	add	sp, #20
 80038e4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80038e8:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 80038ec:	493c      	ldr	r1, [pc, #240]	; (80039e0 <_printf_i+0x23c>)
 80038ee:	6822      	ldr	r2, [r4, #0]
 80038f0:	6818      	ldr	r0, [r3, #0]
 80038f2:	f012 0f80 	tst.w	r2, #128	; 0x80
 80038f6:	f100 0504 	add.w	r5, r0, #4
 80038fa:	601d      	str	r5, [r3, #0]
 80038fc:	d001      	beq.n	8003902 <_printf_i+0x15e>
 80038fe:	6803      	ldr	r3, [r0, #0]
 8003900:	e002      	b.n	8003908 <_printf_i+0x164>
 8003902:	0655      	lsls	r5, r2, #25
 8003904:	d5fb      	bpl.n	80038fe <_printf_i+0x15a>
 8003906:	8803      	ldrh	r3, [r0, #0]
 8003908:	07d0      	lsls	r0, r2, #31
 800390a:	bf44      	itt	mi
 800390c:	f042 0220 	orrmi.w	r2, r2, #32
 8003910:	6022      	strmi	r2, [r4, #0]
 8003912:	b91b      	cbnz	r3, 800391c <_printf_i+0x178>
 8003914:	6822      	ldr	r2, [r4, #0]
 8003916:	f022 0220 	bic.w	r2, r2, #32
 800391a:	6022      	str	r2, [r4, #0]
 800391c:	2210      	movs	r2, #16
 800391e:	e7b1      	b.n	8003884 <_printf_i+0xe0>
 8003920:	4675      	mov	r5, lr
 8003922:	fbb3 f0f2 	udiv	r0, r3, r2
 8003926:	fb02 3310 	mls	r3, r2, r0, r3
 800392a:	5ccb      	ldrb	r3, [r1, r3]
 800392c:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8003930:	4603      	mov	r3, r0
 8003932:	2800      	cmp	r0, #0
 8003934:	d1f5      	bne.n	8003922 <_printf_i+0x17e>
 8003936:	e7b7      	b.n	80038a8 <_printf_i+0x104>
 8003938:	6808      	ldr	r0, [r1, #0]
 800393a:	681a      	ldr	r2, [r3, #0]
 800393c:	f010 0f80 	tst.w	r0, #128	; 0x80
 8003940:	6949      	ldr	r1, [r1, #20]
 8003942:	d004      	beq.n	800394e <_printf_i+0x1aa>
 8003944:	1d10      	adds	r0, r2, #4
 8003946:	6018      	str	r0, [r3, #0]
 8003948:	6813      	ldr	r3, [r2, #0]
 800394a:	6019      	str	r1, [r3, #0]
 800394c:	e007      	b.n	800395e <_printf_i+0x1ba>
 800394e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003952:	f102 0004 	add.w	r0, r2, #4
 8003956:	6018      	str	r0, [r3, #0]
 8003958:	6813      	ldr	r3, [r2, #0]
 800395a:	d0f6      	beq.n	800394a <_printf_i+0x1a6>
 800395c:	8019      	strh	r1, [r3, #0]
 800395e:	2300      	movs	r3, #0
 8003960:	4675      	mov	r5, lr
 8003962:	6123      	str	r3, [r4, #16]
 8003964:	e7b1      	b.n	80038ca <_printf_i+0x126>
 8003966:	681a      	ldr	r2, [r3, #0]
 8003968:	1d11      	adds	r1, r2, #4
 800396a:	6019      	str	r1, [r3, #0]
 800396c:	6815      	ldr	r5, [r2, #0]
 800396e:	2100      	movs	r1, #0
 8003970:	6862      	ldr	r2, [r4, #4]
 8003972:	4628      	mov	r0, r5
 8003974:	f000 faca 	bl	8003f0c <memchr>
 8003978:	b108      	cbz	r0, 800397e <_printf_i+0x1da>
 800397a:	1b40      	subs	r0, r0, r5
 800397c:	6060      	str	r0, [r4, #4]
 800397e:	6863      	ldr	r3, [r4, #4]
 8003980:	6123      	str	r3, [r4, #16]
 8003982:	2300      	movs	r3, #0
 8003984:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003988:	e79f      	b.n	80038ca <_printf_i+0x126>
 800398a:	6923      	ldr	r3, [r4, #16]
 800398c:	462a      	mov	r2, r5
 800398e:	4639      	mov	r1, r7
 8003990:	4630      	mov	r0, r6
 8003992:	47c0      	blx	r8
 8003994:	3001      	adds	r0, #1
 8003996:	d0a2      	beq.n	80038de <_printf_i+0x13a>
 8003998:	6823      	ldr	r3, [r4, #0]
 800399a:	079b      	lsls	r3, r3, #30
 800399c:	d507      	bpl.n	80039ae <_printf_i+0x20a>
 800399e:	2500      	movs	r5, #0
 80039a0:	f104 0919 	add.w	r9, r4, #25
 80039a4:	68e3      	ldr	r3, [r4, #12]
 80039a6:	9a03      	ldr	r2, [sp, #12]
 80039a8:	1a9b      	subs	r3, r3, r2
 80039aa:	429d      	cmp	r5, r3
 80039ac:	db05      	blt.n	80039ba <_printf_i+0x216>
 80039ae:	68e0      	ldr	r0, [r4, #12]
 80039b0:	9b03      	ldr	r3, [sp, #12]
 80039b2:	4298      	cmp	r0, r3
 80039b4:	bfb8      	it	lt
 80039b6:	4618      	movlt	r0, r3
 80039b8:	e793      	b.n	80038e2 <_printf_i+0x13e>
 80039ba:	2301      	movs	r3, #1
 80039bc:	464a      	mov	r2, r9
 80039be:	4639      	mov	r1, r7
 80039c0:	4630      	mov	r0, r6
 80039c2:	47c0      	blx	r8
 80039c4:	3001      	adds	r0, #1
 80039c6:	d08a      	beq.n	80038de <_printf_i+0x13a>
 80039c8:	3501      	adds	r5, #1
 80039ca:	e7eb      	b.n	80039a4 <_printf_i+0x200>
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d1a7      	bne.n	8003920 <_printf_i+0x17c>
 80039d0:	780b      	ldrb	r3, [r1, #0]
 80039d2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80039d6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80039da:	e765      	b.n	80038a8 <_printf_i+0x104>
 80039dc:	08004166 	.word	0x08004166
 80039e0:	08004155 	.word	0x08004155

080039e4 <_putc_r>:
 80039e4:	b570      	push	{r4, r5, r6, lr}
 80039e6:	460d      	mov	r5, r1
 80039e8:	4614      	mov	r4, r2
 80039ea:	4606      	mov	r6, r0
 80039ec:	b118      	cbz	r0, 80039f6 <_putc_r+0x12>
 80039ee:	6983      	ldr	r3, [r0, #24]
 80039f0:	b90b      	cbnz	r3, 80039f6 <_putc_r+0x12>
 80039f2:	f7ff fc39 	bl	8003268 <__sinit>
 80039f6:	4b13      	ldr	r3, [pc, #76]	; (8003a44 <_putc_r+0x60>)
 80039f8:	429c      	cmp	r4, r3
 80039fa:	d112      	bne.n	8003a22 <_putc_r+0x3e>
 80039fc:	6874      	ldr	r4, [r6, #4]
 80039fe:	68a3      	ldr	r3, [r4, #8]
 8003a00:	3b01      	subs	r3, #1
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	60a3      	str	r3, [r4, #8]
 8003a06:	da16      	bge.n	8003a36 <_putc_r+0x52>
 8003a08:	69a2      	ldr	r2, [r4, #24]
 8003a0a:	4293      	cmp	r3, r2
 8003a0c:	db02      	blt.n	8003a14 <_putc_r+0x30>
 8003a0e:	b2eb      	uxtb	r3, r5
 8003a10:	2b0a      	cmp	r3, #10
 8003a12:	d110      	bne.n	8003a36 <_putc_r+0x52>
 8003a14:	4622      	mov	r2, r4
 8003a16:	4629      	mov	r1, r5
 8003a18:	4630      	mov	r0, r6
 8003a1a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8003a1e:	f000 b86b 	b.w	8003af8 <__swbuf_r>
 8003a22:	4b09      	ldr	r3, [pc, #36]	; (8003a48 <_putc_r+0x64>)
 8003a24:	429c      	cmp	r4, r3
 8003a26:	d101      	bne.n	8003a2c <_putc_r+0x48>
 8003a28:	68b4      	ldr	r4, [r6, #8]
 8003a2a:	e7e8      	b.n	80039fe <_putc_r+0x1a>
 8003a2c:	4b07      	ldr	r3, [pc, #28]	; (8003a4c <_putc_r+0x68>)
 8003a2e:	429c      	cmp	r4, r3
 8003a30:	bf08      	it	eq
 8003a32:	68f4      	ldreq	r4, [r6, #12]
 8003a34:	e7e3      	b.n	80039fe <_putc_r+0x1a>
 8003a36:	6823      	ldr	r3, [r4, #0]
 8003a38:	b2e8      	uxtb	r0, r5
 8003a3a:	1c5a      	adds	r2, r3, #1
 8003a3c:	6022      	str	r2, [r4, #0]
 8003a3e:	701d      	strb	r5, [r3, #0]
 8003a40:	bd70      	pop	{r4, r5, r6, pc}
 8003a42:	bf00      	nop
 8003a44:	08004104 	.word	0x08004104
 8003a48:	08004124 	.word	0x08004124
 8003a4c:	080040e4 	.word	0x080040e4

08003a50 <_sbrk_r>:
 8003a50:	b538      	push	{r3, r4, r5, lr}
 8003a52:	2300      	movs	r3, #0
 8003a54:	4c05      	ldr	r4, [pc, #20]	; (8003a6c <_sbrk_r+0x1c>)
 8003a56:	4605      	mov	r5, r0
 8003a58:	4608      	mov	r0, r1
 8003a5a:	6023      	str	r3, [r4, #0]
 8003a5c:	f7ff f904 	bl	8002c68 <_sbrk>
 8003a60:	1c43      	adds	r3, r0, #1
 8003a62:	d102      	bne.n	8003a6a <_sbrk_r+0x1a>
 8003a64:	6823      	ldr	r3, [r4, #0]
 8003a66:	b103      	cbz	r3, 8003a6a <_sbrk_r+0x1a>
 8003a68:	602b      	str	r3, [r5, #0]
 8003a6a:	bd38      	pop	{r3, r4, r5, pc}
 8003a6c:	20001384 	.word	0x20001384

08003a70 <__sread>:
 8003a70:	b510      	push	{r4, lr}
 8003a72:	460c      	mov	r4, r1
 8003a74:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003a78:	f000 faa4 	bl	8003fc4 <_read_r>
 8003a7c:	2800      	cmp	r0, #0
 8003a7e:	bfab      	itete	ge
 8003a80:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003a82:	89a3      	ldrhlt	r3, [r4, #12]
 8003a84:	181b      	addge	r3, r3, r0
 8003a86:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003a8a:	bfac      	ite	ge
 8003a8c:	6563      	strge	r3, [r4, #84]	; 0x54
 8003a8e:	81a3      	strhlt	r3, [r4, #12]
 8003a90:	bd10      	pop	{r4, pc}

08003a92 <__swrite>:
 8003a92:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003a96:	461f      	mov	r7, r3
 8003a98:	898b      	ldrh	r3, [r1, #12]
 8003a9a:	4605      	mov	r5, r0
 8003a9c:	05db      	lsls	r3, r3, #23
 8003a9e:	460c      	mov	r4, r1
 8003aa0:	4616      	mov	r6, r2
 8003aa2:	d505      	bpl.n	8003ab0 <__swrite+0x1e>
 8003aa4:	2302      	movs	r3, #2
 8003aa6:	2200      	movs	r2, #0
 8003aa8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003aac:	f000 f9b8 	bl	8003e20 <_lseek_r>
 8003ab0:	89a3      	ldrh	r3, [r4, #12]
 8003ab2:	4632      	mov	r2, r6
 8003ab4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003ab8:	81a3      	strh	r3, [r4, #12]
 8003aba:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003abe:	463b      	mov	r3, r7
 8003ac0:	4628      	mov	r0, r5
 8003ac2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003ac6:	f000 b869 	b.w	8003b9c <_write_r>

08003aca <__sseek>:
 8003aca:	b510      	push	{r4, lr}
 8003acc:	460c      	mov	r4, r1
 8003ace:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003ad2:	f000 f9a5 	bl	8003e20 <_lseek_r>
 8003ad6:	1c43      	adds	r3, r0, #1
 8003ad8:	89a3      	ldrh	r3, [r4, #12]
 8003ada:	bf15      	itete	ne
 8003adc:	6560      	strne	r0, [r4, #84]	; 0x54
 8003ade:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003ae2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003ae6:	81a3      	strheq	r3, [r4, #12]
 8003ae8:	bf18      	it	ne
 8003aea:	81a3      	strhne	r3, [r4, #12]
 8003aec:	bd10      	pop	{r4, pc}

08003aee <__sclose>:
 8003aee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003af2:	f000 b8d3 	b.w	8003c9c <_close_r>
	...

08003af8 <__swbuf_r>:
 8003af8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003afa:	460e      	mov	r6, r1
 8003afc:	4614      	mov	r4, r2
 8003afe:	4605      	mov	r5, r0
 8003b00:	b118      	cbz	r0, 8003b0a <__swbuf_r+0x12>
 8003b02:	6983      	ldr	r3, [r0, #24]
 8003b04:	b90b      	cbnz	r3, 8003b0a <__swbuf_r+0x12>
 8003b06:	f7ff fbaf 	bl	8003268 <__sinit>
 8003b0a:	4b21      	ldr	r3, [pc, #132]	; (8003b90 <__swbuf_r+0x98>)
 8003b0c:	429c      	cmp	r4, r3
 8003b0e:	d12a      	bne.n	8003b66 <__swbuf_r+0x6e>
 8003b10:	686c      	ldr	r4, [r5, #4]
 8003b12:	69a3      	ldr	r3, [r4, #24]
 8003b14:	60a3      	str	r3, [r4, #8]
 8003b16:	89a3      	ldrh	r3, [r4, #12]
 8003b18:	071a      	lsls	r2, r3, #28
 8003b1a:	d52e      	bpl.n	8003b7a <__swbuf_r+0x82>
 8003b1c:	6923      	ldr	r3, [r4, #16]
 8003b1e:	b363      	cbz	r3, 8003b7a <__swbuf_r+0x82>
 8003b20:	6923      	ldr	r3, [r4, #16]
 8003b22:	6820      	ldr	r0, [r4, #0]
 8003b24:	b2f6      	uxtb	r6, r6
 8003b26:	1ac0      	subs	r0, r0, r3
 8003b28:	6963      	ldr	r3, [r4, #20]
 8003b2a:	4637      	mov	r7, r6
 8003b2c:	4298      	cmp	r0, r3
 8003b2e:	db04      	blt.n	8003b3a <__swbuf_r+0x42>
 8003b30:	4621      	mov	r1, r4
 8003b32:	4628      	mov	r0, r5
 8003b34:	f000 f94a 	bl	8003dcc <_fflush_r>
 8003b38:	bb28      	cbnz	r0, 8003b86 <__swbuf_r+0x8e>
 8003b3a:	68a3      	ldr	r3, [r4, #8]
 8003b3c:	3001      	adds	r0, #1
 8003b3e:	3b01      	subs	r3, #1
 8003b40:	60a3      	str	r3, [r4, #8]
 8003b42:	6823      	ldr	r3, [r4, #0]
 8003b44:	1c5a      	adds	r2, r3, #1
 8003b46:	6022      	str	r2, [r4, #0]
 8003b48:	701e      	strb	r6, [r3, #0]
 8003b4a:	6963      	ldr	r3, [r4, #20]
 8003b4c:	4298      	cmp	r0, r3
 8003b4e:	d004      	beq.n	8003b5a <__swbuf_r+0x62>
 8003b50:	89a3      	ldrh	r3, [r4, #12]
 8003b52:	07db      	lsls	r3, r3, #31
 8003b54:	d519      	bpl.n	8003b8a <__swbuf_r+0x92>
 8003b56:	2e0a      	cmp	r6, #10
 8003b58:	d117      	bne.n	8003b8a <__swbuf_r+0x92>
 8003b5a:	4621      	mov	r1, r4
 8003b5c:	4628      	mov	r0, r5
 8003b5e:	f000 f935 	bl	8003dcc <_fflush_r>
 8003b62:	b190      	cbz	r0, 8003b8a <__swbuf_r+0x92>
 8003b64:	e00f      	b.n	8003b86 <__swbuf_r+0x8e>
 8003b66:	4b0b      	ldr	r3, [pc, #44]	; (8003b94 <__swbuf_r+0x9c>)
 8003b68:	429c      	cmp	r4, r3
 8003b6a:	d101      	bne.n	8003b70 <__swbuf_r+0x78>
 8003b6c:	68ac      	ldr	r4, [r5, #8]
 8003b6e:	e7d0      	b.n	8003b12 <__swbuf_r+0x1a>
 8003b70:	4b09      	ldr	r3, [pc, #36]	; (8003b98 <__swbuf_r+0xa0>)
 8003b72:	429c      	cmp	r4, r3
 8003b74:	bf08      	it	eq
 8003b76:	68ec      	ldreq	r4, [r5, #12]
 8003b78:	e7cb      	b.n	8003b12 <__swbuf_r+0x1a>
 8003b7a:	4621      	mov	r1, r4
 8003b7c:	4628      	mov	r0, r5
 8003b7e:	f000 f81f 	bl	8003bc0 <__swsetup_r>
 8003b82:	2800      	cmp	r0, #0
 8003b84:	d0cc      	beq.n	8003b20 <__swbuf_r+0x28>
 8003b86:	f04f 37ff 	mov.w	r7, #4294967295
 8003b8a:	4638      	mov	r0, r7
 8003b8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003b8e:	bf00      	nop
 8003b90:	08004104 	.word	0x08004104
 8003b94:	08004124 	.word	0x08004124
 8003b98:	080040e4 	.word	0x080040e4

08003b9c <_write_r>:
 8003b9c:	b538      	push	{r3, r4, r5, lr}
 8003b9e:	4605      	mov	r5, r0
 8003ba0:	4608      	mov	r0, r1
 8003ba2:	4611      	mov	r1, r2
 8003ba4:	2200      	movs	r2, #0
 8003ba6:	4c05      	ldr	r4, [pc, #20]	; (8003bbc <_write_r+0x20>)
 8003ba8:	6022      	str	r2, [r4, #0]
 8003baa:	461a      	mov	r2, r3
 8003bac:	f7ff f84e 	bl	8002c4c <_write>
 8003bb0:	1c43      	adds	r3, r0, #1
 8003bb2:	d102      	bne.n	8003bba <_write_r+0x1e>
 8003bb4:	6823      	ldr	r3, [r4, #0]
 8003bb6:	b103      	cbz	r3, 8003bba <_write_r+0x1e>
 8003bb8:	602b      	str	r3, [r5, #0]
 8003bba:	bd38      	pop	{r3, r4, r5, pc}
 8003bbc:	20001384 	.word	0x20001384

08003bc0 <__swsetup_r>:
 8003bc0:	4b32      	ldr	r3, [pc, #200]	; (8003c8c <__swsetup_r+0xcc>)
 8003bc2:	b570      	push	{r4, r5, r6, lr}
 8003bc4:	681d      	ldr	r5, [r3, #0]
 8003bc6:	4606      	mov	r6, r0
 8003bc8:	460c      	mov	r4, r1
 8003bca:	b125      	cbz	r5, 8003bd6 <__swsetup_r+0x16>
 8003bcc:	69ab      	ldr	r3, [r5, #24]
 8003bce:	b913      	cbnz	r3, 8003bd6 <__swsetup_r+0x16>
 8003bd0:	4628      	mov	r0, r5
 8003bd2:	f7ff fb49 	bl	8003268 <__sinit>
 8003bd6:	4b2e      	ldr	r3, [pc, #184]	; (8003c90 <__swsetup_r+0xd0>)
 8003bd8:	429c      	cmp	r4, r3
 8003bda:	d10f      	bne.n	8003bfc <__swsetup_r+0x3c>
 8003bdc:	686c      	ldr	r4, [r5, #4]
 8003bde:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003be2:	b29a      	uxth	r2, r3
 8003be4:	0715      	lsls	r5, r2, #28
 8003be6:	d42c      	bmi.n	8003c42 <__swsetup_r+0x82>
 8003be8:	06d0      	lsls	r0, r2, #27
 8003bea:	d411      	bmi.n	8003c10 <__swsetup_r+0x50>
 8003bec:	2209      	movs	r2, #9
 8003bee:	6032      	str	r2, [r6, #0]
 8003bf0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003bf4:	81a3      	strh	r3, [r4, #12]
 8003bf6:	f04f 30ff 	mov.w	r0, #4294967295
 8003bfa:	bd70      	pop	{r4, r5, r6, pc}
 8003bfc:	4b25      	ldr	r3, [pc, #148]	; (8003c94 <__swsetup_r+0xd4>)
 8003bfe:	429c      	cmp	r4, r3
 8003c00:	d101      	bne.n	8003c06 <__swsetup_r+0x46>
 8003c02:	68ac      	ldr	r4, [r5, #8]
 8003c04:	e7eb      	b.n	8003bde <__swsetup_r+0x1e>
 8003c06:	4b24      	ldr	r3, [pc, #144]	; (8003c98 <__swsetup_r+0xd8>)
 8003c08:	429c      	cmp	r4, r3
 8003c0a:	bf08      	it	eq
 8003c0c:	68ec      	ldreq	r4, [r5, #12]
 8003c0e:	e7e6      	b.n	8003bde <__swsetup_r+0x1e>
 8003c10:	0751      	lsls	r1, r2, #29
 8003c12:	d512      	bpl.n	8003c3a <__swsetup_r+0x7a>
 8003c14:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003c16:	b141      	cbz	r1, 8003c2a <__swsetup_r+0x6a>
 8003c18:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003c1c:	4299      	cmp	r1, r3
 8003c1e:	d002      	beq.n	8003c26 <__swsetup_r+0x66>
 8003c20:	4630      	mov	r0, r6
 8003c22:	f000 f983 	bl	8003f2c <_free_r>
 8003c26:	2300      	movs	r3, #0
 8003c28:	6363      	str	r3, [r4, #52]	; 0x34
 8003c2a:	89a3      	ldrh	r3, [r4, #12]
 8003c2c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003c30:	81a3      	strh	r3, [r4, #12]
 8003c32:	2300      	movs	r3, #0
 8003c34:	6063      	str	r3, [r4, #4]
 8003c36:	6923      	ldr	r3, [r4, #16]
 8003c38:	6023      	str	r3, [r4, #0]
 8003c3a:	89a3      	ldrh	r3, [r4, #12]
 8003c3c:	f043 0308 	orr.w	r3, r3, #8
 8003c40:	81a3      	strh	r3, [r4, #12]
 8003c42:	6923      	ldr	r3, [r4, #16]
 8003c44:	b94b      	cbnz	r3, 8003c5a <__swsetup_r+0x9a>
 8003c46:	89a3      	ldrh	r3, [r4, #12]
 8003c48:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003c4c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003c50:	d003      	beq.n	8003c5a <__swsetup_r+0x9a>
 8003c52:	4621      	mov	r1, r4
 8003c54:	4630      	mov	r0, r6
 8003c56:	f000 f919 	bl	8003e8c <__smakebuf_r>
 8003c5a:	89a2      	ldrh	r2, [r4, #12]
 8003c5c:	f012 0301 	ands.w	r3, r2, #1
 8003c60:	d00c      	beq.n	8003c7c <__swsetup_r+0xbc>
 8003c62:	2300      	movs	r3, #0
 8003c64:	60a3      	str	r3, [r4, #8]
 8003c66:	6963      	ldr	r3, [r4, #20]
 8003c68:	425b      	negs	r3, r3
 8003c6a:	61a3      	str	r3, [r4, #24]
 8003c6c:	6923      	ldr	r3, [r4, #16]
 8003c6e:	b953      	cbnz	r3, 8003c86 <__swsetup_r+0xc6>
 8003c70:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003c74:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8003c78:	d1ba      	bne.n	8003bf0 <__swsetup_r+0x30>
 8003c7a:	bd70      	pop	{r4, r5, r6, pc}
 8003c7c:	0792      	lsls	r2, r2, #30
 8003c7e:	bf58      	it	pl
 8003c80:	6963      	ldrpl	r3, [r4, #20]
 8003c82:	60a3      	str	r3, [r4, #8]
 8003c84:	e7f2      	b.n	8003c6c <__swsetup_r+0xac>
 8003c86:	2000      	movs	r0, #0
 8003c88:	e7f7      	b.n	8003c7a <__swsetup_r+0xba>
 8003c8a:	bf00      	nop
 8003c8c:	2000017c 	.word	0x2000017c
 8003c90:	08004104 	.word	0x08004104
 8003c94:	08004124 	.word	0x08004124
 8003c98:	080040e4 	.word	0x080040e4

08003c9c <_close_r>:
 8003c9c:	b538      	push	{r3, r4, r5, lr}
 8003c9e:	2300      	movs	r3, #0
 8003ca0:	4c05      	ldr	r4, [pc, #20]	; (8003cb8 <_close_r+0x1c>)
 8003ca2:	4605      	mov	r5, r0
 8003ca4:	4608      	mov	r0, r1
 8003ca6:	6023      	str	r3, [r4, #0]
 8003ca8:	f7fe fff8 	bl	8002c9c <_close>
 8003cac:	1c43      	adds	r3, r0, #1
 8003cae:	d102      	bne.n	8003cb6 <_close_r+0x1a>
 8003cb0:	6823      	ldr	r3, [r4, #0]
 8003cb2:	b103      	cbz	r3, 8003cb6 <_close_r+0x1a>
 8003cb4:	602b      	str	r3, [r5, #0]
 8003cb6:	bd38      	pop	{r3, r4, r5, pc}
 8003cb8:	20001384 	.word	0x20001384

08003cbc <__sflush_r>:
 8003cbc:	898a      	ldrh	r2, [r1, #12]
 8003cbe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003cc2:	4605      	mov	r5, r0
 8003cc4:	0710      	lsls	r0, r2, #28
 8003cc6:	460c      	mov	r4, r1
 8003cc8:	d45a      	bmi.n	8003d80 <__sflush_r+0xc4>
 8003cca:	684b      	ldr	r3, [r1, #4]
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	dc05      	bgt.n	8003cdc <__sflush_r+0x20>
 8003cd0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	dc02      	bgt.n	8003cdc <__sflush_r+0x20>
 8003cd6:	2000      	movs	r0, #0
 8003cd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003cdc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003cde:	2e00      	cmp	r6, #0
 8003ce0:	d0f9      	beq.n	8003cd6 <__sflush_r+0x1a>
 8003ce2:	2300      	movs	r3, #0
 8003ce4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003ce8:	682f      	ldr	r7, [r5, #0]
 8003cea:	602b      	str	r3, [r5, #0]
 8003cec:	d033      	beq.n	8003d56 <__sflush_r+0x9a>
 8003cee:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003cf0:	89a3      	ldrh	r3, [r4, #12]
 8003cf2:	075a      	lsls	r2, r3, #29
 8003cf4:	d505      	bpl.n	8003d02 <__sflush_r+0x46>
 8003cf6:	6863      	ldr	r3, [r4, #4]
 8003cf8:	1ac0      	subs	r0, r0, r3
 8003cfa:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003cfc:	b10b      	cbz	r3, 8003d02 <__sflush_r+0x46>
 8003cfe:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003d00:	1ac0      	subs	r0, r0, r3
 8003d02:	2300      	movs	r3, #0
 8003d04:	4602      	mov	r2, r0
 8003d06:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003d08:	6a21      	ldr	r1, [r4, #32]
 8003d0a:	4628      	mov	r0, r5
 8003d0c:	47b0      	blx	r6
 8003d0e:	1c43      	adds	r3, r0, #1
 8003d10:	89a3      	ldrh	r3, [r4, #12]
 8003d12:	d106      	bne.n	8003d22 <__sflush_r+0x66>
 8003d14:	6829      	ldr	r1, [r5, #0]
 8003d16:	291d      	cmp	r1, #29
 8003d18:	d84b      	bhi.n	8003db2 <__sflush_r+0xf6>
 8003d1a:	4a2b      	ldr	r2, [pc, #172]	; (8003dc8 <__sflush_r+0x10c>)
 8003d1c:	40ca      	lsrs	r2, r1
 8003d1e:	07d6      	lsls	r6, r2, #31
 8003d20:	d547      	bpl.n	8003db2 <__sflush_r+0xf6>
 8003d22:	2200      	movs	r2, #0
 8003d24:	6062      	str	r2, [r4, #4]
 8003d26:	6922      	ldr	r2, [r4, #16]
 8003d28:	04d9      	lsls	r1, r3, #19
 8003d2a:	6022      	str	r2, [r4, #0]
 8003d2c:	d504      	bpl.n	8003d38 <__sflush_r+0x7c>
 8003d2e:	1c42      	adds	r2, r0, #1
 8003d30:	d101      	bne.n	8003d36 <__sflush_r+0x7a>
 8003d32:	682b      	ldr	r3, [r5, #0]
 8003d34:	b903      	cbnz	r3, 8003d38 <__sflush_r+0x7c>
 8003d36:	6560      	str	r0, [r4, #84]	; 0x54
 8003d38:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003d3a:	602f      	str	r7, [r5, #0]
 8003d3c:	2900      	cmp	r1, #0
 8003d3e:	d0ca      	beq.n	8003cd6 <__sflush_r+0x1a>
 8003d40:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003d44:	4299      	cmp	r1, r3
 8003d46:	d002      	beq.n	8003d4e <__sflush_r+0x92>
 8003d48:	4628      	mov	r0, r5
 8003d4a:	f000 f8ef 	bl	8003f2c <_free_r>
 8003d4e:	2000      	movs	r0, #0
 8003d50:	6360      	str	r0, [r4, #52]	; 0x34
 8003d52:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003d56:	6a21      	ldr	r1, [r4, #32]
 8003d58:	2301      	movs	r3, #1
 8003d5a:	4628      	mov	r0, r5
 8003d5c:	47b0      	blx	r6
 8003d5e:	1c41      	adds	r1, r0, #1
 8003d60:	d1c6      	bne.n	8003cf0 <__sflush_r+0x34>
 8003d62:	682b      	ldr	r3, [r5, #0]
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d0c3      	beq.n	8003cf0 <__sflush_r+0x34>
 8003d68:	2b1d      	cmp	r3, #29
 8003d6a:	d001      	beq.n	8003d70 <__sflush_r+0xb4>
 8003d6c:	2b16      	cmp	r3, #22
 8003d6e:	d101      	bne.n	8003d74 <__sflush_r+0xb8>
 8003d70:	602f      	str	r7, [r5, #0]
 8003d72:	e7b0      	b.n	8003cd6 <__sflush_r+0x1a>
 8003d74:	89a3      	ldrh	r3, [r4, #12]
 8003d76:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003d7a:	81a3      	strh	r3, [r4, #12]
 8003d7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003d80:	690f      	ldr	r7, [r1, #16]
 8003d82:	2f00      	cmp	r7, #0
 8003d84:	d0a7      	beq.n	8003cd6 <__sflush_r+0x1a>
 8003d86:	0793      	lsls	r3, r2, #30
 8003d88:	bf18      	it	ne
 8003d8a:	2300      	movne	r3, #0
 8003d8c:	680e      	ldr	r6, [r1, #0]
 8003d8e:	bf08      	it	eq
 8003d90:	694b      	ldreq	r3, [r1, #20]
 8003d92:	eba6 0807 	sub.w	r8, r6, r7
 8003d96:	600f      	str	r7, [r1, #0]
 8003d98:	608b      	str	r3, [r1, #8]
 8003d9a:	f1b8 0f00 	cmp.w	r8, #0
 8003d9e:	dd9a      	ble.n	8003cd6 <__sflush_r+0x1a>
 8003da0:	4643      	mov	r3, r8
 8003da2:	463a      	mov	r2, r7
 8003da4:	6a21      	ldr	r1, [r4, #32]
 8003da6:	4628      	mov	r0, r5
 8003da8:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8003daa:	47b0      	blx	r6
 8003dac:	2800      	cmp	r0, #0
 8003dae:	dc07      	bgt.n	8003dc0 <__sflush_r+0x104>
 8003db0:	89a3      	ldrh	r3, [r4, #12]
 8003db2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003db6:	81a3      	strh	r3, [r4, #12]
 8003db8:	f04f 30ff 	mov.w	r0, #4294967295
 8003dbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003dc0:	4407      	add	r7, r0
 8003dc2:	eba8 0800 	sub.w	r8, r8, r0
 8003dc6:	e7e8      	b.n	8003d9a <__sflush_r+0xde>
 8003dc8:	20400001 	.word	0x20400001

08003dcc <_fflush_r>:
 8003dcc:	b538      	push	{r3, r4, r5, lr}
 8003dce:	690b      	ldr	r3, [r1, #16]
 8003dd0:	4605      	mov	r5, r0
 8003dd2:	460c      	mov	r4, r1
 8003dd4:	b1db      	cbz	r3, 8003e0e <_fflush_r+0x42>
 8003dd6:	b118      	cbz	r0, 8003de0 <_fflush_r+0x14>
 8003dd8:	6983      	ldr	r3, [r0, #24]
 8003dda:	b90b      	cbnz	r3, 8003de0 <_fflush_r+0x14>
 8003ddc:	f7ff fa44 	bl	8003268 <__sinit>
 8003de0:	4b0c      	ldr	r3, [pc, #48]	; (8003e14 <_fflush_r+0x48>)
 8003de2:	429c      	cmp	r4, r3
 8003de4:	d109      	bne.n	8003dfa <_fflush_r+0x2e>
 8003de6:	686c      	ldr	r4, [r5, #4]
 8003de8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003dec:	b17b      	cbz	r3, 8003e0e <_fflush_r+0x42>
 8003dee:	4621      	mov	r1, r4
 8003df0:	4628      	mov	r0, r5
 8003df2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003df6:	f7ff bf61 	b.w	8003cbc <__sflush_r>
 8003dfa:	4b07      	ldr	r3, [pc, #28]	; (8003e18 <_fflush_r+0x4c>)
 8003dfc:	429c      	cmp	r4, r3
 8003dfe:	d101      	bne.n	8003e04 <_fflush_r+0x38>
 8003e00:	68ac      	ldr	r4, [r5, #8]
 8003e02:	e7f1      	b.n	8003de8 <_fflush_r+0x1c>
 8003e04:	4b05      	ldr	r3, [pc, #20]	; (8003e1c <_fflush_r+0x50>)
 8003e06:	429c      	cmp	r4, r3
 8003e08:	bf08      	it	eq
 8003e0a:	68ec      	ldreq	r4, [r5, #12]
 8003e0c:	e7ec      	b.n	8003de8 <_fflush_r+0x1c>
 8003e0e:	2000      	movs	r0, #0
 8003e10:	bd38      	pop	{r3, r4, r5, pc}
 8003e12:	bf00      	nop
 8003e14:	08004104 	.word	0x08004104
 8003e18:	08004124 	.word	0x08004124
 8003e1c:	080040e4 	.word	0x080040e4

08003e20 <_lseek_r>:
 8003e20:	b538      	push	{r3, r4, r5, lr}
 8003e22:	4605      	mov	r5, r0
 8003e24:	4608      	mov	r0, r1
 8003e26:	4611      	mov	r1, r2
 8003e28:	2200      	movs	r2, #0
 8003e2a:	4c05      	ldr	r4, [pc, #20]	; (8003e40 <_lseek_r+0x20>)
 8003e2c:	6022      	str	r2, [r4, #0]
 8003e2e:	461a      	mov	r2, r3
 8003e30:	f7fe ff3e 	bl	8002cb0 <_lseek>
 8003e34:	1c43      	adds	r3, r0, #1
 8003e36:	d102      	bne.n	8003e3e <_lseek_r+0x1e>
 8003e38:	6823      	ldr	r3, [r4, #0]
 8003e3a:	b103      	cbz	r3, 8003e3e <_lseek_r+0x1e>
 8003e3c:	602b      	str	r3, [r5, #0]
 8003e3e:	bd38      	pop	{r3, r4, r5, pc}
 8003e40:	20001384 	.word	0x20001384

08003e44 <__swhatbuf_r>:
 8003e44:	b570      	push	{r4, r5, r6, lr}
 8003e46:	460e      	mov	r6, r1
 8003e48:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003e4c:	b090      	sub	sp, #64	; 0x40
 8003e4e:	2900      	cmp	r1, #0
 8003e50:	4614      	mov	r4, r2
 8003e52:	461d      	mov	r5, r3
 8003e54:	da07      	bge.n	8003e66 <__swhatbuf_r+0x22>
 8003e56:	2300      	movs	r3, #0
 8003e58:	602b      	str	r3, [r5, #0]
 8003e5a:	89b3      	ldrh	r3, [r6, #12]
 8003e5c:	061a      	lsls	r2, r3, #24
 8003e5e:	d410      	bmi.n	8003e82 <__swhatbuf_r+0x3e>
 8003e60:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003e64:	e00e      	b.n	8003e84 <__swhatbuf_r+0x40>
 8003e66:	aa01      	add	r2, sp, #4
 8003e68:	f000 f8be 	bl	8003fe8 <_fstat_r>
 8003e6c:	2800      	cmp	r0, #0
 8003e6e:	dbf2      	blt.n	8003e56 <__swhatbuf_r+0x12>
 8003e70:	9a02      	ldr	r2, [sp, #8]
 8003e72:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8003e76:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8003e7a:	425a      	negs	r2, r3
 8003e7c:	415a      	adcs	r2, r3
 8003e7e:	602a      	str	r2, [r5, #0]
 8003e80:	e7ee      	b.n	8003e60 <__swhatbuf_r+0x1c>
 8003e82:	2340      	movs	r3, #64	; 0x40
 8003e84:	2000      	movs	r0, #0
 8003e86:	6023      	str	r3, [r4, #0]
 8003e88:	b010      	add	sp, #64	; 0x40
 8003e8a:	bd70      	pop	{r4, r5, r6, pc}

08003e8c <__smakebuf_r>:
 8003e8c:	898b      	ldrh	r3, [r1, #12]
 8003e8e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003e90:	079d      	lsls	r5, r3, #30
 8003e92:	4606      	mov	r6, r0
 8003e94:	460c      	mov	r4, r1
 8003e96:	d507      	bpl.n	8003ea8 <__smakebuf_r+0x1c>
 8003e98:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003e9c:	6023      	str	r3, [r4, #0]
 8003e9e:	6123      	str	r3, [r4, #16]
 8003ea0:	2301      	movs	r3, #1
 8003ea2:	6163      	str	r3, [r4, #20]
 8003ea4:	b002      	add	sp, #8
 8003ea6:	bd70      	pop	{r4, r5, r6, pc}
 8003ea8:	ab01      	add	r3, sp, #4
 8003eaa:	466a      	mov	r2, sp
 8003eac:	f7ff ffca 	bl	8003e44 <__swhatbuf_r>
 8003eb0:	9900      	ldr	r1, [sp, #0]
 8003eb2:	4605      	mov	r5, r0
 8003eb4:	4630      	mov	r0, r6
 8003eb6:	f7ff fa61 	bl	800337c <_malloc_r>
 8003eba:	b948      	cbnz	r0, 8003ed0 <__smakebuf_r+0x44>
 8003ebc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003ec0:	059a      	lsls	r2, r3, #22
 8003ec2:	d4ef      	bmi.n	8003ea4 <__smakebuf_r+0x18>
 8003ec4:	f023 0303 	bic.w	r3, r3, #3
 8003ec8:	f043 0302 	orr.w	r3, r3, #2
 8003ecc:	81a3      	strh	r3, [r4, #12]
 8003ece:	e7e3      	b.n	8003e98 <__smakebuf_r+0xc>
 8003ed0:	4b0d      	ldr	r3, [pc, #52]	; (8003f08 <__smakebuf_r+0x7c>)
 8003ed2:	62b3      	str	r3, [r6, #40]	; 0x28
 8003ed4:	89a3      	ldrh	r3, [r4, #12]
 8003ed6:	6020      	str	r0, [r4, #0]
 8003ed8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003edc:	81a3      	strh	r3, [r4, #12]
 8003ede:	9b00      	ldr	r3, [sp, #0]
 8003ee0:	6120      	str	r0, [r4, #16]
 8003ee2:	6163      	str	r3, [r4, #20]
 8003ee4:	9b01      	ldr	r3, [sp, #4]
 8003ee6:	b15b      	cbz	r3, 8003f00 <__smakebuf_r+0x74>
 8003ee8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003eec:	4630      	mov	r0, r6
 8003eee:	f000 f88d 	bl	800400c <_isatty_r>
 8003ef2:	b128      	cbz	r0, 8003f00 <__smakebuf_r+0x74>
 8003ef4:	89a3      	ldrh	r3, [r4, #12]
 8003ef6:	f023 0303 	bic.w	r3, r3, #3
 8003efa:	f043 0301 	orr.w	r3, r3, #1
 8003efe:	81a3      	strh	r3, [r4, #12]
 8003f00:	89a3      	ldrh	r3, [r4, #12]
 8003f02:	431d      	orrs	r5, r3
 8003f04:	81a5      	strh	r5, [r4, #12]
 8003f06:	e7cd      	b.n	8003ea4 <__smakebuf_r+0x18>
 8003f08:	080031e9 	.word	0x080031e9

08003f0c <memchr>:
 8003f0c:	b510      	push	{r4, lr}
 8003f0e:	b2c9      	uxtb	r1, r1
 8003f10:	4402      	add	r2, r0
 8003f12:	4290      	cmp	r0, r2
 8003f14:	4603      	mov	r3, r0
 8003f16:	d101      	bne.n	8003f1c <memchr+0x10>
 8003f18:	2000      	movs	r0, #0
 8003f1a:	bd10      	pop	{r4, pc}
 8003f1c:	781c      	ldrb	r4, [r3, #0]
 8003f1e:	3001      	adds	r0, #1
 8003f20:	428c      	cmp	r4, r1
 8003f22:	d1f6      	bne.n	8003f12 <memchr+0x6>
 8003f24:	4618      	mov	r0, r3
 8003f26:	bd10      	pop	{r4, pc}

08003f28 <__malloc_lock>:
 8003f28:	4770      	bx	lr

08003f2a <__malloc_unlock>:
 8003f2a:	4770      	bx	lr

08003f2c <_free_r>:
 8003f2c:	b538      	push	{r3, r4, r5, lr}
 8003f2e:	4605      	mov	r5, r0
 8003f30:	2900      	cmp	r1, #0
 8003f32:	d043      	beq.n	8003fbc <_free_r+0x90>
 8003f34:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003f38:	1f0c      	subs	r4, r1, #4
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	bfb8      	it	lt
 8003f3e:	18e4      	addlt	r4, r4, r3
 8003f40:	f7ff fff2 	bl	8003f28 <__malloc_lock>
 8003f44:	4a1e      	ldr	r2, [pc, #120]	; (8003fc0 <_free_r+0x94>)
 8003f46:	6813      	ldr	r3, [r2, #0]
 8003f48:	4610      	mov	r0, r2
 8003f4a:	b933      	cbnz	r3, 8003f5a <_free_r+0x2e>
 8003f4c:	6063      	str	r3, [r4, #4]
 8003f4e:	6014      	str	r4, [r2, #0]
 8003f50:	4628      	mov	r0, r5
 8003f52:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003f56:	f7ff bfe8 	b.w	8003f2a <__malloc_unlock>
 8003f5a:	42a3      	cmp	r3, r4
 8003f5c:	d90b      	bls.n	8003f76 <_free_r+0x4a>
 8003f5e:	6821      	ldr	r1, [r4, #0]
 8003f60:	1862      	adds	r2, r4, r1
 8003f62:	4293      	cmp	r3, r2
 8003f64:	bf01      	itttt	eq
 8003f66:	681a      	ldreq	r2, [r3, #0]
 8003f68:	685b      	ldreq	r3, [r3, #4]
 8003f6a:	1852      	addeq	r2, r2, r1
 8003f6c:	6022      	streq	r2, [r4, #0]
 8003f6e:	6063      	str	r3, [r4, #4]
 8003f70:	6004      	str	r4, [r0, #0]
 8003f72:	e7ed      	b.n	8003f50 <_free_r+0x24>
 8003f74:	4613      	mov	r3, r2
 8003f76:	685a      	ldr	r2, [r3, #4]
 8003f78:	b10a      	cbz	r2, 8003f7e <_free_r+0x52>
 8003f7a:	42a2      	cmp	r2, r4
 8003f7c:	d9fa      	bls.n	8003f74 <_free_r+0x48>
 8003f7e:	6819      	ldr	r1, [r3, #0]
 8003f80:	1858      	adds	r0, r3, r1
 8003f82:	42a0      	cmp	r0, r4
 8003f84:	d10b      	bne.n	8003f9e <_free_r+0x72>
 8003f86:	6820      	ldr	r0, [r4, #0]
 8003f88:	4401      	add	r1, r0
 8003f8a:	1858      	adds	r0, r3, r1
 8003f8c:	4282      	cmp	r2, r0
 8003f8e:	6019      	str	r1, [r3, #0]
 8003f90:	d1de      	bne.n	8003f50 <_free_r+0x24>
 8003f92:	6810      	ldr	r0, [r2, #0]
 8003f94:	6852      	ldr	r2, [r2, #4]
 8003f96:	4401      	add	r1, r0
 8003f98:	6019      	str	r1, [r3, #0]
 8003f9a:	605a      	str	r2, [r3, #4]
 8003f9c:	e7d8      	b.n	8003f50 <_free_r+0x24>
 8003f9e:	d902      	bls.n	8003fa6 <_free_r+0x7a>
 8003fa0:	230c      	movs	r3, #12
 8003fa2:	602b      	str	r3, [r5, #0]
 8003fa4:	e7d4      	b.n	8003f50 <_free_r+0x24>
 8003fa6:	6820      	ldr	r0, [r4, #0]
 8003fa8:	1821      	adds	r1, r4, r0
 8003faa:	428a      	cmp	r2, r1
 8003fac:	bf01      	itttt	eq
 8003fae:	6811      	ldreq	r1, [r2, #0]
 8003fb0:	6852      	ldreq	r2, [r2, #4]
 8003fb2:	1809      	addeq	r1, r1, r0
 8003fb4:	6021      	streq	r1, [r4, #0]
 8003fb6:	6062      	str	r2, [r4, #4]
 8003fb8:	605c      	str	r4, [r3, #4]
 8003fba:	e7c9      	b.n	8003f50 <_free_r+0x24>
 8003fbc:	bd38      	pop	{r3, r4, r5, pc}
 8003fbe:	bf00      	nop
 8003fc0:	20000438 	.word	0x20000438

08003fc4 <_read_r>:
 8003fc4:	b538      	push	{r3, r4, r5, lr}
 8003fc6:	4605      	mov	r5, r0
 8003fc8:	4608      	mov	r0, r1
 8003fca:	4611      	mov	r1, r2
 8003fcc:	2200      	movs	r2, #0
 8003fce:	4c05      	ldr	r4, [pc, #20]	; (8003fe4 <_read_r+0x20>)
 8003fd0:	6022      	str	r2, [r4, #0]
 8003fd2:	461a      	mov	r2, r3
 8003fd4:	f7fe fe2c 	bl	8002c30 <_read>
 8003fd8:	1c43      	adds	r3, r0, #1
 8003fda:	d102      	bne.n	8003fe2 <_read_r+0x1e>
 8003fdc:	6823      	ldr	r3, [r4, #0]
 8003fde:	b103      	cbz	r3, 8003fe2 <_read_r+0x1e>
 8003fe0:	602b      	str	r3, [r5, #0]
 8003fe2:	bd38      	pop	{r3, r4, r5, pc}
 8003fe4:	20001384 	.word	0x20001384

08003fe8 <_fstat_r>:
 8003fe8:	b538      	push	{r3, r4, r5, lr}
 8003fea:	2300      	movs	r3, #0
 8003fec:	4c06      	ldr	r4, [pc, #24]	; (8004008 <_fstat_r+0x20>)
 8003fee:	4605      	mov	r5, r0
 8003ff0:	4608      	mov	r0, r1
 8003ff2:	4611      	mov	r1, r2
 8003ff4:	6023      	str	r3, [r4, #0]
 8003ff6:	f7fe fe54 	bl	8002ca2 <_fstat>
 8003ffa:	1c43      	adds	r3, r0, #1
 8003ffc:	d102      	bne.n	8004004 <_fstat_r+0x1c>
 8003ffe:	6823      	ldr	r3, [r4, #0]
 8004000:	b103      	cbz	r3, 8004004 <_fstat_r+0x1c>
 8004002:	602b      	str	r3, [r5, #0]
 8004004:	bd38      	pop	{r3, r4, r5, pc}
 8004006:	bf00      	nop
 8004008:	20001384 	.word	0x20001384

0800400c <_isatty_r>:
 800400c:	b538      	push	{r3, r4, r5, lr}
 800400e:	2300      	movs	r3, #0
 8004010:	4c05      	ldr	r4, [pc, #20]	; (8004028 <_isatty_r+0x1c>)
 8004012:	4605      	mov	r5, r0
 8004014:	4608      	mov	r0, r1
 8004016:	6023      	str	r3, [r4, #0]
 8004018:	f7fe fe48 	bl	8002cac <_isatty>
 800401c:	1c43      	adds	r3, r0, #1
 800401e:	d102      	bne.n	8004026 <_isatty_r+0x1a>
 8004020:	6823      	ldr	r3, [r4, #0]
 8004022:	b103      	cbz	r3, 8004026 <_isatty_r+0x1a>
 8004024:	602b      	str	r3, [r5, #0]
 8004026:	bd38      	pop	{r3, r4, r5, pc}
 8004028:	20001384 	.word	0x20001384

0800402c <_init>:
 800402c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800402e:	bf00      	nop
 8004030:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004032:	bc08      	pop	{r3}
 8004034:	469e      	mov	lr, r3
 8004036:	4770      	bx	lr

08004038 <_fini>:
 8004038:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800403a:	bf00      	nop
 800403c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800403e:	bc08      	pop	{r3}
 8004040:	469e      	mov	lr, r3
 8004042:	4770      	bx	lr
